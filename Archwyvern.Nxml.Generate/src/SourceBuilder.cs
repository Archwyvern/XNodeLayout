using Godot;
using System;
using System.Collections.Generic;
using System.Reflection;
using System.Text;
using System.Xml.Serialization;

namespace Archwyvern.Nxml.Generate;

public class SourceBuilder
{
    private const string NS = "http://archwyvern.com/xsd/nxml";

    public static Dictionary<Type, string> CreateTags(IEnumerable<Template> templates)
    {
        var sources = new Dictionary<Type, string>();

        foreach (var template in templates) {
            sources.Add(template.Type, CreateTag(template));
        }

        return sources;
    }

    public static string CreateTag(Template template)
    {
        var writer = new Writer();

        writer.AppendLine("// <auto-generated />");
        writer.AppendLine($"namespace {template.Namespace}");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine($"[System.Xml.Serialization.XmlRoot(ElementName = \"{template.Type.Name}\", Namespace = \"{NS}\")]");
        writer.AppendLine($"public class {template.ClassName} : Archwyvern.Nxml.Tag");
        writer.AppendLine("{").Indent(1);
        writer.AppendLine("#nullable enable", false);

        writer.AppendLine("// Simple Fields");
        foreach (var attribute in template.SimpleAttributes.Values) {
            writer.AppendLine($"[System.Xml.Serialization.XmlAttribute(AttributeName = \"{attribute.Name}\")] public string _Surrogate_{attribute.Name} {{").Indent(1);
            writer.AppendLine($"get => {attribute.Name} != null ? (({attribute.Type.PrintName()}){attribute.Name}).ToString() : \"\";");

            if (attribute.Type == typeof(string)) {
                writer.AppendLine($"set => {attribute.Name} = value != \"\" ? value : null;");
            } else if (attribute.Type.IsEnum) {
                writer.AppendLine($"set => {attribute.Name} = value != \"\" ? System.Enum.Parse<{attribute.Type.PrintName()}>(value) : null;");
            } else {
                writer.AppendLine($"set => {attribute.Name} = value != \"\" ? {attribute.Type.PrintName()}.Parse(value) : null;");
            }

            writer.Indent(-1).AppendLine("}");
            writer.AppendLine($"[System.Xml.Serialization.XmlIgnore] public {attribute.Type.PrintName()}? {attribute.Name};");
        }
        writer.AppendLine("#nullable disable", false);
        writer.AppendLine(null, false);

        writer.AppendLine("// Overloaded Fields");

        foreach (var attribute in template.OverloadedAttributes.Values) {
            writer.AppendLine($"[System.Xml.Serialization.XmlAttribute(AttributeName = \"{attribute.Name}\")] public string _Surrogate_{attribute.Name} {{").Indent(1);
            writer.AppendLine($"get => {attribute.Name} != null ? (({attribute.Type}){attribute.Name}).ToString() : \"\";");
            writer.AppendLine($"set => {attribute.Name} = value != \"\" ? value : null;");
            writer.Indent(-1).AppendLine("}");
            writer.AppendLine($"[System.Xml.Serialization.XmlIgnore] public {attribute.Type}? {attribute.Name};");
        }

        writer.AppendLine(null, false);

        writer.AppendLine($"public override Godot.Node CreateNode()");
        writer.AppendLine("{").Indent(1);
        writer.AppendLine($"var obj = new {template.Type.PrintName()}();");
        writer.AppendLine(null, false);

        foreach (var attribute in template.SimpleAttributes.Values) {
            writer.AppendLine($"if ({attribute.Name} != null) obj.{attribute.Name} = ({attribute.Type.PrintName()}){attribute.Name};");
        }
        foreach (var attribute in template.OverloadedAttributes.Values) {
            writer.AppendLine($"if ({attribute.Name} != null) obj.{attribute.Name} = ({attribute.Type}){attribute.Name};");
        }

        writer.AppendLine(null, false);
        writer.AppendLine("return obj;");

        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");

        return writer.ToString();
    }

    public static string CreateManifest(IEnumerable<Template> templates)
    {
        var writer = new Writer();

        writer.AppendLine("// <auto-generated />");
        writer.AppendLine($"namespace Archwyvern.Nxml");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine($"public class Manifest");
        writer.AppendLine("{").Indent(1);

        writer.Append("public static readonly System.Collections.Immutable.ImmutableDictionary<string, System.Type> Tags = ");
        writer.AppendLine("System.Collections.Immutable.ImmutableDictionary.CreateRange(", false).Indent(1);
        writer.AppendLine("new System.Collections.Generic.Dictionary<string, System.Type>() {").Indent(1);

        foreach (var template in templates) {
            writer.AppendLine($"{{ \"{ template.Type.Name}\", typeof({template.Namespace}.{template.ClassName}) }},");
        }

        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine(");");

        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");

        return writer.ToString();
    }

    public static string CreateBaseTag(IEnumerable<Template> templates)
    {
        var writer = new Writer();

        writer.AppendLine("// <auto-generated />");
        writer.AppendLine("namespace Archwyvern.Nxml");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine("public abstract partial class Tag");
        writer.AppendLine("{").Indent(1);

        foreach (var template in templates) {
            writer.Append($"[System.Xml.Serialization.XmlElement(ElementName = \"{template.Type.Name}\", ");
            writer.AppendLine($"Type = typeof({template.Namespace}.{template.ClassName}))]", false);
        }

        writer.AppendLine("public System.Collections.Generic.List<Tag> Children;");

        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");

        return writer.ToString();
    }

    public static string CreateOverrides(IEnumerable<Template> templates)
    {
        var writer = new Writer();

        writer.AppendLine("// <auto-generated />");
        writer.AppendLine("namespace Archwyvern.Nxml");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine("internal class Overrides");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine("public static System.Xml.Serialization.XmlAttributeOverrides Create()");
        writer.AppendLine("{").Indent(1);

        writer.AppendLine("System.Xml.Serialization.XmlAttributeOverrides attributeOverrides = new();");
        writer.AppendLine(null, false);

        var types = new HashSet<Type>();

        foreach (var template in templates) {
            foreach (var type in template.AttributeOverrideTypes) {
                if (types.Contains(type)) {
                    continue;
                }

                types.Add(type);
                var typeName = type.FullName.Replace("+", ".");

                writer.AppendLine("attributeOverrides.Add(").Indent(1);
                writer.AppendLine($"typeof({typeName}),");
                writer.AppendLine("new () {").Indent(1);
                writer.AppendLine($"XmlType = new() {{ TypeName = \"{typeName}\" }}");
                writer.Indent(-1).AppendLine("}");
                writer.Indent(-1).AppendLine(");");
            }
        }

        writer.AppendLine(null, false);
        writer.AppendLine("return attributeOverrides;");

        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");
        writer.Indent(-1).AppendLine("}");

        return writer.ToString();
    }

    private class Writer
    {
        private StringBuilder _stringBuilder = new();
        private int _intent = 0;
        private bool _wasLine = false;

        public Writer Indent(int count)
        {
            _intent += count;

            return this;
        }

        public Writer Append(object obj = null)
        {
            if (_wasLine) {
                _stringBuilder.Append("".PadRight(_intent * 4, ' '));
            }

            _stringBuilder.Append(obj);
            _wasLine = false;

            return this;
        }

        public Writer AppendLine(object obj = null, bool indent = true)
        {
            if (indent) {
                _stringBuilder.Append("".PadRight(_intent * 4, ' '));
                _stringBuilder.AppendLine((string)obj);
            } else {
                _stringBuilder.AppendLine((string)obj);
            }

            _wasLine = true;

            return this;
        }

        public override string ToString()
        {
            return _stringBuilder.ToString();
        }
    }
}
