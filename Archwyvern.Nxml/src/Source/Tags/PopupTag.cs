// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Popup", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class PopupTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Popup.ElementProperty.Theme")] public class Theme
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Theme", Type = typeof(ThemeTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Popup.ElementProperty.World3D")] public class World3D
            {
                [System.Xml.Serialization.XmlElement(ElementName = "World3D", Type = typeof(World3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Popup.ElementProperty.World2D")] public class World2D
            {
                [System.Xml.Serialization.XmlElement(ElementName = "World2D", Type = typeof(World2DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Popup.ElementProperty.VrsTexture")] public class VrsTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Theme => _Surrogate_Element_Theme?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Theme")] public PopupTag.ElementProperty.Theme? _Surrogate_Element_Theme;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? World3D => _Surrogate_Element_World3D?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.World3D")] public PopupTag.ElementProperty.World3D? _Surrogate_Element_World3D;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? World2D => _Surrogate_Element_World2D?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.World2D")] public PopupTag.ElementProperty.World2D? _Surrogate_Element_World2D;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? VrsTexture => _Surrogate_Element_VrsTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.VrsTexture")] public PopupTag.ElementProperty.VrsTexture? _Surrogate_Element_VrsTexture;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Mode")] public string _Surrogate_Attribute_Mode {
            get => Mode != null ? ((Godot.Window.ModeEnum)Mode).ToString() : "";
            set { if (value != "") { Mode = System.Enum.Parse<Godot.Window.ModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Mode")] public string _Surrogate_Element_Mode {
            get => Mode != null ? ((Godot.Window.ModeEnum)Mode).ToString() : "";
            set { if (value != "") { Mode = System.Enum.Parse<Godot.Window.ModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Window.ModeEnum? Mode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Title")] public string _Surrogate_Attribute_Title {
            get => Title != null ? ((System.String)Title).ToString() : "";
            set { if (value != "") { Title = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Title")] public string _Surrogate_Element_Title {
            get => Title != null ? ((System.String)Title).ToString() : "";
            set { if (value != "") { Title = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Title { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InitialPosition")] public string _Surrogate_Attribute_InitialPosition {
            get => InitialPosition != null ? ((Godot.Window.WindowInitialPosition)InitialPosition).ToString() : "";
            set { if (value != "") { InitialPosition = System.Enum.Parse<Godot.Window.WindowInitialPosition>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.InitialPosition")] public string _Surrogate_Element_InitialPosition {
            get => InitialPosition != null ? ((Godot.Window.WindowInitialPosition)InitialPosition).ToString() : "";
            set { if (value != "") { InitialPosition = System.Enum.Parse<Godot.Window.WindowInitialPosition>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Window.WindowInitialPosition? InitialPosition { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CurrentScreen")] public string _Surrogate_Attribute_CurrentScreen {
            get => CurrentScreen != null ? ((System.Int32)CurrentScreen).ToString() : "";
            set { if (value != "") { CurrentScreen = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.CurrentScreen")] public string _Surrogate_Element_CurrentScreen {
            get => CurrentScreen != null ? ((System.Int32)CurrentScreen).ToString() : "";
            set { if (value != "") { CurrentScreen = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? CurrentScreen { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "WrapControls")] public string _Surrogate_Attribute_WrapControls {
            get => WrapControls != null ? ((System.Boolean)WrapControls).ToString() : "";
            set { if (value != "") { WrapControls = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.WrapControls")] public string _Surrogate_Element_WrapControls {
            get => WrapControls != null ? ((System.Boolean)WrapControls).ToString() : "";
            set { if (value != "") { WrapControls = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? WrapControls { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Transient")] public string _Surrogate_Attribute_Transient {
            get => Transient != null ? ((System.Boolean)Transient).ToString() : "";
            set { if (value != "") { Transient = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Transient")] public string _Surrogate_Element_Transient {
            get => Transient != null ? ((System.Boolean)Transient).ToString() : "";
            set { if (value != "") { Transient = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Transient { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Exclusive")] public string _Surrogate_Attribute_Exclusive {
            get => Exclusive != null ? ((System.Boolean)Exclusive).ToString() : "";
            set { if (value != "") { Exclusive = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Exclusive")] public string _Surrogate_Element_Exclusive {
            get => Exclusive != null ? ((System.Boolean)Exclusive).ToString() : "";
            set { if (value != "") { Exclusive = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Exclusive { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Unresizable")] public string _Surrogate_Attribute_Unresizable {
            get => Unresizable != null ? ((System.Boolean)Unresizable).ToString() : "";
            set { if (value != "") { Unresizable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Unresizable")] public string _Surrogate_Element_Unresizable {
            get => Unresizable != null ? ((System.Boolean)Unresizable).ToString() : "";
            set { if (value != "") { Unresizable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Unresizable { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Borderless")] public string _Surrogate_Attribute_Borderless {
            get => Borderless != null ? ((System.Boolean)Borderless).ToString() : "";
            set { if (value != "") { Borderless = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Borderless")] public string _Surrogate_Element_Borderless {
            get => Borderless != null ? ((System.Boolean)Borderless).ToString() : "";
            set { if (value != "") { Borderless = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Borderless { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlwaysOnTop")] public string _Surrogate_Attribute_AlwaysOnTop {
            get => AlwaysOnTop != null ? ((System.Boolean)AlwaysOnTop).ToString() : "";
            set { if (value != "") { AlwaysOnTop = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.AlwaysOnTop")] public string _Surrogate_Element_AlwaysOnTop {
            get => AlwaysOnTop != null ? ((System.Boolean)AlwaysOnTop).ToString() : "";
            set { if (value != "") { AlwaysOnTop = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AlwaysOnTop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Transparent")] public string _Surrogate_Attribute_Transparent {
            get => Transparent != null ? ((System.Boolean)Transparent).ToString() : "";
            set { if (value != "") { Transparent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Transparent")] public string _Surrogate_Element_Transparent {
            get => Transparent != null ? ((System.Boolean)Transparent).ToString() : "";
            set { if (value != "") { Transparent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Transparent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Unfocusable")] public string _Surrogate_Attribute_Unfocusable {
            get => Unfocusable != null ? ((System.Boolean)Unfocusable).ToString() : "";
            set { if (value != "") { Unfocusable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Unfocusable")] public string _Surrogate_Element_Unfocusable {
            get => Unfocusable != null ? ((System.Boolean)Unfocusable).ToString() : "";
            set { if (value != "") { Unfocusable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Unfocusable { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PopupWindow")] public string _Surrogate_Attribute_PopupWindow {
            get => PopupWindow != null ? ((System.Boolean)PopupWindow).ToString() : "";
            set { if (value != "") { PopupWindow = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PopupWindow")] public string _Surrogate_Element_PopupWindow {
            get => PopupWindow != null ? ((System.Boolean)PopupWindow).ToString() : "";
            set { if (value != "") { PopupWindow = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PopupWindow { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ExtendToTitle")] public string _Surrogate_Attribute_ExtendToTitle {
            get => ExtendToTitle != null ? ((System.Boolean)ExtendToTitle).ToString() : "";
            set { if (value != "") { ExtendToTitle = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ExtendToTitle")] public string _Surrogate_Element_ExtendToTitle {
            get => ExtendToTitle != null ? ((System.Boolean)ExtendToTitle).ToString() : "";
            set { if (value != "") { ExtendToTitle = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ExtendToTitle { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MousePassthrough")] public string _Surrogate_Attribute_MousePassthrough {
            get => MousePassthrough != null ? ((System.Boolean)MousePassthrough).ToString() : "";
            set { if (value != "") { MousePassthrough = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.MousePassthrough")] public string _Surrogate_Element_MousePassthrough {
            get => MousePassthrough != null ? ((System.Boolean)MousePassthrough).ToString() : "";
            set { if (value != "") { MousePassthrough = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? MousePassthrough { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContentScaleMode")] public string _Surrogate_Attribute_ContentScaleMode {
            get => ContentScaleMode != null ? ((Godot.Window.ContentScaleModeEnum)ContentScaleMode).ToString() : "";
            set { if (value != "") { ContentScaleMode = System.Enum.Parse<Godot.Window.ContentScaleModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ContentScaleMode")] public string _Surrogate_Element_ContentScaleMode {
            get => ContentScaleMode != null ? ((Godot.Window.ContentScaleModeEnum)ContentScaleMode).ToString() : "";
            set { if (value != "") { ContentScaleMode = System.Enum.Parse<Godot.Window.ContentScaleModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Window.ContentScaleModeEnum? ContentScaleMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContentScaleAspect")] public string _Surrogate_Attribute_ContentScaleAspect {
            get => ContentScaleAspect != null ? ((Godot.Window.ContentScaleAspectEnum)ContentScaleAspect).ToString() : "";
            set { if (value != "") { ContentScaleAspect = System.Enum.Parse<Godot.Window.ContentScaleAspectEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ContentScaleAspect")] public string _Surrogate_Element_ContentScaleAspect {
            get => ContentScaleAspect != null ? ((Godot.Window.ContentScaleAspectEnum)ContentScaleAspect).ToString() : "";
            set { if (value != "") { ContentScaleAspect = System.Enum.Parse<Godot.Window.ContentScaleAspectEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Window.ContentScaleAspectEnum? ContentScaleAspect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContentScaleFactor")] public string _Surrogate_Attribute_ContentScaleFactor {
            get => ContentScaleFactor != null ? ((System.Single)ContentScaleFactor).ToString() : "";
            set { if (value != "") { ContentScaleFactor = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ContentScaleFactor")] public string _Surrogate_Element_ContentScaleFactor {
            get => ContentScaleFactor != null ? ((System.Single)ContentScaleFactor).ToString() : "";
            set { if (value != "") { ContentScaleFactor = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ContentScaleFactor { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutoTranslate")] public string _Surrogate_Attribute_AutoTranslate {
            get => AutoTranslate != null ? ((System.Boolean)AutoTranslate).ToString() : "";
            set { if (value != "") { AutoTranslate = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.AutoTranslate")] public string _Surrogate_Element_AutoTranslate {
            get => AutoTranslate != null ? ((System.Boolean)AutoTranslate).ToString() : "";
            set { if (value != "") { AutoTranslate = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AutoTranslate { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Disable3D")] public string _Surrogate_Attribute_Disable3D {
            get => Disable3D != null ? ((System.Boolean)Disable3D).ToString() : "";
            set { if (value != "") { Disable3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Disable3D")] public string _Surrogate_Element_Disable3D {
            get => Disable3D != null ? ((System.Boolean)Disable3D).ToString() : "";
            set { if (value != "") { Disable3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Disable3D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseXR")] public string _Surrogate_Attribute_UseXR {
            get => UseXR != null ? ((System.Boolean)UseXR).ToString() : "";
            set { if (value != "") { UseXR = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.UseXR")] public string _Surrogate_Element_UseXR {
            get => UseXR != null ? ((System.Boolean)UseXR).ToString() : "";
            set { if (value != "") { UseXR = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseXR { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OwnWorld3D")] public string _Surrogate_Attribute_OwnWorld3D {
            get => OwnWorld3D != null ? ((System.Boolean)OwnWorld3D).ToString() : "";
            set { if (value != "") { OwnWorld3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.OwnWorld3D")] public string _Surrogate_Element_OwnWorld3D {
            get => OwnWorld3D != null ? ((System.Boolean)OwnWorld3D).ToString() : "";
            set { if (value != "") { OwnWorld3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? OwnWorld3D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TransparentBg")] public string _Surrogate_Attribute_TransparentBg {
            get => TransparentBg != null ? ((System.Boolean)TransparentBg).ToString() : "";
            set { if (value != "") { TransparentBg = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.TransparentBg")] public string _Surrogate_Element_TransparentBg {
            get => TransparentBg != null ? ((System.Boolean)TransparentBg).ToString() : "";
            set { if (value != "") { TransparentBg = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TransparentBg { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HandleInputLocally")] public string _Surrogate_Attribute_HandleInputLocally {
            get => HandleInputLocally != null ? ((System.Boolean)HandleInputLocally).ToString() : "";
            set { if (value != "") { HandleInputLocally = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.HandleInputLocally")] public string _Surrogate_Element_HandleInputLocally {
            get => HandleInputLocally != null ? ((System.Boolean)HandleInputLocally).ToString() : "";
            set { if (value != "") { HandleInputLocally = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HandleInputLocally { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Snap2DTransformsToPixel")] public string _Surrogate_Attribute_Snap2DTransformsToPixel {
            get => Snap2DTransformsToPixel != null ? ((System.Boolean)Snap2DTransformsToPixel).ToString() : "";
            set { if (value != "") { Snap2DTransformsToPixel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Snap2DTransformsToPixel")] public string _Surrogate_Element_Snap2DTransformsToPixel {
            get => Snap2DTransformsToPixel != null ? ((System.Boolean)Snap2DTransformsToPixel).ToString() : "";
            set { if (value != "") { Snap2DTransformsToPixel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Snap2DTransformsToPixel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Snap2DVerticesToPixel")] public string _Surrogate_Attribute_Snap2DVerticesToPixel {
            get => Snap2DVerticesToPixel != null ? ((System.Boolean)Snap2DVerticesToPixel).ToString() : "";
            set { if (value != "") { Snap2DVerticesToPixel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Snap2DVerticesToPixel")] public string _Surrogate_Element_Snap2DVerticesToPixel {
            get => Snap2DVerticesToPixel != null ? ((System.Boolean)Snap2DVerticesToPixel).ToString() : "";
            set { if (value != "") { Snap2DVerticesToPixel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Snap2DVerticesToPixel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Msaa2D")] public string _Surrogate_Attribute_Msaa2D {
            get => Msaa2D != null ? ((Godot.Viewport.Msaa)Msaa2D).ToString() : "";
            set { if (value != "") { Msaa2D = System.Enum.Parse<Godot.Viewport.Msaa>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Msaa2D")] public string _Surrogate_Element_Msaa2D {
            get => Msaa2D != null ? ((Godot.Viewport.Msaa)Msaa2D).ToString() : "";
            set { if (value != "") { Msaa2D = System.Enum.Parse<Godot.Viewport.Msaa>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.Msaa? Msaa2D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Msaa3D")] public string _Surrogate_Attribute_Msaa3D {
            get => Msaa3D != null ? ((Godot.Viewport.Msaa)Msaa3D).ToString() : "";
            set { if (value != "") { Msaa3D = System.Enum.Parse<Godot.Viewport.Msaa>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Msaa3D")] public string _Surrogate_Element_Msaa3D {
            get => Msaa3D != null ? ((Godot.Viewport.Msaa)Msaa3D).ToString() : "";
            set { if (value != "") { Msaa3D = System.Enum.Parse<Godot.Viewport.Msaa>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.Msaa? Msaa3D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ScreenSpaceAA")] public string _Surrogate_Attribute_ScreenSpaceAA {
            get => ScreenSpaceAA != null ? ((Godot.Viewport.ScreenSpaceAAEnum)ScreenSpaceAA).ToString() : "";
            set { if (value != "") { ScreenSpaceAA = System.Enum.Parse<Godot.Viewport.ScreenSpaceAAEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ScreenSpaceAA")] public string _Surrogate_Element_ScreenSpaceAA {
            get => ScreenSpaceAA != null ? ((Godot.Viewport.ScreenSpaceAAEnum)ScreenSpaceAA).ToString() : "";
            set { if (value != "") { ScreenSpaceAA = System.Enum.Parse<Godot.Viewport.ScreenSpaceAAEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.ScreenSpaceAAEnum? ScreenSpaceAA { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseTaa")] public string _Surrogate_Attribute_UseTaa {
            get => UseTaa != null ? ((System.Boolean)UseTaa).ToString() : "";
            set { if (value != "") { UseTaa = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.UseTaa")] public string _Surrogate_Element_UseTaa {
            get => UseTaa != null ? ((System.Boolean)UseTaa).ToString() : "";
            set { if (value != "") { UseTaa = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseTaa { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseDebanding")] public string _Surrogate_Attribute_UseDebanding {
            get => UseDebanding != null ? ((System.Boolean)UseDebanding).ToString() : "";
            set { if (value != "") { UseDebanding = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.UseDebanding")] public string _Surrogate_Element_UseDebanding {
            get => UseDebanding != null ? ((System.Boolean)UseDebanding).ToString() : "";
            set { if (value != "") { UseDebanding = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseDebanding { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseOcclusionCulling")] public string _Surrogate_Attribute_UseOcclusionCulling {
            get => UseOcclusionCulling != null ? ((System.Boolean)UseOcclusionCulling).ToString() : "";
            set { if (value != "") { UseOcclusionCulling = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.UseOcclusionCulling")] public string _Surrogate_Element_UseOcclusionCulling {
            get => UseOcclusionCulling != null ? ((System.Boolean)UseOcclusionCulling).ToString() : "";
            set { if (value != "") { UseOcclusionCulling = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseOcclusionCulling { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MeshLodThreshold")] public string _Surrogate_Attribute_MeshLodThreshold {
            get => MeshLodThreshold != null ? ((System.Single)MeshLodThreshold).ToString() : "";
            set { if (value != "") { MeshLodThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.MeshLodThreshold")] public string _Surrogate_Element_MeshLodThreshold {
            get => MeshLodThreshold != null ? ((System.Single)MeshLodThreshold).ToString() : "";
            set { if (value != "") { MeshLodThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MeshLodThreshold { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DebugDraw")] public string _Surrogate_Attribute_DebugDraw {
            get => DebugDraw != null ? ((Godot.Viewport.DebugDrawEnum)DebugDraw).ToString() : "";
            set { if (value != "") { DebugDraw = System.Enum.Parse<Godot.Viewport.DebugDrawEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.DebugDraw")] public string _Surrogate_Element_DebugDraw {
            get => DebugDraw != null ? ((Godot.Viewport.DebugDrawEnum)DebugDraw).ToString() : "";
            set { if (value != "") { DebugDraw = System.Enum.Parse<Godot.Viewport.DebugDrawEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.DebugDrawEnum? DebugDraw { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scaling3DMode")] public string _Surrogate_Attribute_Scaling3DMode {
            get => Scaling3DMode != null ? ((Godot.Viewport.Scaling3DModeEnum)Scaling3DMode).ToString() : "";
            set { if (value != "") { Scaling3DMode = System.Enum.Parse<Godot.Viewport.Scaling3DModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Scaling3DMode")] public string _Surrogate_Element_Scaling3DMode {
            get => Scaling3DMode != null ? ((Godot.Viewport.Scaling3DModeEnum)Scaling3DMode).ToString() : "";
            set { if (value != "") { Scaling3DMode = System.Enum.Parse<Godot.Viewport.Scaling3DModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.Scaling3DModeEnum? Scaling3DMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scaling3DScale")] public string _Surrogate_Attribute_Scaling3DScale {
            get => Scaling3DScale != null ? ((System.Single)Scaling3DScale).ToString() : "";
            set { if (value != "") { Scaling3DScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.Scaling3DScale")] public string _Surrogate_Element_Scaling3DScale {
            get => Scaling3DScale != null ? ((System.Single)Scaling3DScale).ToString() : "";
            set { if (value != "") { Scaling3DScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Scaling3DScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureMipmapBias")] public string _Surrogate_Attribute_TextureMipmapBias {
            get => TextureMipmapBias != null ? ((System.Single)TextureMipmapBias).ToString() : "";
            set { if (value != "") { TextureMipmapBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.TextureMipmapBias")] public string _Surrogate_Element_TextureMipmapBias {
            get => TextureMipmapBias != null ? ((System.Single)TextureMipmapBias).ToString() : "";
            set { if (value != "") { TextureMipmapBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TextureMipmapBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FsrSharpness")] public string _Surrogate_Attribute_FsrSharpness {
            get => FsrSharpness != null ? ((System.Single)FsrSharpness).ToString() : "";
            set { if (value != "") { FsrSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.FsrSharpness")] public string _Surrogate_Element_FsrSharpness {
            get => FsrSharpness != null ? ((System.Single)FsrSharpness).ToString() : "";
            set { if (value != "") { FsrSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FsrSharpness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VrsMode")] public string _Surrogate_Attribute_VrsMode {
            get => VrsMode != null ? ((Godot.Viewport.VrsModeEnum)VrsMode).ToString() : "";
            set { if (value != "") { VrsMode = System.Enum.Parse<Godot.Viewport.VrsModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.VrsMode")] public string _Surrogate_Element_VrsMode {
            get => VrsMode != null ? ((Godot.Viewport.VrsModeEnum)VrsMode).ToString() : "";
            set { if (value != "") { VrsMode = System.Enum.Parse<Godot.Viewport.VrsModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.VrsModeEnum? VrsMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CanvasItemDefaultTextureFilter")] public string _Surrogate_Attribute_CanvasItemDefaultTextureFilter {
            get => CanvasItemDefaultTextureFilter != null ? ((Godot.Viewport.DefaultCanvasItemTextureFilter)CanvasItemDefaultTextureFilter).ToString() : "";
            set { if (value != "") { CanvasItemDefaultTextureFilter = System.Enum.Parse<Godot.Viewport.DefaultCanvasItemTextureFilter>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.CanvasItemDefaultTextureFilter")] public string _Surrogate_Element_CanvasItemDefaultTextureFilter {
            get => CanvasItemDefaultTextureFilter != null ? ((Godot.Viewport.DefaultCanvasItemTextureFilter)CanvasItemDefaultTextureFilter).ToString() : "";
            set { if (value != "") { CanvasItemDefaultTextureFilter = System.Enum.Parse<Godot.Viewport.DefaultCanvasItemTextureFilter>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.DefaultCanvasItemTextureFilter? CanvasItemDefaultTextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CanvasItemDefaultTextureRepeat")] public string _Surrogate_Attribute_CanvasItemDefaultTextureRepeat {
            get => CanvasItemDefaultTextureRepeat != null ? ((Godot.Viewport.DefaultCanvasItemTextureRepeat)CanvasItemDefaultTextureRepeat).ToString() : "";
            set { if (value != "") { CanvasItemDefaultTextureRepeat = System.Enum.Parse<Godot.Viewport.DefaultCanvasItemTextureRepeat>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.CanvasItemDefaultTextureRepeat")] public string _Surrogate_Element_CanvasItemDefaultTextureRepeat {
            get => CanvasItemDefaultTextureRepeat != null ? ((Godot.Viewport.DefaultCanvasItemTextureRepeat)CanvasItemDefaultTextureRepeat).ToString() : "";
            set { if (value != "") { CanvasItemDefaultTextureRepeat = System.Enum.Parse<Godot.Viewport.DefaultCanvasItemTextureRepeat>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.DefaultCanvasItemTextureRepeat? CanvasItemDefaultTextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AudioListenerEnable2D")] public string _Surrogate_Attribute_AudioListenerEnable2D {
            get => AudioListenerEnable2D != null ? ((System.Boolean)AudioListenerEnable2D).ToString() : "";
            set { if (value != "") { AudioListenerEnable2D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.AudioListenerEnable2D")] public string _Surrogate_Element_AudioListenerEnable2D {
            get => AudioListenerEnable2D != null ? ((System.Boolean)AudioListenerEnable2D).ToString() : "";
            set { if (value != "") { AudioListenerEnable2D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AudioListenerEnable2D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AudioListenerEnable3D")] public string _Surrogate_Attribute_AudioListenerEnable3D {
            get => AudioListenerEnable3D != null ? ((System.Boolean)AudioListenerEnable3D).ToString() : "";
            set { if (value != "") { AudioListenerEnable3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.AudioListenerEnable3D")] public string _Surrogate_Element_AudioListenerEnable3D {
            get => AudioListenerEnable3D != null ? ((System.Boolean)AudioListenerEnable3D).ToString() : "";
            set { if (value != "") { AudioListenerEnable3D = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AudioListenerEnable3D { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PhysicsObjectPicking")] public string _Surrogate_Attribute_PhysicsObjectPicking {
            get => PhysicsObjectPicking != null ? ((System.Boolean)PhysicsObjectPicking).ToString() : "";
            set { if (value != "") { PhysicsObjectPicking = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PhysicsObjectPicking")] public string _Surrogate_Element_PhysicsObjectPicking {
            get => PhysicsObjectPicking != null ? ((System.Boolean)PhysicsObjectPicking).ToString() : "";
            set { if (value != "") { PhysicsObjectPicking = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PhysicsObjectPicking { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PhysicsObjectPickingSort")] public string _Surrogate_Attribute_PhysicsObjectPickingSort {
            get => PhysicsObjectPickingSort != null ? ((System.Boolean)PhysicsObjectPickingSort).ToString() : "";
            set { if (value != "") { PhysicsObjectPickingSort = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PhysicsObjectPickingSort")] public string _Surrogate_Element_PhysicsObjectPickingSort {
            get => PhysicsObjectPickingSort != null ? ((System.Boolean)PhysicsObjectPickingSort).ToString() : "";
            set { if (value != "") { PhysicsObjectPickingSort = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PhysicsObjectPickingSort { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GuiDisableInput")] public string _Surrogate_Attribute_GuiDisableInput {
            get => GuiDisableInput != null ? ((System.Boolean)GuiDisableInput).ToString() : "";
            set { if (value != "") { GuiDisableInput = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.GuiDisableInput")] public string _Surrogate_Element_GuiDisableInput {
            get => GuiDisableInput != null ? ((System.Boolean)GuiDisableInput).ToString() : "";
            set { if (value != "") { GuiDisableInput = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GuiDisableInput { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GuiSnapControlsToPixels")] public string _Surrogate_Attribute_GuiSnapControlsToPixels {
            get => GuiSnapControlsToPixels != null ? ((System.Boolean)GuiSnapControlsToPixels).ToString() : "";
            set { if (value != "") { GuiSnapControlsToPixels = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.GuiSnapControlsToPixels")] public string _Surrogate_Element_GuiSnapControlsToPixels {
            get => GuiSnapControlsToPixels != null ? ((System.Boolean)GuiSnapControlsToPixels).ToString() : "";
            set { if (value != "") { GuiSnapControlsToPixels = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GuiSnapControlsToPixels { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GuiEmbedSubwindows")] public string _Surrogate_Attribute_GuiEmbedSubwindows {
            get => GuiEmbedSubwindows != null ? ((System.Boolean)GuiEmbedSubwindows).ToString() : "";
            set { if (value != "") { GuiEmbedSubwindows = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.GuiEmbedSubwindows")] public string _Surrogate_Element_GuiEmbedSubwindows {
            get => GuiEmbedSubwindows != null ? ((System.Boolean)GuiEmbedSubwindows).ToString() : "";
            set { if (value != "") { GuiEmbedSubwindows = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GuiEmbedSubwindows { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfOversize")] public string _Surrogate_Attribute_SdfOversize {
            get => SdfOversize != null ? ((Godot.Viewport.SdfOversizeEnum)SdfOversize).ToString() : "";
            set { if (value != "") { SdfOversize = System.Enum.Parse<Godot.Viewport.SdfOversizeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.SdfOversize")] public string _Surrogate_Element_SdfOversize {
            get => SdfOversize != null ? ((Godot.Viewport.SdfOversizeEnum)SdfOversize).ToString() : "";
            set { if (value != "") { SdfOversize = System.Enum.Parse<Godot.Viewport.SdfOversizeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.SdfOversizeEnum? SdfOversize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfScale")] public string _Surrogate_Attribute_SdfScale {
            get => SdfScale != null ? ((Godot.Viewport.SdfScaleEnum)SdfScale).ToString() : "";
            set { if (value != "") { SdfScale = System.Enum.Parse<Godot.Viewport.SdfScaleEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.SdfScale")] public string _Surrogate_Element_SdfScale {
            get => SdfScale != null ? ((Godot.Viewport.SdfScaleEnum)SdfScale).ToString() : "";
            set { if (value != "") { SdfScale = System.Enum.Parse<Godot.Viewport.SdfScaleEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.SdfScaleEnum? SdfScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlasSize")] public string _Surrogate_Attribute_PositionalShadowAtlasSize {
            get => PositionalShadowAtlasSize != null ? ((System.Int32)PositionalShadowAtlasSize).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlasSize")] public string _Surrogate_Element_PositionalShadowAtlasSize {
            get => PositionalShadowAtlasSize != null ? ((System.Int32)PositionalShadowAtlasSize).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? PositionalShadowAtlasSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlas16Bits")] public string _Surrogate_Attribute_PositionalShadowAtlas16Bits {
            get => PositionalShadowAtlas16Bits != null ? ((System.Boolean)PositionalShadowAtlas16Bits).ToString() : "";
            set { if (value != "") { PositionalShadowAtlas16Bits = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlas16Bits")] public string _Surrogate_Element_PositionalShadowAtlas16Bits {
            get => PositionalShadowAtlas16Bits != null ? ((System.Boolean)PositionalShadowAtlas16Bits).ToString() : "";
            set { if (value != "") { PositionalShadowAtlas16Bits = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PositionalShadowAtlas16Bits { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlasQuad0")] public string _Surrogate_Attribute_PositionalShadowAtlasQuad0 {
            get => PositionalShadowAtlasQuad0 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad0).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad0 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlasQuad0")] public string _Surrogate_Element_PositionalShadowAtlasQuad0 {
            get => PositionalShadowAtlasQuad0 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad0).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad0 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv? PositionalShadowAtlasQuad0 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlasQuad1")] public string _Surrogate_Attribute_PositionalShadowAtlasQuad1 {
            get => PositionalShadowAtlasQuad1 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad1).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad1 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlasQuad1")] public string _Surrogate_Element_PositionalShadowAtlasQuad1 {
            get => PositionalShadowAtlasQuad1 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad1).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad1 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv? PositionalShadowAtlasQuad1 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlasQuad2")] public string _Surrogate_Attribute_PositionalShadowAtlasQuad2 {
            get => PositionalShadowAtlasQuad2 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad2).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad2 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlasQuad2")] public string _Surrogate_Element_PositionalShadowAtlasQuad2 {
            get => PositionalShadowAtlasQuad2 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad2).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad2 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv? PositionalShadowAtlasQuad2 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionalShadowAtlasQuad3")] public string _Surrogate_Attribute_PositionalShadowAtlasQuad3 {
            get => PositionalShadowAtlasQuad3 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad3).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad3 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.PositionalShadowAtlasQuad3")] public string _Surrogate_Element_PositionalShadowAtlasQuad3 {
            get => PositionalShadowAtlasQuad3 != null ? ((Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad3).ToString() : "";
            set { if (value != "") { PositionalShadowAtlasQuad3 = System.Enum.Parse<Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv? PositionalShadowAtlasQuad3 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CanvasCullMask")] public string _Surrogate_Attribute_CanvasCullMask {
            get => CanvasCullMask != null ? ((System.UInt32)CanvasCullMask).ToString() : "";
            set { if (value != "") { CanvasCullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.CanvasCullMask")] public string _Surrogate_Element_CanvasCullMask {
            get => CanvasCullMask != null ? ((System.UInt32)CanvasCullMask).ToString() : "";
            set { if (value != "") { CanvasCullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CanvasCullMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Popup.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector2)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Size")] public string _Surrogate_Size {
            get => Size != null ? ((Archwyvern.Nxml.Translators.Vector2)Size).ToString() : "";
            set => Size = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Size;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MinSize")] public string _Surrogate_MinSize {
            get => MinSize != null ? ((Archwyvern.Nxml.Translators.Vector2)MinSize).ToString() : "";
            set => MinSize = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? MinSize;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxSize")] public string _Surrogate_MaxSize {
            get => MaxSize != null ? ((Archwyvern.Nxml.Translators.Vector2)MaxSize).ToString() : "";
            set => MaxSize = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? MaxSize;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContentScaleSize")] public string _Surrogate_ContentScaleSize {
            get => ContentScaleSize != null ? ((Archwyvern.Nxml.Translators.Vector2)ContentScaleSize).ToString() : "";
            set => ContentScaleSize = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? ContentScaleSize;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ThemeTypeVariation")] public string _Surrogate_ThemeTypeVariation {
            get => ThemeTypeVariation != null ? ((Archwyvern.Nxml.Translators.StringName)ThemeTypeVariation).ToString() : "";
            set => ThemeTypeVariation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? ThemeTypeVariation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Popup) return alt;
            var obj = (Godot.Popup)alt ?? new Godot.Popup();

            // Attributes
            if (Mode != null) obj.Mode = (Godot.Window.ModeEnum)Mode;
            if (Title != null) obj.Title = (System.String)Title;
            if (InitialPosition != null) obj.InitialPosition = (Godot.Window.WindowInitialPosition)InitialPosition;
            if (CurrentScreen != null) obj.CurrentScreen = (System.Int32)CurrentScreen;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (WrapControls != null) obj.WrapControls = (System.Boolean)WrapControls;
            if (Transient != null) obj.Transient = (System.Boolean)Transient;
            if (Exclusive != null) obj.Exclusive = (System.Boolean)Exclusive;
            if (Unresizable != null) obj.Unresizable = (System.Boolean)Unresizable;
            if (Borderless != null) obj.Borderless = (System.Boolean)Borderless;
            if (AlwaysOnTop != null) obj.AlwaysOnTop = (System.Boolean)AlwaysOnTop;
            if (Transparent != null) obj.Transparent = (System.Boolean)Transparent;
            if (Unfocusable != null) obj.Unfocusable = (System.Boolean)Unfocusable;
            if (PopupWindow != null) obj.PopupWindow = (System.Boolean)PopupWindow;
            if (ExtendToTitle != null) obj.ExtendToTitle = (System.Boolean)ExtendToTitle;
            if (MousePassthrough != null) obj.MousePassthrough = (System.Boolean)MousePassthrough;
            if (ContentScaleMode != null) obj.ContentScaleMode = (Godot.Window.ContentScaleModeEnum)ContentScaleMode;
            if (ContentScaleAspect != null) obj.ContentScaleAspect = (Godot.Window.ContentScaleAspectEnum)ContentScaleAspect;
            if (ContentScaleFactor != null) obj.ContentScaleFactor = (System.Single)ContentScaleFactor;
            if (AutoTranslate != null) obj.AutoTranslate = (System.Boolean)AutoTranslate;
            if (Disable3D != null) obj.Disable3D = (System.Boolean)Disable3D;
            if (UseXR != null) obj.UseXR = (System.Boolean)UseXR;
            if (OwnWorld3D != null) obj.OwnWorld3D = (System.Boolean)OwnWorld3D;
            if (TransparentBg != null) obj.TransparentBg = (System.Boolean)TransparentBg;
            if (HandleInputLocally != null) obj.HandleInputLocally = (System.Boolean)HandleInputLocally;
            if (Snap2DTransformsToPixel != null) obj.Snap2DTransformsToPixel = (System.Boolean)Snap2DTransformsToPixel;
            if (Snap2DVerticesToPixel != null) obj.Snap2DVerticesToPixel = (System.Boolean)Snap2DVerticesToPixel;
            if (Msaa2D != null) obj.Msaa2D = (Godot.Viewport.Msaa)Msaa2D;
            if (Msaa3D != null) obj.Msaa3D = (Godot.Viewport.Msaa)Msaa3D;
            if (ScreenSpaceAA != null) obj.ScreenSpaceAA = (Godot.Viewport.ScreenSpaceAAEnum)ScreenSpaceAA;
            if (UseTaa != null) obj.UseTaa = (System.Boolean)UseTaa;
            if (UseDebanding != null) obj.UseDebanding = (System.Boolean)UseDebanding;
            if (UseOcclusionCulling != null) obj.UseOcclusionCulling = (System.Boolean)UseOcclusionCulling;
            if (MeshLodThreshold != null) obj.MeshLodThreshold = (System.Single)MeshLodThreshold;
            if (DebugDraw != null) obj.DebugDraw = (Godot.Viewport.DebugDrawEnum)DebugDraw;
            if (Scaling3DMode != null) obj.Scaling3DMode = (Godot.Viewport.Scaling3DModeEnum)Scaling3DMode;
            if (Scaling3DScale != null) obj.Scaling3DScale = (System.Single)Scaling3DScale;
            if (TextureMipmapBias != null) obj.TextureMipmapBias = (System.Single)TextureMipmapBias;
            if (FsrSharpness != null) obj.FsrSharpness = (System.Single)FsrSharpness;
            if (VrsMode != null) obj.VrsMode = (Godot.Viewport.VrsModeEnum)VrsMode;
            if (CanvasItemDefaultTextureFilter != null) obj.CanvasItemDefaultTextureFilter = (Godot.Viewport.DefaultCanvasItemTextureFilter)CanvasItemDefaultTextureFilter;
            if (CanvasItemDefaultTextureRepeat != null) obj.CanvasItemDefaultTextureRepeat = (Godot.Viewport.DefaultCanvasItemTextureRepeat)CanvasItemDefaultTextureRepeat;
            if (AudioListenerEnable2D != null) obj.AudioListenerEnable2D = (System.Boolean)AudioListenerEnable2D;
            if (AudioListenerEnable3D != null) obj.AudioListenerEnable3D = (System.Boolean)AudioListenerEnable3D;
            if (PhysicsObjectPicking != null) obj.PhysicsObjectPicking = (System.Boolean)PhysicsObjectPicking;
            if (PhysicsObjectPickingSort != null) obj.PhysicsObjectPickingSort = (System.Boolean)PhysicsObjectPickingSort;
            if (GuiDisableInput != null) obj.GuiDisableInput = (System.Boolean)GuiDisableInput;
            if (GuiSnapControlsToPixels != null) obj.GuiSnapControlsToPixels = (System.Boolean)GuiSnapControlsToPixels;
            if (GuiEmbedSubwindows != null) obj.GuiEmbedSubwindows = (System.Boolean)GuiEmbedSubwindows;
            if (SdfOversize != null) obj.SdfOversize = (Godot.Viewport.SdfOversizeEnum)SdfOversize;
            if (SdfScale != null) obj.SdfScale = (Godot.Viewport.SdfScaleEnum)SdfScale;
            if (PositionalShadowAtlasSize != null) obj.PositionalShadowAtlasSize = (System.Int32)PositionalShadowAtlasSize;
            if (PositionalShadowAtlas16Bits != null) obj.PositionalShadowAtlas16Bits = (System.Boolean)PositionalShadowAtlas16Bits;
            if (PositionalShadowAtlasQuad0 != null) obj.PositionalShadowAtlasQuad0 = (Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad0;
            if (PositionalShadowAtlasQuad1 != null) obj.PositionalShadowAtlasQuad1 = (Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad1;
            if (PositionalShadowAtlasQuad2 != null) obj.PositionalShadowAtlasQuad2 = (Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad2;
            if (PositionalShadowAtlasQuad3 != null) obj.PositionalShadowAtlasQuad3 = (Godot.Viewport.PositionalShadowAtlasQuadrantSubdiv)PositionalShadowAtlasQuad3;
            if (CanvasCullMask != null) obj.CanvasCullMask = (System.UInt32)CanvasCullMask;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector2)Position;
            if (Size != null) obj.Size = (Archwyvern.Nxml.Translators.Vector2)Size;
            if (MinSize != null) obj.MinSize = (Archwyvern.Nxml.Translators.Vector2)MinSize;
            if (MaxSize != null) obj.MaxSize = (Archwyvern.Nxml.Translators.Vector2)MaxSize;
            if (ContentScaleSize != null) obj.ContentScaleSize = (Archwyvern.Nxml.Translators.Vector2)ContentScaleSize;
            if (ThemeTypeVariation != null) obj.ThemeTypeVariation = (Archwyvern.Nxml.Translators.StringName)ThemeTypeVariation;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Theme != null) {
                if (((IResourceTag)Theme).ResourcePath != null) {
                    obj.Theme = (Godot.Theme)Theme.Generate(Godot.GD.Load<Godot.Theme>(((IResourceTag)Theme).ResourcePath));
                } else {
                    obj.Theme = (Godot.Theme)Theme.Generate();
                }
            }
            if (World3D != null) {
                if (((IResourceTag)World3D).ResourcePath != null) {
                    obj.World3D = (Godot.World3D)World3D.Generate(Godot.GD.Load<Godot.World3D>(((IResourceTag)World3D).ResourcePath));
                } else {
                    obj.World3D = (Godot.World3D)World3D.Generate();
                }
            }
            if (World2D != null) {
                if (((IResourceTag)World2D).ResourcePath != null) {
                    obj.World2D = (Godot.World2D)World2D.Generate(Godot.GD.Load<Godot.World2D>(((IResourceTag)World2D).ResourcePath));
                } else {
                    obj.World2D = (Godot.World2D)World2D.Generate();
                }
            }
            if (VrsTexture != null) {
                if (((IResourceTag)VrsTexture).ResourcePath != null) {
                    obj.VrsTexture = (Godot.Texture2D)VrsTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)VrsTexture).ResourcePath));
                } else {
                    obj.VrsTexture = (Godot.Texture2D)VrsTexture.Generate();
                }
            }

            return obj;
        }
    }
}
