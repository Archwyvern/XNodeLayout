// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "ColorPickerButton", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class ColorPickerButtonTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "ColorPickerButton.ElementProperty.Icon")] public class Icon
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ColorPickerButton.ElementProperty.ButtonGroup")] public class ButtonGroup
            {
                [System.Xml.Serialization.XmlElement(ElementName = "ButtonGroup", Type = typeof(ButtonGroupTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ColorPickerButton.ElementProperty.Shortcut")] public class Shortcut
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Shortcut", Type = typeof(ShortcutTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ColorPickerButton.ElementProperty.Theme")] public class Theme
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Theme", Type = typeof(ThemeTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ColorPickerButton.ElementProperty.Material")] public class Material
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Icon => _Surrogate_Element_Icon?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Icon")] public ColorPickerButtonTag.ElementProperty.Icon? _Surrogate_Element_Icon;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ButtonGroup => _Surrogate_Element_ButtonGroup?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ButtonGroup")] public ColorPickerButtonTag.ElementProperty.ButtonGroup? _Surrogate_Element_ButtonGroup;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Shortcut => _Surrogate_Element_Shortcut?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Shortcut")] public ColorPickerButtonTag.ElementProperty.Shortcut? _Surrogate_Element_Shortcut;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Theme => _Surrogate_Element_Theme?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Theme")] public ColorPickerButtonTag.ElementProperty.Theme? _Surrogate_Element_Theme;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Material => _Surrogate_Element_Material?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Material")] public ColorPickerButtonTag.ElementProperty.Material? _Surrogate_Element_Material;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditAlpha")] public string _Surrogate_Attribute_EditAlpha {
            get => EditAlpha != null ? ((System.Boolean)EditAlpha).ToString() : "";
            set { if (value != "") { EditAlpha = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.EditAlpha")] public string _Surrogate_Element_EditAlpha {
            get => EditAlpha != null ? ((System.Boolean)EditAlpha).ToString() : "";
            set { if (value != "") { EditAlpha = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EditAlpha { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Text")] public string _Surrogate_Attribute_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Text")] public string _Surrogate_Element_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Text { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Flat")] public string _Surrogate_Attribute_Flat {
            get => Flat != null ? ((System.Boolean)Flat).ToString() : "";
            set { if (value != "") { Flat = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Flat")] public string _Surrogate_Element_Flat {
            get => Flat != null ? ((System.Boolean)Flat).ToString() : "";
            set { if (value != "") { Flat = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Flat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Alignment")] public string _Surrogate_Attribute_Alignment {
            get => Alignment != null ? ((Godot.HorizontalAlignment)Alignment).ToString() : "";
            set { if (value != "") { Alignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Alignment")] public string _Surrogate_Element_Alignment {
            get => Alignment != null ? ((Godot.HorizontalAlignment)Alignment).ToString() : "";
            set { if (value != "") { Alignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.HorizontalAlignment? Alignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextOverrunBehavior")] public string _Surrogate_Attribute_TextOverrunBehavior {
            get => TextOverrunBehavior != null ? ((Godot.TextServer.OverrunBehavior)TextOverrunBehavior).ToString() : "";
            set { if (value != "") { TextOverrunBehavior = System.Enum.Parse<Godot.TextServer.OverrunBehavior>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TextOverrunBehavior")] public string _Surrogate_Element_TextOverrunBehavior {
            get => TextOverrunBehavior != null ? ((Godot.TextServer.OverrunBehavior)TextOverrunBehavior).ToString() : "";
            set { if (value != "") { TextOverrunBehavior = System.Enum.Parse<Godot.TextServer.OverrunBehavior>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.OverrunBehavior? TextOverrunBehavior { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipText")] public string _Surrogate_Attribute_ClipText {
            get => ClipText != null ? ((System.Boolean)ClipText).ToString() : "";
            set { if (value != "") { ClipText = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ClipText")] public string _Surrogate_Element_ClipText {
            get => ClipText != null ? ((System.Boolean)ClipText).ToString() : "";
            set { if (value != "") { ClipText = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ClipText { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "IconAlignment")] public string _Surrogate_Attribute_IconAlignment {
            get => IconAlignment != null ? ((Godot.HorizontalAlignment)IconAlignment).ToString() : "";
            set { if (value != "") { IconAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.IconAlignment")] public string _Surrogate_Element_IconAlignment {
            get => IconAlignment != null ? ((Godot.HorizontalAlignment)IconAlignment).ToString() : "";
            set { if (value != "") { IconAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.HorizontalAlignment? IconAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VerticalIconAlignment")] public string _Surrogate_Attribute_VerticalIconAlignment {
            get => VerticalIconAlignment != null ? ((Godot.VerticalAlignment)VerticalIconAlignment).ToString() : "";
            set { if (value != "") { VerticalIconAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.VerticalIconAlignment")] public string _Surrogate_Element_VerticalIconAlignment {
            get => VerticalIconAlignment != null ? ((Godot.VerticalAlignment)VerticalIconAlignment).ToString() : "";
            set { if (value != "") { VerticalIconAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.VerticalAlignment? VerticalIconAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ExpandIcon")] public string _Surrogate_Attribute_ExpandIcon {
            get => ExpandIcon != null ? ((System.Boolean)ExpandIcon).ToString() : "";
            set { if (value != "") { ExpandIcon = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ExpandIcon")] public string _Surrogate_Element_ExpandIcon {
            get => ExpandIcon != null ? ((System.Boolean)ExpandIcon).ToString() : "";
            set { if (value != "") { ExpandIcon = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ExpandIcon { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextDirection")] public string _Surrogate_Attribute_TextDirection {
            get => TextDirection != null ? ((Godot.Control.TextDirection)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.Control.TextDirection>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TextDirection")] public string _Surrogate_Element_TextDirection {
            get => TextDirection != null ? ((Godot.Control.TextDirection)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.Control.TextDirection>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.TextDirection? TextDirection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Language")] public string _Surrogate_Attribute_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Language")] public string _Surrogate_Element_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Language { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Disabled")] public string _Surrogate_Attribute_Disabled {
            get => Disabled != null ? ((System.Boolean)Disabled).ToString() : "";
            set { if (value != "") { Disabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Disabled")] public string _Surrogate_Element_Disabled {
            get => Disabled != null ? ((System.Boolean)Disabled).ToString() : "";
            set { if (value != "") { Disabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Disabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ToggleMode")] public string _Surrogate_Attribute_ToggleMode {
            get => ToggleMode != null ? ((System.Boolean)ToggleMode).ToString() : "";
            set { if (value != "") { ToggleMode = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ToggleMode")] public string _Surrogate_Element_ToggleMode {
            get => ToggleMode != null ? ((System.Boolean)ToggleMode).ToString() : "";
            set { if (value != "") { ToggleMode = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ToggleMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ButtonPressed")] public string _Surrogate_Attribute_ButtonPressed {
            get => ButtonPressed != null ? ((System.Boolean)ButtonPressed).ToString() : "";
            set { if (value != "") { ButtonPressed = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ButtonPressed")] public string _Surrogate_Element_ButtonPressed {
            get => ButtonPressed != null ? ((System.Boolean)ButtonPressed).ToString() : "";
            set { if (value != "") { ButtonPressed = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ButtonPressed { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ActionMode")] public string _Surrogate_Attribute_ActionMode {
            get => ActionMode != null ? ((Godot.BaseButton.ActionModeEnum)ActionMode).ToString() : "";
            set { if (value != "") { ActionMode = System.Enum.Parse<Godot.BaseButton.ActionModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ActionMode")] public string _Surrogate_Element_ActionMode {
            get => ActionMode != null ? ((Godot.BaseButton.ActionModeEnum)ActionMode).ToString() : "";
            set { if (value != "") { ActionMode = System.Enum.Parse<Godot.BaseButton.ActionModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseButton.ActionModeEnum? ActionMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ButtonMask")] public string _Surrogate_Attribute_ButtonMask {
            get => ButtonMask != null ? ((Godot.MouseButtonMask)ButtonMask).ToString() : "";
            set { if (value != "") { ButtonMask = System.Enum.Parse<Godot.MouseButtonMask>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ButtonMask")] public string _Surrogate_Element_ButtonMask {
            get => ButtonMask != null ? ((Godot.MouseButtonMask)ButtonMask).ToString() : "";
            set { if (value != "") { ButtonMask = System.Enum.Parse<Godot.MouseButtonMask>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.MouseButtonMask? ButtonMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "KeepPressedOutside")] public string _Surrogate_Attribute_KeepPressedOutside {
            get => KeepPressedOutside != null ? ((System.Boolean)KeepPressedOutside).ToString() : "";
            set { if (value != "") { KeepPressedOutside = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.KeepPressedOutside")] public string _Surrogate_Element_KeepPressedOutside {
            get => KeepPressedOutside != null ? ((System.Boolean)KeepPressedOutside).ToString() : "";
            set { if (value != "") { KeepPressedOutside = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? KeepPressedOutside { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShortcutFeedback")] public string _Surrogate_Attribute_ShortcutFeedback {
            get => ShortcutFeedback != null ? ((System.Boolean)ShortcutFeedback).ToString() : "";
            set { if (value != "") { ShortcutFeedback = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ShortcutFeedback")] public string _Surrogate_Element_ShortcutFeedback {
            get => ShortcutFeedback != null ? ((System.Boolean)ShortcutFeedback).ToString() : "";
            set { if (value != "") { ShortcutFeedback = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShortcutFeedback { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShortcutInTooltip")] public string _Surrogate_Attribute_ShortcutInTooltip {
            get => ShortcutInTooltip != null ? ((System.Boolean)ShortcutInTooltip).ToString() : "";
            set { if (value != "") { ShortcutInTooltip = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ShortcutInTooltip")] public string _Surrogate_Element_ShortcutInTooltip {
            get => ShortcutInTooltip != null ? ((System.Boolean)ShortcutInTooltip).ToString() : "";
            set { if (value != "") { ShortcutInTooltip = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShortcutInTooltip { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipContents")] public string _Surrogate_Attribute_ClipContents {
            get => ClipContents != null ? ((System.Boolean)ClipContents).ToString() : "";
            set { if (value != "") { ClipContents = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ClipContents")] public string _Surrogate_Element_ClipContents {
            get => ClipContents != null ? ((System.Boolean)ClipContents).ToString() : "";
            set { if (value != "") { ClipContents = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ClipContents { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LayoutDirection")] public string _Surrogate_Attribute_LayoutDirection {
            get => LayoutDirection != null ? ((Godot.Control.LayoutDirectionEnum)LayoutDirection).ToString() : "";
            set { if (value != "") { LayoutDirection = System.Enum.Parse<Godot.Control.LayoutDirectionEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.LayoutDirection")] public string _Surrogate_Element_LayoutDirection {
            get => LayoutDirection != null ? ((Godot.Control.LayoutDirectionEnum)LayoutDirection).ToString() : "";
            set { if (value != "") { LayoutDirection = System.Enum.Parse<Godot.Control.LayoutDirectionEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.LayoutDirectionEnum? LayoutDirection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LayoutMode")] public string _Surrogate_Attribute_LayoutMode {
            get => LayoutMode != null ? ((System.Int32)LayoutMode).ToString() : "";
            set { if (value != "") { LayoutMode = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.LayoutMode")] public string _Surrogate_Element_LayoutMode {
            get => LayoutMode != null ? ((System.Int32)LayoutMode).ToString() : "";
            set { if (value != "") { LayoutMode = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LayoutMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorsPreset")] public string _Surrogate_Attribute_AnchorsPreset {
            get => AnchorsPreset != null ? ((System.Int32)AnchorsPreset).ToString() : "";
            set { if (value != "") { AnchorsPreset = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AnchorsPreset")] public string _Surrogate_Element_AnchorsPreset {
            get => AnchorsPreset != null ? ((System.Int32)AnchorsPreset).ToString() : "";
            set { if (value != "") { AnchorsPreset = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? AnchorsPreset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorLeft")] public string _Surrogate_Attribute_AnchorLeft {
            get => AnchorLeft != null ? ((System.Single)AnchorLeft).ToString() : "";
            set { if (value != "") { AnchorLeft = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AnchorLeft")] public string _Surrogate_Element_AnchorLeft {
            get => AnchorLeft != null ? ((System.Single)AnchorLeft).ToString() : "";
            set { if (value != "") { AnchorLeft = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnchorLeft { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorTop")] public string _Surrogate_Attribute_AnchorTop {
            get => AnchorTop != null ? ((System.Single)AnchorTop).ToString() : "";
            set { if (value != "") { AnchorTop = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AnchorTop")] public string _Surrogate_Element_AnchorTop {
            get => AnchorTop != null ? ((System.Single)AnchorTop).ToString() : "";
            set { if (value != "") { AnchorTop = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnchorTop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorRight")] public string _Surrogate_Attribute_AnchorRight {
            get => AnchorRight != null ? ((System.Single)AnchorRight).ToString() : "";
            set { if (value != "") { AnchorRight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AnchorRight")] public string _Surrogate_Element_AnchorRight {
            get => AnchorRight != null ? ((System.Single)AnchorRight).ToString() : "";
            set { if (value != "") { AnchorRight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnchorRight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorBottom")] public string _Surrogate_Attribute_AnchorBottom {
            get => AnchorBottom != null ? ((System.Single)AnchorBottom).ToString() : "";
            set { if (value != "") { AnchorBottom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AnchorBottom")] public string _Surrogate_Element_AnchorBottom {
            get => AnchorBottom != null ? ((System.Single)AnchorBottom).ToString() : "";
            set { if (value != "") { AnchorBottom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnchorBottom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OffsetLeft")] public string _Surrogate_Attribute_OffsetLeft {
            get => OffsetLeft != null ? ((System.Single)OffsetLeft).ToString() : "";
            set { if (value != "") { OffsetLeft = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.OffsetLeft")] public string _Surrogate_Element_OffsetLeft {
            get => OffsetLeft != null ? ((System.Single)OffsetLeft).ToString() : "";
            set { if (value != "") { OffsetLeft = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OffsetLeft { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OffsetTop")] public string _Surrogate_Attribute_OffsetTop {
            get => OffsetTop != null ? ((System.Single)OffsetTop).ToString() : "";
            set { if (value != "") { OffsetTop = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.OffsetTop")] public string _Surrogate_Element_OffsetTop {
            get => OffsetTop != null ? ((System.Single)OffsetTop).ToString() : "";
            set { if (value != "") { OffsetTop = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OffsetTop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OffsetRight")] public string _Surrogate_Attribute_OffsetRight {
            get => OffsetRight != null ? ((System.Single)OffsetRight).ToString() : "";
            set { if (value != "") { OffsetRight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.OffsetRight")] public string _Surrogate_Element_OffsetRight {
            get => OffsetRight != null ? ((System.Single)OffsetRight).ToString() : "";
            set { if (value != "") { OffsetRight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OffsetRight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OffsetBottom")] public string _Surrogate_Attribute_OffsetBottom {
            get => OffsetBottom != null ? ((System.Single)OffsetBottom).ToString() : "";
            set { if (value != "") { OffsetBottom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.OffsetBottom")] public string _Surrogate_Element_OffsetBottom {
            get => OffsetBottom != null ? ((System.Single)OffsetBottom).ToString() : "";
            set { if (value != "") { OffsetBottom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OffsetBottom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GrowHorizontal")] public string _Surrogate_Attribute_GrowHorizontal {
            get => GrowHorizontal != null ? ((Godot.Control.GrowDirection)GrowHorizontal).ToString() : "";
            set { if (value != "") { GrowHorizontal = System.Enum.Parse<Godot.Control.GrowDirection>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.GrowHorizontal")] public string _Surrogate_Element_GrowHorizontal {
            get => GrowHorizontal != null ? ((Godot.Control.GrowDirection)GrowHorizontal).ToString() : "";
            set { if (value != "") { GrowHorizontal = System.Enum.Parse<Godot.Control.GrowDirection>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.GrowDirection? GrowHorizontal { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GrowVertical")] public string _Surrogate_Attribute_GrowVertical {
            get => GrowVertical != null ? ((Godot.Control.GrowDirection)GrowVertical).ToString() : "";
            set { if (value != "") { GrowVertical = System.Enum.Parse<Godot.Control.GrowDirection>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.GrowVertical")] public string _Surrogate_Element_GrowVertical {
            get => GrowVertical != null ? ((Godot.Control.GrowDirection)GrowVertical).ToString() : "";
            set { if (value != "") { GrowVertical = System.Enum.Parse<Godot.Control.GrowDirection>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.GrowDirection? GrowVertical { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Attribute_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Rotation")] public string _Surrogate_Element_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Rotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_Attribute_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.RotationDegrees")] public string _Surrogate_Element_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SizeFlagsHorizontal")] public string _Surrogate_Attribute_SizeFlagsHorizontal {
            get => SizeFlagsHorizontal != null ? ((Godot.Control.SizeFlags)SizeFlagsHorizontal).ToString() : "";
            set { if (value != "") { SizeFlagsHorizontal = System.Enum.Parse<Godot.Control.SizeFlags>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.SizeFlagsHorizontal")] public string _Surrogate_Element_SizeFlagsHorizontal {
            get => SizeFlagsHorizontal != null ? ((Godot.Control.SizeFlags)SizeFlagsHorizontal).ToString() : "";
            set { if (value != "") { SizeFlagsHorizontal = System.Enum.Parse<Godot.Control.SizeFlags>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.SizeFlags? SizeFlagsHorizontal { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SizeFlagsVertical")] public string _Surrogate_Attribute_SizeFlagsVertical {
            get => SizeFlagsVertical != null ? ((Godot.Control.SizeFlags)SizeFlagsVertical).ToString() : "";
            set { if (value != "") { SizeFlagsVertical = System.Enum.Parse<Godot.Control.SizeFlags>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.SizeFlagsVertical")] public string _Surrogate_Element_SizeFlagsVertical {
            get => SizeFlagsVertical != null ? ((Godot.Control.SizeFlags)SizeFlagsVertical).ToString() : "";
            set { if (value != "") { SizeFlagsVertical = System.Enum.Parse<Godot.Control.SizeFlags>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.SizeFlags? SizeFlagsVertical { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SizeFlagsStretchRatio")] public string _Surrogate_Attribute_SizeFlagsStretchRatio {
            get => SizeFlagsStretchRatio != null ? ((System.Single)SizeFlagsStretchRatio).ToString() : "";
            set { if (value != "") { SizeFlagsStretchRatio = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.SizeFlagsStretchRatio")] public string _Surrogate_Element_SizeFlagsStretchRatio {
            get => SizeFlagsStretchRatio != null ? ((System.Single)SizeFlagsStretchRatio).ToString() : "";
            set { if (value != "") { SizeFlagsStretchRatio = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SizeFlagsStretchRatio { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutoTranslate")] public string _Surrogate_Attribute_AutoTranslate {
            get => AutoTranslate != null ? ((System.Boolean)AutoTranslate).ToString() : "";
            set { if (value != "") { AutoTranslate = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.AutoTranslate")] public string _Surrogate_Element_AutoTranslate {
            get => AutoTranslate != null ? ((System.Boolean)AutoTranslate).ToString() : "";
            set { if (value != "") { AutoTranslate = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AutoTranslate { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LocalizeNumeralSystem")] public string _Surrogate_Attribute_LocalizeNumeralSystem {
            get => LocalizeNumeralSystem != null ? ((System.Boolean)LocalizeNumeralSystem).ToString() : "";
            set { if (value != "") { LocalizeNumeralSystem = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.LocalizeNumeralSystem")] public string _Surrogate_Element_LocalizeNumeralSystem {
            get => LocalizeNumeralSystem != null ? ((System.Boolean)LocalizeNumeralSystem).ToString() : "";
            set { if (value != "") { LocalizeNumeralSystem = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LocalizeNumeralSystem { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TooltipText")] public string _Surrogate_Attribute_TooltipText {
            get => TooltipText != null ? ((System.String)TooltipText).ToString() : "";
            set { if (value != "") { TooltipText = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TooltipText")] public string _Surrogate_Element_TooltipText {
            get => TooltipText != null ? ((System.String)TooltipText).ToString() : "";
            set { if (value != "") { TooltipText = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? TooltipText { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FocusMode")] public string _Surrogate_Attribute_FocusMode {
            get => FocusMode != null ? ((Godot.Control.FocusModeEnum)FocusMode).ToString() : "";
            set { if (value != "") { FocusMode = System.Enum.Parse<Godot.Control.FocusModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.FocusMode")] public string _Surrogate_Element_FocusMode {
            get => FocusMode != null ? ((Godot.Control.FocusModeEnum)FocusMode).ToString() : "";
            set { if (value != "") { FocusMode = System.Enum.Parse<Godot.Control.FocusModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.FocusModeEnum? FocusMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MouseFilter")] public string _Surrogate_Attribute_MouseFilter {
            get => MouseFilter != null ? ((Godot.Control.MouseFilterEnum)MouseFilter).ToString() : "";
            set { if (value != "") { MouseFilter = System.Enum.Parse<Godot.Control.MouseFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.MouseFilter")] public string _Surrogate_Element_MouseFilter {
            get => MouseFilter != null ? ((Godot.Control.MouseFilterEnum)MouseFilter).ToString() : "";
            set { if (value != "") { MouseFilter = System.Enum.Parse<Godot.Control.MouseFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.MouseFilterEnum? MouseFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MouseForcePassScrollEvents")] public string _Surrogate_Attribute_MouseForcePassScrollEvents {
            get => MouseForcePassScrollEvents != null ? ((System.Boolean)MouseForcePassScrollEvents).ToString() : "";
            set { if (value != "") { MouseForcePassScrollEvents = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.MouseForcePassScrollEvents")] public string _Surrogate_Element_MouseForcePassScrollEvents {
            get => MouseForcePassScrollEvents != null ? ((System.Boolean)MouseForcePassScrollEvents).ToString() : "";
            set { if (value != "") { MouseForcePassScrollEvents = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? MouseForcePassScrollEvents { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MouseDefaultCursorShape")] public string _Surrogate_Attribute_MouseDefaultCursorShape {
            get => MouseDefaultCursorShape != null ? ((Godot.Control.CursorShape)MouseDefaultCursorShape).ToString() : "";
            set { if (value != "") { MouseDefaultCursorShape = System.Enum.Parse<Godot.Control.CursorShape>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.MouseDefaultCursorShape")] public string _Surrogate_Element_MouseDefaultCursorShape {
            get => MouseDefaultCursorShape != null ? ((Godot.Control.CursorShape)MouseDefaultCursorShape).ToString() : "";
            set { if (value != "") { MouseDefaultCursorShape = System.Enum.Parse<Godot.Control.CursorShape>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Control.CursorShape? MouseDefaultCursorShape { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShowBehindParent")] public string _Surrogate_Attribute_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ShowBehindParent")] public string _Surrogate_Element_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShowBehindParent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipChildren")] public string _Surrogate_Attribute_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ClipChildren")] public string _Surrogate_Element_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.ClipChildrenMode? ClipChildren { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightMask")] public string _Surrogate_Attribute_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.LightMask")] public string _Surrogate_Element_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LightMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityLayer")] public string _Surrogate_Attribute_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.VisibilityLayer")] public string _Surrogate_Element_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? VisibilityLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZIndex")] public string _Surrogate_Attribute_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ZIndex")] public string _Surrogate_Element_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ZIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZAsRelative")] public string _Surrogate_Attribute_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ZAsRelative")] public string _Surrogate_Element_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ZAsRelative { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "YSortEnabled")] public string _Surrogate_Attribute_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.YSortEnabled")] public string _Surrogate_Element_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? YSortEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureRepeat")] public string _Surrogate_Attribute_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.TextureRepeat")] public string _Surrogate_Element_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureRepeatEnum? TextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseParentMaterial")] public string _Surrogate_Attribute_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.UseParentMaterial")] public string _Surrogate_Element_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseParentMaterial { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ColorPickerButton.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Color")] public string _Surrogate_Color {
            get => Color != null ? ((Archwyvern.Nxml.Translators.Color)Color).ToString() : "";
            set => Color = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Color;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CustomMinimumSize")] public string _Surrogate_CustomMinimumSize {
            get => CustomMinimumSize != null ? ((Archwyvern.Nxml.Translators.Vector2)CustomMinimumSize).ToString() : "";
            set => CustomMinimumSize = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? CustomMinimumSize;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Size")] public string _Surrogate_Size {
            get => Size != null ? ((Archwyvern.Nxml.Translators.Vector2)Size).ToString() : "";
            set => Size = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Size;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector2)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector2)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PivotOffset")] public string _Surrogate_PivotOffset {
            get => PivotOffset != null ? ((Archwyvern.Nxml.Translators.Vector2)PivotOffset).ToString() : "";
            set => PivotOffset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? PivotOffset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ThemeTypeVariation")] public string _Surrogate_ThemeTypeVariation {
            get => ThemeTypeVariation != null ? ((Archwyvern.Nxml.Translators.StringName)ThemeTypeVariation).ToString() : "";
            set => ThemeTypeVariation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? ThemeTypeVariation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Modulate")] public string _Surrogate_Modulate {
            get => Modulate != null ? ((Archwyvern.Nxml.Translators.Color)Modulate).ToString() : "";
            set => Modulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Modulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SelfModulate")] public string _Surrogate_SelfModulate {
            get => SelfModulate != null ? ((Archwyvern.Nxml.Translators.Color)SelfModulate).ToString() : "";
            set => SelfModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SelfModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.ColorPickerButton) return alt;
            var obj = (Godot.ColorPickerButton)alt ?? new Godot.ColorPickerButton();

            // Attributes
            if (EditAlpha != null) obj.EditAlpha = (System.Boolean)EditAlpha;
            if (Text != null) obj.Text = (System.String)Text;
            if (Flat != null) obj.Flat = (System.Boolean)Flat;
            if (Alignment != null) obj.Alignment = (Godot.HorizontalAlignment)Alignment;
            if (TextOverrunBehavior != null) obj.TextOverrunBehavior = (Godot.TextServer.OverrunBehavior)TextOverrunBehavior;
            if (ClipText != null) obj.ClipText = (System.Boolean)ClipText;
            if (IconAlignment != null) obj.IconAlignment = (Godot.HorizontalAlignment)IconAlignment;
            if (VerticalIconAlignment != null) obj.VerticalIconAlignment = (Godot.VerticalAlignment)VerticalIconAlignment;
            if (ExpandIcon != null) obj.ExpandIcon = (System.Boolean)ExpandIcon;
            if (TextDirection != null) obj.TextDirection = (Godot.Control.TextDirection)TextDirection;
            if (Language != null) obj.Language = (System.String)Language;
            if (Disabled != null) obj.Disabled = (System.Boolean)Disabled;
            if (ToggleMode != null) obj.ToggleMode = (System.Boolean)ToggleMode;
            if (ButtonPressed != null) obj.ButtonPressed = (System.Boolean)ButtonPressed;
            if (ActionMode != null) obj.ActionMode = (Godot.BaseButton.ActionModeEnum)ActionMode;
            if (ButtonMask != null) obj.ButtonMask = (Godot.MouseButtonMask)ButtonMask;
            if (KeepPressedOutside != null) obj.KeepPressedOutside = (System.Boolean)KeepPressedOutside;
            if (ShortcutFeedback != null) obj.ShortcutFeedback = (System.Boolean)ShortcutFeedback;
            if (ShortcutInTooltip != null) obj.ShortcutInTooltip = (System.Boolean)ShortcutInTooltip;
            if (ClipContents != null) obj.ClipContents = (System.Boolean)ClipContents;
            if (LayoutDirection != null) obj.LayoutDirection = (Godot.Control.LayoutDirectionEnum)LayoutDirection;
            if (LayoutMode != null) obj.LayoutMode = (System.Int32)LayoutMode;
            if (AnchorsPreset != null) obj.AnchorsPreset = (System.Int32)AnchorsPreset;
            if (AnchorLeft != null) obj.AnchorLeft = (System.Single)AnchorLeft;
            if (AnchorTop != null) obj.AnchorTop = (System.Single)AnchorTop;
            if (AnchorRight != null) obj.AnchorRight = (System.Single)AnchorRight;
            if (AnchorBottom != null) obj.AnchorBottom = (System.Single)AnchorBottom;
            if (OffsetLeft != null) obj.OffsetLeft = (System.Single)OffsetLeft;
            if (OffsetTop != null) obj.OffsetTop = (System.Single)OffsetTop;
            if (OffsetRight != null) obj.OffsetRight = (System.Single)OffsetRight;
            if (OffsetBottom != null) obj.OffsetBottom = (System.Single)OffsetBottom;
            if (GrowHorizontal != null) obj.GrowHorizontal = (Godot.Control.GrowDirection)GrowHorizontal;
            if (GrowVertical != null) obj.GrowVertical = (Godot.Control.GrowDirection)GrowVertical;
            if (Rotation != null) obj.Rotation = (System.Single)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (System.Single)RotationDegrees;
            if (SizeFlagsHorizontal != null) obj.SizeFlagsHorizontal = (Godot.Control.SizeFlags)SizeFlagsHorizontal;
            if (SizeFlagsVertical != null) obj.SizeFlagsVertical = (Godot.Control.SizeFlags)SizeFlagsVertical;
            if (SizeFlagsStretchRatio != null) obj.SizeFlagsStretchRatio = (System.Single)SizeFlagsStretchRatio;
            if (AutoTranslate != null) obj.AutoTranslate = (System.Boolean)AutoTranslate;
            if (LocalizeNumeralSystem != null) obj.LocalizeNumeralSystem = (System.Boolean)LocalizeNumeralSystem;
            if (TooltipText != null) obj.TooltipText = (System.String)TooltipText;
            if (FocusMode != null) obj.FocusMode = (Godot.Control.FocusModeEnum)FocusMode;
            if (MouseFilter != null) obj.MouseFilter = (Godot.Control.MouseFilterEnum)MouseFilter;
            if (MouseForcePassScrollEvents != null) obj.MouseForcePassScrollEvents = (System.Boolean)MouseForcePassScrollEvents;
            if (MouseDefaultCursorShape != null) obj.MouseDefaultCursorShape = (Godot.Control.CursorShape)MouseDefaultCursorShape;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (ShowBehindParent != null) obj.ShowBehindParent = (System.Boolean)ShowBehindParent;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (ClipChildren != null) obj.ClipChildren = (Godot.CanvasItem.ClipChildrenMode)ClipChildren;
            if (LightMask != null) obj.LightMask = (System.Int32)LightMask;
            if (VisibilityLayer != null) obj.VisibilityLayer = (System.UInt32)VisibilityLayer;
            if (ZIndex != null) obj.ZIndex = (System.Int32)ZIndex;
            if (ZAsRelative != null) obj.ZAsRelative = (System.Boolean)ZAsRelative;
            if (YSortEnabled != null) obj.YSortEnabled = (System.Boolean)YSortEnabled;
            if (TextureFilter != null) obj.TextureFilter = (Godot.CanvasItem.TextureFilterEnum)TextureFilter;
            if (TextureRepeat != null) obj.TextureRepeat = (Godot.CanvasItem.TextureRepeatEnum)TextureRepeat;
            if (UseParentMaterial != null) obj.UseParentMaterial = (System.Boolean)UseParentMaterial;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Color != null) obj.Color = (Archwyvern.Nxml.Translators.Color)Color;
            if (CustomMinimumSize != null) obj.CustomMinimumSize = (Archwyvern.Nxml.Translators.Vector2)CustomMinimumSize;
            if (Size != null) obj.Size = (Archwyvern.Nxml.Translators.Vector2)Size;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector2)Position;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector2)GlobalPosition;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector2)Scale;
            if (PivotOffset != null) obj.PivotOffset = (Archwyvern.Nxml.Translators.Vector2)PivotOffset;
            if (ThemeTypeVariation != null) obj.ThemeTypeVariation = (Archwyvern.Nxml.Translators.StringName)ThemeTypeVariation;
            if (Modulate != null) obj.Modulate = (Archwyvern.Nxml.Translators.Color)Modulate;
            if (SelfModulate != null) obj.SelfModulate = (Archwyvern.Nxml.Translators.Color)SelfModulate;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Icon != null) {
                if (((IResourceTag)Icon).ResourcePath != null) {
                    obj.Icon = (Godot.Texture2D)Icon.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)Icon).ResourcePath));
                } else {
                    obj.Icon = (Godot.Texture2D)Icon.Generate();
                }
            }
            if (ButtonGroup != null) {
                if (((IResourceTag)ButtonGroup).ResourcePath != null) {
                    obj.ButtonGroup = (Godot.ButtonGroup)ButtonGroup.Generate(Godot.GD.Load<Godot.ButtonGroup>(((IResourceTag)ButtonGroup).ResourcePath));
                } else {
                    obj.ButtonGroup = (Godot.ButtonGroup)ButtonGroup.Generate();
                }
            }
            if (Shortcut != null) {
                if (((IResourceTag)Shortcut).ResourcePath != null) {
                    obj.Shortcut = (Godot.Shortcut)Shortcut.Generate(Godot.GD.Load<Godot.Shortcut>(((IResourceTag)Shortcut).ResourcePath));
                } else {
                    obj.Shortcut = (Godot.Shortcut)Shortcut.Generate();
                }
            }
            if (Theme != null) {
                if (((IResourceTag)Theme).ResourcePath != null) {
                    obj.Theme = (Godot.Theme)Theme.Generate(Godot.GD.Load<Godot.Theme>(((IResourceTag)Theme).ResourcePath));
                } else {
                    obj.Theme = (Godot.Theme)Theme.Generate();
                }
            }
            if (Material != null) {
                if (((IResourceTag)Material).ResourcePath != null) {
                    obj.Material = (Godot.Material)Material.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)Material).ResourcePath));
                } else {
                    obj.Material = (Godot.Material)Material.Generate();
                }
            }

            return obj;
        }
    }
}
