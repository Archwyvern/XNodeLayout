// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Label3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class Label3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Label3D.ElementProperty.Font")] public class Font
            {
                [System.Xml.Serialization.XmlElement(ElementName = "FontFile", Type = typeof(FontFileTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FontVariation", Type = typeof(FontVariationTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "SystemFont", Type = typeof(SystemFontTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Label3D.ElementProperty.MaterialOverride")] public class MaterialOverride
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Label3D.ElementProperty.MaterialOverlay")] public class MaterialOverlay
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Font => _Surrogate_Element_Font?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Font")] public Label3DTag.ElementProperty.Font? _Surrogate_Element_Font;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? MaterialOverride => _Surrogate_Element_MaterialOverride?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.MaterialOverride")] public Label3DTag.ElementProperty.MaterialOverride? _Surrogate_Element_MaterialOverride;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? MaterialOverlay => _Surrogate_Element_MaterialOverlay?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.MaterialOverlay")] public Label3DTag.ElementProperty.MaterialOverlay? _Surrogate_Element_MaterialOverlay;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PixelSize")] public string _Surrogate_Attribute_PixelSize {
            get => PixelSize != null ? ((System.Single)PixelSize).ToString() : "";
            set { if (value != "") { PixelSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.PixelSize")] public string _Surrogate_Element_PixelSize {
            get => PixelSize != null ? ((System.Single)PixelSize).ToString() : "";
            set { if (value != "") { PixelSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PixelSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Billboard")] public string _Surrogate_Attribute_Billboard {
            get => Billboard != null ? ((Godot.BaseMaterial3D.BillboardModeEnum)Billboard).ToString() : "";
            set { if (value != "") { Billboard = System.Enum.Parse<Godot.BaseMaterial3D.BillboardModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Billboard")] public string _Surrogate_Element_Billboard {
            get => Billboard != null ? ((Godot.BaseMaterial3D.BillboardModeEnum)Billboard).ToString() : "";
            set { if (value != "") { Billboard = System.Enum.Parse<Godot.BaseMaterial3D.BillboardModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.BillboardModeEnum? Billboard { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Shaded")] public string _Surrogate_Attribute_Shaded {
            get => Shaded != null ? ((System.Boolean)Shaded).ToString() : "";
            set { if (value != "") { Shaded = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Shaded")] public string _Surrogate_Element_Shaded {
            get => Shaded != null ? ((System.Boolean)Shaded).ToString() : "";
            set { if (value != "") { Shaded = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Shaded { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DoubleSided")] public string _Surrogate_Attribute_DoubleSided {
            get => DoubleSided != null ? ((System.Boolean)DoubleSided).ToString() : "";
            set { if (value != "") { DoubleSided = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.DoubleSided")] public string _Surrogate_Element_DoubleSided {
            get => DoubleSided != null ? ((System.Boolean)DoubleSided).ToString() : "";
            set { if (value != "") { DoubleSided = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DoubleSided { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "NoDepthTest")] public string _Surrogate_Attribute_NoDepthTest {
            get => NoDepthTest != null ? ((System.Boolean)NoDepthTest).ToString() : "";
            set { if (value != "") { NoDepthTest = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.NoDepthTest")] public string _Surrogate_Element_NoDepthTest {
            get => NoDepthTest != null ? ((System.Boolean)NoDepthTest).ToString() : "";
            set { if (value != "") { NoDepthTest = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? NoDepthTest { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FixedSize")] public string _Surrogate_Attribute_FixedSize {
            get => FixedSize != null ? ((System.Boolean)FixedSize).ToString() : "";
            set { if (value != "") { FixedSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.FixedSize")] public string _Surrogate_Element_FixedSize {
            get => FixedSize != null ? ((System.Boolean)FixedSize).ToString() : "";
            set { if (value != "") { FixedSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FixedSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaCut")] public string _Surrogate_Attribute_AlphaCut {
            get => AlphaCut != null ? ((Godot.Label3D.AlphaCutMode)AlphaCut).ToString() : "";
            set { if (value != "") { AlphaCut = System.Enum.Parse<Godot.Label3D.AlphaCutMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AlphaCut")] public string _Surrogate_Element_AlphaCut {
            get => AlphaCut != null ? ((Godot.Label3D.AlphaCutMode)AlphaCut).ToString() : "";
            set { if (value != "") { AlphaCut = System.Enum.Parse<Godot.Label3D.AlphaCutMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Label3D.AlphaCutMode? AlphaCut { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaScissorThreshold")] public string _Surrogate_Attribute_AlphaScissorThreshold {
            get => AlphaScissorThreshold != null ? ((System.Single)AlphaScissorThreshold).ToString() : "";
            set { if (value != "") { AlphaScissorThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AlphaScissorThreshold")] public string _Surrogate_Element_AlphaScissorThreshold {
            get => AlphaScissorThreshold != null ? ((System.Single)AlphaScissorThreshold).ToString() : "";
            set { if (value != "") { AlphaScissorThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaScissorThreshold { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaHashScale")] public string _Surrogate_Attribute_AlphaHashScale {
            get => AlphaHashScale != null ? ((System.Single)AlphaHashScale).ToString() : "";
            set { if (value != "") { AlphaHashScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AlphaHashScale")] public string _Surrogate_Element_AlphaHashScale {
            get => AlphaHashScale != null ? ((System.Single)AlphaHashScale).ToString() : "";
            set { if (value != "") { AlphaHashScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaHashScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaAntialiasingMode")] public string _Surrogate_Attribute_AlphaAntialiasingMode {
            get => AlphaAntialiasingMode != null ? ((Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode).ToString() : "";
            set { if (value != "") { AlphaAntialiasingMode = System.Enum.Parse<Godot.BaseMaterial3D.AlphaAntiAliasing>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AlphaAntialiasingMode")] public string _Surrogate_Element_AlphaAntialiasingMode {
            get => AlphaAntialiasingMode != null ? ((Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode).ToString() : "";
            set { if (value != "") { AlphaAntialiasingMode = System.Enum.Parse<Godot.BaseMaterial3D.AlphaAntiAliasing>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.AlphaAntiAliasing? AlphaAntialiasingMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaAntialiasingEdge")] public string _Surrogate_Attribute_AlphaAntialiasingEdge {
            get => AlphaAntialiasingEdge != null ? ((System.Single)AlphaAntialiasingEdge).ToString() : "";
            set { if (value != "") { AlphaAntialiasingEdge = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AlphaAntialiasingEdge")] public string _Surrogate_Element_AlphaAntialiasingEdge {
            get => AlphaAntialiasingEdge != null ? ((System.Single)AlphaAntialiasingEdge).ToString() : "";
            set { if (value != "") { AlphaAntialiasingEdge = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaAntialiasingEdge { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.BaseMaterial3D.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.BaseMaterial3D.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RenderPriority")] public string _Surrogate_Attribute_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.RenderPriority")] public string _Surrogate_Element_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? RenderPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OutlineRenderPriority")] public string _Surrogate_Attribute_OutlineRenderPriority {
            get => OutlineRenderPriority != null ? ((System.Int32)OutlineRenderPriority).ToString() : "";
            set { if (value != "") { OutlineRenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.OutlineRenderPriority")] public string _Surrogate_Element_OutlineRenderPriority {
            get => OutlineRenderPriority != null ? ((System.Int32)OutlineRenderPriority).ToString() : "";
            set { if (value != "") { OutlineRenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? OutlineRenderPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Text")] public string _Surrogate_Attribute_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Text")] public string _Surrogate_Element_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Text { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FontSize")] public string _Surrogate_Attribute_FontSize {
            get => FontSize != null ? ((System.Int32)FontSize).ToString() : "";
            set { if (value != "") { FontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.FontSize")] public string _Surrogate_Element_FontSize {
            get => FontSize != null ? ((System.Int32)FontSize).ToString() : "";
            set { if (value != "") { FontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FontSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OutlineSize")] public string _Surrogate_Attribute_OutlineSize {
            get => OutlineSize != null ? ((System.Int32)OutlineSize).ToString() : "";
            set { if (value != "") { OutlineSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.OutlineSize")] public string _Surrogate_Element_OutlineSize {
            get => OutlineSize != null ? ((System.Int32)OutlineSize).ToString() : "";
            set { if (value != "") { OutlineSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? OutlineSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HorizontalAlignment")] public string _Surrogate_Attribute_HorizontalAlignment {
            get => HorizontalAlignment != null ? ((Godot.HorizontalAlignment)HorizontalAlignment).ToString() : "";
            set { if (value != "") { HorizontalAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.HorizontalAlignment")] public string _Surrogate_Element_HorizontalAlignment {
            get => HorizontalAlignment != null ? ((Godot.HorizontalAlignment)HorizontalAlignment).ToString() : "";
            set { if (value != "") { HorizontalAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.HorizontalAlignment? HorizontalAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VerticalAlignment")] public string _Surrogate_Attribute_VerticalAlignment {
            get => VerticalAlignment != null ? ((Godot.VerticalAlignment)VerticalAlignment).ToString() : "";
            set { if (value != "") { VerticalAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VerticalAlignment")] public string _Surrogate_Element_VerticalAlignment {
            get => VerticalAlignment != null ? ((Godot.VerticalAlignment)VerticalAlignment).ToString() : "";
            set { if (value != "") { VerticalAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.VerticalAlignment? VerticalAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uppercase")] public string _Surrogate_Attribute_Uppercase {
            get => Uppercase != null ? ((System.Boolean)Uppercase).ToString() : "";
            set { if (value != "") { Uppercase = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Uppercase")] public string _Surrogate_Element_Uppercase {
            get => Uppercase != null ? ((System.Boolean)Uppercase).ToString() : "";
            set { if (value != "") { Uppercase = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Uppercase { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LineSpacing")] public string _Surrogate_Attribute_LineSpacing {
            get => LineSpacing != null ? ((System.Single)LineSpacing).ToString() : "";
            set { if (value != "") { LineSpacing = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.LineSpacing")] public string _Surrogate_Element_LineSpacing {
            get => LineSpacing != null ? ((System.Single)LineSpacing).ToString() : "";
            set { if (value != "") { LineSpacing = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LineSpacing { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutowrapMode")] public string _Surrogate_Attribute_AutowrapMode {
            get => AutowrapMode != null ? ((Godot.TextServer.AutowrapMode)AutowrapMode).ToString() : "";
            set { if (value != "") { AutowrapMode = System.Enum.Parse<Godot.TextServer.AutowrapMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.AutowrapMode")] public string _Surrogate_Element_AutowrapMode {
            get => AutowrapMode != null ? ((Godot.TextServer.AutowrapMode)AutowrapMode).ToString() : "";
            set { if (value != "") { AutowrapMode = System.Enum.Parse<Godot.TextServer.AutowrapMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.AutowrapMode? AutowrapMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "JustificationFlags")] public string _Surrogate_Attribute_JustificationFlags {
            get => JustificationFlags != null ? ((Godot.TextServer.JustificationFlag)JustificationFlags).ToString() : "";
            set { if (value != "") { JustificationFlags = System.Enum.Parse<Godot.TextServer.JustificationFlag>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.JustificationFlags")] public string _Surrogate_Element_JustificationFlags {
            get => JustificationFlags != null ? ((Godot.TextServer.JustificationFlag)JustificationFlags).ToString() : "";
            set { if (value != "") { JustificationFlags = System.Enum.Parse<Godot.TextServer.JustificationFlag>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.JustificationFlag? JustificationFlags { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Width")] public string _Surrogate_Attribute_Width {
            get => Width != null ? ((System.Single)Width).ToString() : "";
            set { if (value != "") { Width = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Width")] public string _Surrogate_Element_Width {
            get => Width != null ? ((System.Single)Width).ToString() : "";
            set { if (value != "") { Width = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Width { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextDirection")] public string _Surrogate_Attribute_TextDirection {
            get => TextDirection != null ? ((Godot.TextServer.Direction)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.TextServer.Direction>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.TextDirection")] public string _Surrogate_Element_TextDirection {
            get => TextDirection != null ? ((Godot.TextServer.Direction)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.TextServer.Direction>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.Direction? TextDirection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Language")] public string _Surrogate_Attribute_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Language")] public string _Surrogate_Element_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Language { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StructuredTextBidiOverride")] public string _Surrogate_Attribute_StructuredTextBidiOverride {
            get => StructuredTextBidiOverride != null ? ((Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride).ToString() : "";
            set { if (value != "") { StructuredTextBidiOverride = System.Enum.Parse<Godot.TextServer.StructuredTextParser>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.StructuredTextBidiOverride")] public string _Surrogate_Element_StructuredTextBidiOverride {
            get => StructuredTextBidiOverride != null ? ((Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride).ToString() : "";
            set { if (value != "") { StructuredTextBidiOverride = System.Enum.Parse<Godot.TextServer.StructuredTextParser>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.StructuredTextParser? StructuredTextBidiOverride { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Transparency")] public string _Surrogate_Attribute_Transparency {
            get => Transparency != null ? ((System.Single)Transparency).ToString() : "";
            set { if (value != "") { Transparency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Transparency")] public string _Surrogate_Element_Transparency {
            get => Transparency != null ? ((System.Single)Transparency).ToString() : "";
            set { if (value != "") { Transparency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Transparency { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CastShadow")] public string _Surrogate_Attribute_CastShadow {
            get => CastShadow != null ? ((Godot.GeometryInstance3D.ShadowCastingSetting)CastShadow).ToString() : "";
            set { if (value != "") { CastShadow = System.Enum.Parse<Godot.GeometryInstance3D.ShadowCastingSetting>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.CastShadow")] public string _Surrogate_Element_CastShadow {
            get => CastShadow != null ? ((Godot.GeometryInstance3D.ShadowCastingSetting)CastShadow).ToString() : "";
            set { if (value != "") { CastShadow = System.Enum.Parse<Godot.GeometryInstance3D.ShadowCastingSetting>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.GeometryInstance3D.ShadowCastingSetting? CastShadow { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ExtraCullMargin")] public string _Surrogate_Attribute_ExtraCullMargin {
            get => ExtraCullMargin != null ? ((System.Single)ExtraCullMargin).ToString() : "";
            set { if (value != "") { ExtraCullMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ExtraCullMargin")] public string _Surrogate_Element_ExtraCullMargin {
            get => ExtraCullMargin != null ? ((System.Single)ExtraCullMargin).ToString() : "";
            set { if (value != "") { ExtraCullMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ExtraCullMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LodBias")] public string _Surrogate_Attribute_LodBias {
            get => LodBias != null ? ((System.Single)LodBias).ToString() : "";
            set { if (value != "") { LodBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.LodBias")] public string _Surrogate_Element_LodBias {
            get => LodBias != null ? ((System.Single)LodBias).ToString() : "";
            set { if (value != "") { LodBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LodBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "IgnoreOcclusionCulling")] public string _Surrogate_Attribute_IgnoreOcclusionCulling {
            get => IgnoreOcclusionCulling != null ? ((System.Boolean)IgnoreOcclusionCulling).ToString() : "";
            set { if (value != "") { IgnoreOcclusionCulling = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.IgnoreOcclusionCulling")] public string _Surrogate_Element_IgnoreOcclusionCulling {
            get => IgnoreOcclusionCulling != null ? ((System.Boolean)IgnoreOcclusionCulling).ToString() : "";
            set { if (value != "") { IgnoreOcclusionCulling = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? IgnoreOcclusionCulling { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GIMode")] public string _Surrogate_Attribute_GIMode {
            get => GIMode != null ? ((Godot.GeometryInstance3D.GIModeEnum)GIMode).ToString() : "";
            set { if (value != "") { GIMode = System.Enum.Parse<Godot.GeometryInstance3D.GIModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.GIMode")] public string _Surrogate_Element_GIMode {
            get => GIMode != null ? ((Godot.GeometryInstance3D.GIModeEnum)GIMode).ToString() : "";
            set { if (value != "") { GIMode = System.Enum.Parse<Godot.GeometryInstance3D.GIModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.GeometryInstance3D.GIModeEnum? GIMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GILightmapScale")] public string _Surrogate_Attribute_GILightmapScale {
            get => GILightmapScale != null ? ((Godot.GeometryInstance3D.LightmapScale)GILightmapScale).ToString() : "";
            set { if (value != "") { GILightmapScale = System.Enum.Parse<Godot.GeometryInstance3D.LightmapScale>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.GILightmapScale")] public string _Surrogate_Element_GILightmapScale {
            get => GILightmapScale != null ? ((Godot.GeometryInstance3D.LightmapScale)GILightmapScale).ToString() : "";
            set { if (value != "") { GILightmapScale = System.Enum.Parse<Godot.GeometryInstance3D.LightmapScale>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.GeometryInstance3D.LightmapScale? GILightmapScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityRangeBegin")] public string _Surrogate_Attribute_VisibilityRangeBegin {
            get => VisibilityRangeBegin != null ? ((System.Single)VisibilityRangeBegin).ToString() : "";
            set { if (value != "") { VisibilityRangeBegin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VisibilityRangeBegin")] public string _Surrogate_Element_VisibilityRangeBegin {
            get => VisibilityRangeBegin != null ? ((System.Single)VisibilityRangeBegin).ToString() : "";
            set { if (value != "") { VisibilityRangeBegin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VisibilityRangeBegin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityRangeBeginMargin")] public string _Surrogate_Attribute_VisibilityRangeBeginMargin {
            get => VisibilityRangeBeginMargin != null ? ((System.Single)VisibilityRangeBeginMargin).ToString() : "";
            set { if (value != "") { VisibilityRangeBeginMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VisibilityRangeBeginMargin")] public string _Surrogate_Element_VisibilityRangeBeginMargin {
            get => VisibilityRangeBeginMargin != null ? ((System.Single)VisibilityRangeBeginMargin).ToString() : "";
            set { if (value != "") { VisibilityRangeBeginMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VisibilityRangeBeginMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityRangeEnd")] public string _Surrogate_Attribute_VisibilityRangeEnd {
            get => VisibilityRangeEnd != null ? ((System.Single)VisibilityRangeEnd).ToString() : "";
            set { if (value != "") { VisibilityRangeEnd = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VisibilityRangeEnd")] public string _Surrogate_Element_VisibilityRangeEnd {
            get => VisibilityRangeEnd != null ? ((System.Single)VisibilityRangeEnd).ToString() : "";
            set { if (value != "") { VisibilityRangeEnd = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VisibilityRangeEnd { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityRangeEndMargin")] public string _Surrogate_Attribute_VisibilityRangeEndMargin {
            get => VisibilityRangeEndMargin != null ? ((System.Single)VisibilityRangeEndMargin).ToString() : "";
            set { if (value != "") { VisibilityRangeEndMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VisibilityRangeEndMargin")] public string _Surrogate_Element_VisibilityRangeEndMargin {
            get => VisibilityRangeEndMargin != null ? ((System.Single)VisibilityRangeEndMargin).ToString() : "";
            set { if (value != "") { VisibilityRangeEndMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VisibilityRangeEndMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityRangeFadeMode")] public string _Surrogate_Attribute_VisibilityRangeFadeMode {
            get => VisibilityRangeFadeMode != null ? ((Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum)VisibilityRangeFadeMode).ToString() : "";
            set { if (value != "") { VisibilityRangeFadeMode = System.Enum.Parse<Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.VisibilityRangeFadeMode")] public string _Surrogate_Element_VisibilityRangeFadeMode {
            get => VisibilityRangeFadeMode != null ? ((Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum)VisibilityRangeFadeMode).ToString() : "";
            set { if (value != "") { VisibilityRangeFadeMode = System.Enum.Parse<Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum? VisibilityRangeFadeMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Layers")] public string _Surrogate_Attribute_Layers {
            get => Layers != null ? ((System.UInt32)Layers).ToString() : "";
            set { if (value != "") { Layers = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Layers")] public string _Surrogate_Element_Layers {
            get => Layers != null ? ((System.UInt32)Layers).ToString() : "";
            set { if (value != "") { Layers = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? Layers { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SortingOffset")] public string _Surrogate_Attribute_SortingOffset {
            get => SortingOffset != null ? ((System.Single)SortingOffset).ToString() : "";
            set { if (value != "") { SortingOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.SortingOffset")] public string _Surrogate_Element_SortingOffset {
            get => SortingOffset != null ? ((System.Single)SortingOffset).ToString() : "";
            set { if (value != "") { SortingOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SortingOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SortingUseAabbCenter")] public string _Surrogate_Attribute_SortingUseAabbCenter {
            get => SortingUseAabbCenter != null ? ((System.Boolean)SortingUseAabbCenter).ToString() : "";
            set { if (value != "") { SortingUseAabbCenter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.SortingUseAabbCenter")] public string _Surrogate_Element_SortingUseAabbCenter {
            get => SortingUseAabbCenter != null ? ((System.Boolean)SortingUseAabbCenter).ToString() : "";
            set { if (value != "") { SortingUseAabbCenter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SortingUseAabbCenter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Label3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Offset")] public string _Surrogate_Offset {
            get => Offset != null ? ((Archwyvern.Nxml.Translators.Vector2)Offset).ToString() : "";
            set => Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Offset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Modulate")] public string _Surrogate_Modulate {
            get => Modulate != null ? ((Archwyvern.Nxml.Translators.Color)Modulate).ToString() : "";
            set => Modulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Modulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OutlineModulate")] public string _Surrogate_OutlineModulate {
            get => OutlineModulate != null ? ((Archwyvern.Nxml.Translators.Color)OutlineModulate).ToString() : "";
            set => OutlineModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? OutlineModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Label3D) return alt;
            var obj = (Godot.Label3D)alt ?? new Godot.Label3D();

            // Attributes
            if (PixelSize != null) obj.PixelSize = (System.Single)PixelSize;
            if (Billboard != null) obj.Billboard = (Godot.BaseMaterial3D.BillboardModeEnum)Billboard;
            if (Shaded != null) obj.Shaded = (System.Boolean)Shaded;
            if (DoubleSided != null) obj.DoubleSided = (System.Boolean)DoubleSided;
            if (NoDepthTest != null) obj.NoDepthTest = (System.Boolean)NoDepthTest;
            if (FixedSize != null) obj.FixedSize = (System.Boolean)FixedSize;
            if (AlphaCut != null) obj.AlphaCut = (Godot.Label3D.AlphaCutMode)AlphaCut;
            if (AlphaScissorThreshold != null) obj.AlphaScissorThreshold = (System.Single)AlphaScissorThreshold;
            if (AlphaHashScale != null) obj.AlphaHashScale = (System.Single)AlphaHashScale;
            if (AlphaAntialiasingMode != null) obj.AlphaAntialiasingMode = (Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode;
            if (AlphaAntialiasingEdge != null) obj.AlphaAntialiasingEdge = (System.Single)AlphaAntialiasingEdge;
            if (TextureFilter != null) obj.TextureFilter = (Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter;
            if (RenderPriority != null) obj.RenderPriority = (System.Int32)RenderPriority;
            if (OutlineRenderPriority != null) obj.OutlineRenderPriority = (System.Int32)OutlineRenderPriority;
            if (Text != null) obj.Text = (System.String)Text;
            if (FontSize != null) obj.FontSize = (System.Int32)FontSize;
            if (OutlineSize != null) obj.OutlineSize = (System.Int32)OutlineSize;
            if (HorizontalAlignment != null) obj.HorizontalAlignment = (Godot.HorizontalAlignment)HorizontalAlignment;
            if (VerticalAlignment != null) obj.VerticalAlignment = (Godot.VerticalAlignment)VerticalAlignment;
            if (Uppercase != null) obj.Uppercase = (System.Boolean)Uppercase;
            if (LineSpacing != null) obj.LineSpacing = (System.Single)LineSpacing;
            if (AutowrapMode != null) obj.AutowrapMode = (Godot.TextServer.AutowrapMode)AutowrapMode;
            if (JustificationFlags != null) obj.JustificationFlags = (Godot.TextServer.JustificationFlag)JustificationFlags;
            if (Width != null) obj.Width = (System.Single)Width;
            if (TextDirection != null) obj.TextDirection = (Godot.TextServer.Direction)TextDirection;
            if (Language != null) obj.Language = (System.String)Language;
            if (StructuredTextBidiOverride != null) obj.StructuredTextBidiOverride = (Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride;
            if (Transparency != null) obj.Transparency = (System.Single)Transparency;
            if (CastShadow != null) obj.CastShadow = (Godot.GeometryInstance3D.ShadowCastingSetting)CastShadow;
            if (ExtraCullMargin != null) obj.ExtraCullMargin = (System.Single)ExtraCullMargin;
            if (LodBias != null) obj.LodBias = (System.Single)LodBias;
            if (IgnoreOcclusionCulling != null) obj.IgnoreOcclusionCulling = (System.Boolean)IgnoreOcclusionCulling;
            if (GIMode != null) obj.GIMode = (Godot.GeometryInstance3D.GIModeEnum)GIMode;
            if (GILightmapScale != null) obj.GILightmapScale = (Godot.GeometryInstance3D.LightmapScale)GILightmapScale;
            if (VisibilityRangeBegin != null) obj.VisibilityRangeBegin = (System.Single)VisibilityRangeBegin;
            if (VisibilityRangeBeginMargin != null) obj.VisibilityRangeBeginMargin = (System.Single)VisibilityRangeBeginMargin;
            if (VisibilityRangeEnd != null) obj.VisibilityRangeEnd = (System.Single)VisibilityRangeEnd;
            if (VisibilityRangeEndMargin != null) obj.VisibilityRangeEndMargin = (System.Single)VisibilityRangeEndMargin;
            if (VisibilityRangeFadeMode != null) obj.VisibilityRangeFadeMode = (Godot.GeometryInstance3D.VisibilityRangeFadeModeEnum)VisibilityRangeFadeMode;
            if (Layers != null) obj.Layers = (System.UInt32)Layers;
            if (SortingOffset != null) obj.SortingOffset = (System.Single)SortingOffset;
            if (SortingUseAabbCenter != null) obj.SortingUseAabbCenter = (System.Boolean)SortingUseAabbCenter;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Offset != null) obj.Offset = (Archwyvern.Nxml.Translators.Vector2)Offset;
            if (Modulate != null) obj.Modulate = (Archwyvern.Nxml.Translators.Color)Modulate;
            if (OutlineModulate != null) obj.OutlineModulate = (Archwyvern.Nxml.Translators.Color)OutlineModulate;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Font != null) {
                if (((IResourceTag)Font).ResourcePath != null) {
                    obj.Font = (Godot.Font)Font.Generate(Godot.GD.Load<Godot.Font>(((IResourceTag)Font).ResourcePath));
                } else {
                    obj.Font = (Godot.Font)Font.Generate();
                }
            }
            if (MaterialOverride != null) {
                if (((IResourceTag)MaterialOverride).ResourcePath != null) {
                    obj.MaterialOverride = (Godot.Material)MaterialOverride.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)MaterialOverride).ResourcePath));
                } else {
                    obj.MaterialOverride = (Godot.Material)MaterialOverride.Generate();
                }
            }
            if (MaterialOverlay != null) {
                if (((IResourceTag)MaterialOverlay).ResourcePath != null) {
                    obj.MaterialOverlay = (Godot.Material)MaterialOverlay.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)MaterialOverlay).ResourcePath));
                } else {
                    obj.MaterialOverlay = (Godot.Material)MaterialOverlay.Generate();
                }
            }

            return obj;
        }
    }
}
