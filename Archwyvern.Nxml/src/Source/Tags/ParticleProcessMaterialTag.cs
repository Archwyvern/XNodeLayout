// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "ParticleProcessMaterial", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class ParticleProcessMaterialTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.EmissionPointTexture")] public class EmissionPointTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.EmissionNormalTexture")] public class EmissionNormalTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.EmissionColorTexture")] public class EmissionColorTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.AngularVelocityCurve")] public class AngularVelocityCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.OrbitVelocityCurve")] public class OrbitVelocityCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.LinearAccelCurve")] public class LinearAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.RadialAccelCurve")] public class RadialAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.TangentialAccelCurve")] public class TangentialAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.DampingCurve")] public class DampingCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.AngleCurve")] public class AngleCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.ScaleCurve")] public class ScaleCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.ColorRamp")] public class ColorRamp
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.ColorInitialRamp")] public class ColorInitialRamp
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.HueVariationCurve")] public class HueVariationCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.TurbulenceInfluenceOverLife")] public class TurbulenceInfluenceOverLife
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.AnimSpeedCurve")] public class AnimSpeedCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.AnimOffsetCurve")] public class AnimOffsetCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ParticleProcessMaterial.ElementProperty.NextPass")] public class NextPass
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? EmissionPointTexture => _Surrogate_Element_EmissionPointTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionPointTexture")] public ParticleProcessMaterialTag.ElementProperty.EmissionPointTexture? _Surrogate_Element_EmissionPointTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? EmissionNormalTexture => _Surrogate_Element_EmissionNormalTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionNormalTexture")] public ParticleProcessMaterialTag.ElementProperty.EmissionNormalTexture? _Surrogate_Element_EmissionNormalTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? EmissionColorTexture => _Surrogate_Element_EmissionColorTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionColorTexture")] public ParticleProcessMaterialTag.ElementProperty.EmissionColorTexture? _Surrogate_Element_EmissionColorTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AngularVelocityCurve => _Surrogate_Element_AngularVelocityCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngularVelocityCurve")] public ParticleProcessMaterialTag.ElementProperty.AngularVelocityCurve? _Surrogate_Element_AngularVelocityCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? OrbitVelocityCurve => _Surrogate_Element_OrbitVelocityCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.OrbitVelocityCurve")] public ParticleProcessMaterialTag.ElementProperty.OrbitVelocityCurve? _Surrogate_Element_OrbitVelocityCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? LinearAccelCurve => _Surrogate_Element_LinearAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.LinearAccelCurve")] public ParticleProcessMaterialTag.ElementProperty.LinearAccelCurve? _Surrogate_Element_LinearAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? RadialAccelCurve => _Surrogate_Element_RadialAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.RadialAccelCurve")] public ParticleProcessMaterialTag.ElementProperty.RadialAccelCurve? _Surrogate_Element_RadialAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? TangentialAccelCurve => _Surrogate_Element_TangentialAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TangentialAccelCurve")] public ParticleProcessMaterialTag.ElementProperty.TangentialAccelCurve? _Surrogate_Element_TangentialAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DampingCurve => _Surrogate_Element_DampingCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.DampingCurve")] public ParticleProcessMaterialTag.ElementProperty.DampingCurve? _Surrogate_Element_DampingCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AngleCurve => _Surrogate_Element_AngleCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngleCurve")] public ParticleProcessMaterialTag.ElementProperty.AngleCurve? _Surrogate_Element_AngleCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ScaleCurve => _Surrogate_Element_ScaleCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ScaleCurve")] public ParticleProcessMaterialTag.ElementProperty.ScaleCurve? _Surrogate_Element_ScaleCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ColorRamp => _Surrogate_Element_ColorRamp?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ColorRamp")] public ParticleProcessMaterialTag.ElementProperty.ColorRamp? _Surrogate_Element_ColorRamp;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ColorInitialRamp => _Surrogate_Element_ColorInitialRamp?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ColorInitialRamp")] public ParticleProcessMaterialTag.ElementProperty.ColorInitialRamp? _Surrogate_Element_ColorInitialRamp;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? HueVariationCurve => _Surrogate_Element_HueVariationCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.HueVariationCurve")] public ParticleProcessMaterialTag.ElementProperty.HueVariationCurve? _Surrogate_Element_HueVariationCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? TurbulenceInfluenceOverLife => _Surrogate_Element_TurbulenceInfluenceOverLife?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceInfluenceOverLife")] public ParticleProcessMaterialTag.ElementProperty.TurbulenceInfluenceOverLife? _Surrogate_Element_TurbulenceInfluenceOverLife;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AnimSpeedCurve => _Surrogate_Element_AnimSpeedCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimSpeedCurve")] public ParticleProcessMaterialTag.ElementProperty.AnimSpeedCurve? _Surrogate_Element_AnimSpeedCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AnimOffsetCurve => _Surrogate_Element_AnimOffsetCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimOffsetCurve")] public ParticleProcessMaterialTag.ElementProperty.AnimOffsetCurve? _Surrogate_Element_AnimOffsetCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? NextPass => _Surrogate_Element_NextPass?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.NextPass")] public ParticleProcessMaterialTag.ElementProperty.NextPass? _Surrogate_Element_NextPass;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LifetimeRandomness")] public string _Surrogate_Attribute_LifetimeRandomness {
            get => LifetimeRandomness != null ? ((System.Double)LifetimeRandomness).ToString() : "";
            set { if (value != "") { LifetimeRandomness = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.LifetimeRandomness")] public string _Surrogate_Element_LifetimeRandomness {
            get => LifetimeRandomness != null ? ((System.Double)LifetimeRandomness).ToString() : "";
            set { if (value != "") { LifetimeRandomness = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? LifetimeRandomness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionShape")] public string _Surrogate_Attribute_EmissionShape {
            get => EmissionShape != null ? ((Godot.ParticleProcessMaterial.EmissionShapeEnum)EmissionShape).ToString() : "";
            set { if (value != "") { EmissionShape = System.Enum.Parse<Godot.ParticleProcessMaterial.EmissionShapeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionShape")] public string _Surrogate_Element_EmissionShape {
            get => EmissionShape != null ? ((Godot.ParticleProcessMaterial.EmissionShapeEnum)EmissionShape).ToString() : "";
            set { if (value != "") { EmissionShape = System.Enum.Parse<Godot.ParticleProcessMaterial.EmissionShapeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.ParticleProcessMaterial.EmissionShapeEnum? EmissionShape { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionSphereRadius")] public string _Surrogate_Attribute_EmissionSphereRadius {
            get => EmissionSphereRadius != null ? ((System.Single)EmissionSphereRadius).ToString() : "";
            set { if (value != "") { EmissionSphereRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionSphereRadius")] public string _Surrogate_Element_EmissionSphereRadius {
            get => EmissionSphereRadius != null ? ((System.Single)EmissionSphereRadius).ToString() : "";
            set { if (value != "") { EmissionSphereRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionSphereRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionPointCount")] public string _Surrogate_Attribute_EmissionPointCount {
            get => EmissionPointCount != null ? ((System.Int32)EmissionPointCount).ToString() : "";
            set { if (value != "") { EmissionPointCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionPointCount")] public string _Surrogate_Element_EmissionPointCount {
            get => EmissionPointCount != null ? ((System.Int32)EmissionPointCount).ToString() : "";
            set { if (value != "") { EmissionPointCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? EmissionPointCount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionRingHeight")] public string _Surrogate_Attribute_EmissionRingHeight {
            get => EmissionRingHeight != null ? ((System.Single)EmissionRingHeight).ToString() : "";
            set { if (value != "") { EmissionRingHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionRingHeight")] public string _Surrogate_Element_EmissionRingHeight {
            get => EmissionRingHeight != null ? ((System.Single)EmissionRingHeight).ToString() : "";
            set { if (value != "") { EmissionRingHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionRingHeight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionRingRadius")] public string _Surrogate_Attribute_EmissionRingRadius {
            get => EmissionRingRadius != null ? ((System.Single)EmissionRingRadius).ToString() : "";
            set { if (value != "") { EmissionRingRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionRingRadius")] public string _Surrogate_Element_EmissionRingRadius {
            get => EmissionRingRadius != null ? ((System.Single)EmissionRingRadius).ToString() : "";
            set { if (value != "") { EmissionRingRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionRingRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionRingInnerRadius")] public string _Surrogate_Attribute_EmissionRingInnerRadius {
            get => EmissionRingInnerRadius != null ? ((System.Single)EmissionRingInnerRadius).ToString() : "";
            set { if (value != "") { EmissionRingInnerRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.EmissionRingInnerRadius")] public string _Surrogate_Element_EmissionRingInnerRadius {
            get => EmissionRingInnerRadius != null ? ((System.Single)EmissionRingInnerRadius).ToString() : "";
            set { if (value != "") { EmissionRingInnerRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionRingInnerRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticleFlagAlignY")] public string _Surrogate_Attribute_ParticleFlagAlignY {
            get => ParticleFlagAlignY != null ? ((System.Boolean)ParticleFlagAlignY).ToString() : "";
            set { if (value != "") { ParticleFlagAlignY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ParticleFlagAlignY")] public string _Surrogate_Element_ParticleFlagAlignY {
            get => ParticleFlagAlignY != null ? ((System.Boolean)ParticleFlagAlignY).ToString() : "";
            set { if (value != "") { ParticleFlagAlignY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ParticleFlagAlignY { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticleFlagRotateY")] public string _Surrogate_Attribute_ParticleFlagRotateY {
            get => ParticleFlagRotateY != null ? ((System.Boolean)ParticleFlagRotateY).ToString() : "";
            set { if (value != "") { ParticleFlagRotateY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ParticleFlagRotateY")] public string _Surrogate_Element_ParticleFlagRotateY {
            get => ParticleFlagRotateY != null ? ((System.Boolean)ParticleFlagRotateY).ToString() : "";
            set { if (value != "") { ParticleFlagRotateY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ParticleFlagRotateY { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticleFlagDisableZ")] public string _Surrogate_Attribute_ParticleFlagDisableZ {
            get => ParticleFlagDisableZ != null ? ((System.Boolean)ParticleFlagDisableZ).ToString() : "";
            set { if (value != "") { ParticleFlagDisableZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ParticleFlagDisableZ")] public string _Surrogate_Element_ParticleFlagDisableZ {
            get => ParticleFlagDisableZ != null ? ((System.Boolean)ParticleFlagDisableZ).ToString() : "";
            set { if (value != "") { ParticleFlagDisableZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ParticleFlagDisableZ { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Spread")] public string _Surrogate_Attribute_Spread {
            get => Spread != null ? ((System.Single)Spread).ToString() : "";
            set { if (value != "") { Spread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.Spread")] public string _Surrogate_Element_Spread {
            get => Spread != null ? ((System.Single)Spread).ToString() : "";
            set { if (value != "") { Spread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Spread { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Flatness")] public string _Surrogate_Attribute_Flatness {
            get => Flatness != null ? ((System.Single)Flatness).ToString() : "";
            set { if (value != "") { Flatness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.Flatness")] public string _Surrogate_Element_Flatness {
            get => Flatness != null ? ((System.Single)Flatness).ToString() : "";
            set { if (value != "") { Flatness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Flatness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InitialVelocityMin")] public string _Surrogate_Attribute_InitialVelocityMin {
            get => InitialVelocityMin != null ? ((System.Single)InitialVelocityMin).ToString() : "";
            set { if (value != "") { InitialVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.InitialVelocityMin")] public string _Surrogate_Element_InitialVelocityMin {
            get => InitialVelocityMin != null ? ((System.Single)InitialVelocityMin).ToString() : "";
            set { if (value != "") { InitialVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? InitialVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InitialVelocityMax")] public string _Surrogate_Attribute_InitialVelocityMax {
            get => InitialVelocityMax != null ? ((System.Single)InitialVelocityMax).ToString() : "";
            set { if (value != "") { InitialVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.InitialVelocityMax")] public string _Surrogate_Element_InitialVelocityMax {
            get => InitialVelocityMax != null ? ((System.Single)InitialVelocityMax).ToString() : "";
            set { if (value != "") { InitialVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? InitialVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocityMin")] public string _Surrogate_Attribute_AngularVelocityMin {
            get => AngularVelocityMin != null ? ((System.Single)AngularVelocityMin).ToString() : "";
            set { if (value != "") { AngularVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngularVelocityMin")] public string _Surrogate_Element_AngularVelocityMin {
            get => AngularVelocityMin != null ? ((System.Single)AngularVelocityMin).ToString() : "";
            set { if (value != "") { AngularVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocityMax")] public string _Surrogate_Attribute_AngularVelocityMax {
            get => AngularVelocityMax != null ? ((System.Single)AngularVelocityMax).ToString() : "";
            set { if (value != "") { AngularVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngularVelocityMax")] public string _Surrogate_Element_AngularVelocityMax {
            get => AngularVelocityMax != null ? ((System.Single)AngularVelocityMax).ToString() : "";
            set { if (value != "") { AngularVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OrbitVelocityMin")] public string _Surrogate_Attribute_OrbitVelocityMin {
            get => OrbitVelocityMin != null ? ((System.Single)OrbitVelocityMin).ToString() : "";
            set { if (value != "") { OrbitVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.OrbitVelocityMin")] public string _Surrogate_Element_OrbitVelocityMin {
            get => OrbitVelocityMin != null ? ((System.Single)OrbitVelocityMin).ToString() : "";
            set { if (value != "") { OrbitVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OrbitVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OrbitVelocityMax")] public string _Surrogate_Attribute_OrbitVelocityMax {
            get => OrbitVelocityMax != null ? ((System.Single)OrbitVelocityMax).ToString() : "";
            set { if (value != "") { OrbitVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.OrbitVelocityMax")] public string _Surrogate_Element_OrbitVelocityMax {
            get => OrbitVelocityMax != null ? ((System.Single)OrbitVelocityMax).ToString() : "";
            set { if (value != "") { OrbitVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OrbitVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearAccelMin")] public string _Surrogate_Attribute_LinearAccelMin {
            get => LinearAccelMin != null ? ((System.Single)LinearAccelMin).ToString() : "";
            set { if (value != "") { LinearAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.LinearAccelMin")] public string _Surrogate_Element_LinearAccelMin {
            get => LinearAccelMin != null ? ((System.Single)LinearAccelMin).ToString() : "";
            set { if (value != "") { LinearAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearAccelMax")] public string _Surrogate_Attribute_LinearAccelMax {
            get => LinearAccelMax != null ? ((System.Single)LinearAccelMax).ToString() : "";
            set { if (value != "") { LinearAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.LinearAccelMax")] public string _Surrogate_Element_LinearAccelMax {
            get => LinearAccelMax != null ? ((System.Single)LinearAccelMax).ToString() : "";
            set { if (value != "") { LinearAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RadialAccelMin")] public string _Surrogate_Attribute_RadialAccelMin {
            get => RadialAccelMin != null ? ((System.Single)RadialAccelMin).ToString() : "";
            set { if (value != "") { RadialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.RadialAccelMin")] public string _Surrogate_Element_RadialAccelMin {
            get => RadialAccelMin != null ? ((System.Single)RadialAccelMin).ToString() : "";
            set { if (value != "") { RadialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RadialAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RadialAccelMax")] public string _Surrogate_Attribute_RadialAccelMax {
            get => RadialAccelMax != null ? ((System.Single)RadialAccelMax).ToString() : "";
            set { if (value != "") { RadialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.RadialAccelMax")] public string _Surrogate_Element_RadialAccelMax {
            get => RadialAccelMax != null ? ((System.Single)RadialAccelMax).ToString() : "";
            set { if (value != "") { RadialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RadialAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TangentialAccelMin")] public string _Surrogate_Attribute_TangentialAccelMin {
            get => TangentialAccelMin != null ? ((System.Single)TangentialAccelMin).ToString() : "";
            set { if (value != "") { TangentialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TangentialAccelMin")] public string _Surrogate_Element_TangentialAccelMin {
            get => TangentialAccelMin != null ? ((System.Single)TangentialAccelMin).ToString() : "";
            set { if (value != "") { TangentialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TangentialAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TangentialAccelMax")] public string _Surrogate_Attribute_TangentialAccelMax {
            get => TangentialAccelMax != null ? ((System.Single)TangentialAccelMax).ToString() : "";
            set { if (value != "") { TangentialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TangentialAccelMax")] public string _Surrogate_Element_TangentialAccelMax {
            get => TangentialAccelMax != null ? ((System.Single)TangentialAccelMax).ToString() : "";
            set { if (value != "") { TangentialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TangentialAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingMin")] public string _Surrogate_Attribute_DampingMin {
            get => DampingMin != null ? ((System.Single)DampingMin).ToString() : "";
            set { if (value != "") { DampingMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.DampingMin")] public string _Surrogate_Element_DampingMin {
            get => DampingMin != null ? ((System.Single)DampingMin).ToString() : "";
            set { if (value != "") { DampingMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingMax")] public string _Surrogate_Attribute_DampingMax {
            get => DampingMax != null ? ((System.Single)DampingMax).ToString() : "";
            set { if (value != "") { DampingMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.DampingMax")] public string _Surrogate_Element_DampingMax {
            get => DampingMax != null ? ((System.Single)DampingMax).ToString() : "";
            set { if (value != "") { DampingMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngleMin")] public string _Surrogate_Attribute_AngleMin {
            get => AngleMin != null ? ((System.Single)AngleMin).ToString() : "";
            set { if (value != "") { AngleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngleMin")] public string _Surrogate_Element_AngleMin {
            get => AngleMin != null ? ((System.Single)AngleMin).ToString() : "";
            set { if (value != "") { AngleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngleMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngleMax")] public string _Surrogate_Attribute_AngleMax {
            get => AngleMax != null ? ((System.Single)AngleMax).ToString() : "";
            set { if (value != "") { AngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AngleMax")] public string _Surrogate_Element_AngleMax {
            get => AngleMax != null ? ((System.Single)AngleMax).ToString() : "";
            set { if (value != "") { AngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngleMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ScaleMin")] public string _Surrogate_Attribute_ScaleMin {
            get => ScaleMin != null ? ((System.Single)ScaleMin).ToString() : "";
            set { if (value != "") { ScaleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ScaleMin")] public string _Surrogate_Element_ScaleMin {
            get => ScaleMin != null ? ((System.Single)ScaleMin).ToString() : "";
            set { if (value != "") { ScaleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ScaleMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ScaleMax")] public string _Surrogate_Attribute_ScaleMax {
            get => ScaleMax != null ? ((System.Single)ScaleMax).ToString() : "";
            set { if (value != "") { ScaleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ScaleMax")] public string _Surrogate_Element_ScaleMax {
            get => ScaleMax != null ? ((System.Single)ScaleMax).ToString() : "";
            set { if (value != "") { ScaleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ScaleMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HueVariationMin")] public string _Surrogate_Attribute_HueVariationMin {
            get => HueVariationMin != null ? ((System.Single)HueVariationMin).ToString() : "";
            set { if (value != "") { HueVariationMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.HueVariationMin")] public string _Surrogate_Element_HueVariationMin {
            get => HueVariationMin != null ? ((System.Single)HueVariationMin).ToString() : "";
            set { if (value != "") { HueVariationMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HueVariationMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HueVariationMax")] public string _Surrogate_Attribute_HueVariationMax {
            get => HueVariationMax != null ? ((System.Single)HueVariationMax).ToString() : "";
            set { if (value != "") { HueVariationMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.HueVariationMax")] public string _Surrogate_Element_HueVariationMax {
            get => HueVariationMax != null ? ((System.Single)HueVariationMax).ToString() : "";
            set { if (value != "") { HueVariationMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HueVariationMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceEnabled")] public string _Surrogate_Attribute_TurbulenceEnabled {
            get => TurbulenceEnabled != null ? ((System.Boolean)TurbulenceEnabled).ToString() : "";
            set { if (value != "") { TurbulenceEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceEnabled")] public string _Surrogate_Element_TurbulenceEnabled {
            get => TurbulenceEnabled != null ? ((System.Boolean)TurbulenceEnabled).ToString() : "";
            set { if (value != "") { TurbulenceEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TurbulenceEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceNoiseStrength")] public string _Surrogate_Attribute_TurbulenceNoiseStrength {
            get => TurbulenceNoiseStrength != null ? ((System.Single)TurbulenceNoiseStrength).ToString() : "";
            set { if (value != "") { TurbulenceNoiseStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceNoiseStrength")] public string _Surrogate_Element_TurbulenceNoiseStrength {
            get => TurbulenceNoiseStrength != null ? ((System.Single)TurbulenceNoiseStrength).ToString() : "";
            set { if (value != "") { TurbulenceNoiseStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceNoiseStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceNoiseScale")] public string _Surrogate_Attribute_TurbulenceNoiseScale {
            get => TurbulenceNoiseScale != null ? ((System.Single)TurbulenceNoiseScale).ToString() : "";
            set { if (value != "") { TurbulenceNoiseScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceNoiseScale")] public string _Surrogate_Element_TurbulenceNoiseScale {
            get => TurbulenceNoiseScale != null ? ((System.Single)TurbulenceNoiseScale).ToString() : "";
            set { if (value != "") { TurbulenceNoiseScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceNoiseScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceNoiseSpeedRandom")] public string _Surrogate_Attribute_TurbulenceNoiseSpeedRandom {
            get => TurbulenceNoiseSpeedRandom != null ? ((System.Single)TurbulenceNoiseSpeedRandom).ToString() : "";
            set { if (value != "") { TurbulenceNoiseSpeedRandom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceNoiseSpeedRandom")] public string _Surrogate_Element_TurbulenceNoiseSpeedRandom {
            get => TurbulenceNoiseSpeedRandom != null ? ((System.Single)TurbulenceNoiseSpeedRandom).ToString() : "";
            set { if (value != "") { TurbulenceNoiseSpeedRandom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceNoiseSpeedRandom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceInfluenceMin")] public string _Surrogate_Attribute_TurbulenceInfluenceMin {
            get => TurbulenceInfluenceMin != null ? ((System.Single)TurbulenceInfluenceMin).ToString() : "";
            set { if (value != "") { TurbulenceInfluenceMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceInfluenceMin")] public string _Surrogate_Element_TurbulenceInfluenceMin {
            get => TurbulenceInfluenceMin != null ? ((System.Single)TurbulenceInfluenceMin).ToString() : "";
            set { if (value != "") { TurbulenceInfluenceMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceInfluenceMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceInfluenceMax")] public string _Surrogate_Attribute_TurbulenceInfluenceMax {
            get => TurbulenceInfluenceMax != null ? ((System.Single)TurbulenceInfluenceMax).ToString() : "";
            set { if (value != "") { TurbulenceInfluenceMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceInfluenceMax")] public string _Surrogate_Element_TurbulenceInfluenceMax {
            get => TurbulenceInfluenceMax != null ? ((System.Single)TurbulenceInfluenceMax).ToString() : "";
            set { if (value != "") { TurbulenceInfluenceMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceInfluenceMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceInitialDisplacementMin")] public string _Surrogate_Attribute_TurbulenceInitialDisplacementMin {
            get => TurbulenceInitialDisplacementMin != null ? ((System.Single)TurbulenceInitialDisplacementMin).ToString() : "";
            set { if (value != "") { TurbulenceInitialDisplacementMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceInitialDisplacementMin")] public string _Surrogate_Element_TurbulenceInitialDisplacementMin {
            get => TurbulenceInitialDisplacementMin != null ? ((System.Single)TurbulenceInitialDisplacementMin).ToString() : "";
            set { if (value != "") { TurbulenceInitialDisplacementMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceInitialDisplacementMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceInitialDisplacementMax")] public string _Surrogate_Attribute_TurbulenceInitialDisplacementMax {
            get => TurbulenceInitialDisplacementMax != null ? ((System.Single)TurbulenceInitialDisplacementMax).ToString() : "";
            set { if (value != "") { TurbulenceInitialDisplacementMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.TurbulenceInitialDisplacementMax")] public string _Surrogate_Element_TurbulenceInitialDisplacementMax {
            get => TurbulenceInitialDisplacementMax != null ? ((System.Single)TurbulenceInitialDisplacementMax).ToString() : "";
            set { if (value != "") { TurbulenceInitialDisplacementMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TurbulenceInitialDisplacementMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimSpeedMin")] public string _Surrogate_Attribute_AnimSpeedMin {
            get => AnimSpeedMin != null ? ((System.Single)AnimSpeedMin).ToString() : "";
            set { if (value != "") { AnimSpeedMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimSpeedMin")] public string _Surrogate_Element_AnimSpeedMin {
            get => AnimSpeedMin != null ? ((System.Single)AnimSpeedMin).ToString() : "";
            set { if (value != "") { AnimSpeedMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimSpeedMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimSpeedMax")] public string _Surrogate_Attribute_AnimSpeedMax {
            get => AnimSpeedMax != null ? ((System.Single)AnimSpeedMax).ToString() : "";
            set { if (value != "") { AnimSpeedMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimSpeedMax")] public string _Surrogate_Element_AnimSpeedMax {
            get => AnimSpeedMax != null ? ((System.Single)AnimSpeedMax).ToString() : "";
            set { if (value != "") { AnimSpeedMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimSpeedMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimOffsetMin")] public string _Surrogate_Attribute_AnimOffsetMin {
            get => AnimOffsetMin != null ? ((System.Single)AnimOffsetMin).ToString() : "";
            set { if (value != "") { AnimOffsetMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimOffsetMin")] public string _Surrogate_Element_AnimOffsetMin {
            get => AnimOffsetMin != null ? ((System.Single)AnimOffsetMin).ToString() : "";
            set { if (value != "") { AnimOffsetMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimOffsetMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimOffsetMax")] public string _Surrogate_Attribute_AnimOffsetMax {
            get => AnimOffsetMax != null ? ((System.Single)AnimOffsetMax).ToString() : "";
            set { if (value != "") { AnimOffsetMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AnimOffsetMax")] public string _Surrogate_Element_AnimOffsetMax {
            get => AnimOffsetMax != null ? ((System.Single)AnimOffsetMax).ToString() : "";
            set { if (value != "") { AnimOffsetMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimOffsetMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubEmitterMode")] public string _Surrogate_Attribute_SubEmitterMode {
            get => SubEmitterMode != null ? ((Godot.ParticleProcessMaterial.SubEmitterModeEnum)SubEmitterMode).ToString() : "";
            set { if (value != "") { SubEmitterMode = System.Enum.Parse<Godot.ParticleProcessMaterial.SubEmitterModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.SubEmitterMode")] public string _Surrogate_Element_SubEmitterMode {
            get => SubEmitterMode != null ? ((Godot.ParticleProcessMaterial.SubEmitterModeEnum)SubEmitterMode).ToString() : "";
            set { if (value != "") { SubEmitterMode = System.Enum.Parse<Godot.ParticleProcessMaterial.SubEmitterModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.ParticleProcessMaterial.SubEmitterModeEnum? SubEmitterMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubEmitterFrequency")] public string _Surrogate_Attribute_SubEmitterFrequency {
            get => SubEmitterFrequency != null ? ((System.Double)SubEmitterFrequency).ToString() : "";
            set { if (value != "") { SubEmitterFrequency = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.SubEmitterFrequency")] public string _Surrogate_Element_SubEmitterFrequency {
            get => SubEmitterFrequency != null ? ((System.Double)SubEmitterFrequency).ToString() : "";
            set { if (value != "") { SubEmitterFrequency = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? SubEmitterFrequency { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubEmitterAmountAtEnd")] public string _Surrogate_Attribute_SubEmitterAmountAtEnd {
            get => SubEmitterAmountAtEnd != null ? ((System.Int32)SubEmitterAmountAtEnd).ToString() : "";
            set { if (value != "") { SubEmitterAmountAtEnd = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.SubEmitterAmountAtEnd")] public string _Surrogate_Element_SubEmitterAmountAtEnd {
            get => SubEmitterAmountAtEnd != null ? ((System.Int32)SubEmitterAmountAtEnd).ToString() : "";
            set { if (value != "") { SubEmitterAmountAtEnd = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SubEmitterAmountAtEnd { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubEmitterAmountAtCollision")] public string _Surrogate_Attribute_SubEmitterAmountAtCollision {
            get => SubEmitterAmountAtCollision != null ? ((System.Int32)SubEmitterAmountAtCollision).ToString() : "";
            set { if (value != "") { SubEmitterAmountAtCollision = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.SubEmitterAmountAtCollision")] public string _Surrogate_Element_SubEmitterAmountAtCollision {
            get => SubEmitterAmountAtCollision != null ? ((System.Int32)SubEmitterAmountAtCollision).ToString() : "";
            set { if (value != "") { SubEmitterAmountAtCollision = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SubEmitterAmountAtCollision { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubEmitterKeepVelocity")] public string _Surrogate_Attribute_SubEmitterKeepVelocity {
            get => SubEmitterKeepVelocity != null ? ((System.Boolean)SubEmitterKeepVelocity).ToString() : "";
            set { if (value != "") { SubEmitterKeepVelocity = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.SubEmitterKeepVelocity")] public string _Surrogate_Element_SubEmitterKeepVelocity {
            get => SubEmitterKeepVelocity != null ? ((System.Boolean)SubEmitterKeepVelocity).ToString() : "";
            set { if (value != "") { SubEmitterKeepVelocity = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SubEmitterKeepVelocity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AttractorInteractionEnabled")] public string _Surrogate_Attribute_AttractorInteractionEnabled {
            get => AttractorInteractionEnabled != null ? ((System.Boolean)AttractorInteractionEnabled).ToString() : "";
            set { if (value != "") { AttractorInteractionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.AttractorInteractionEnabled")] public string _Surrogate_Element_AttractorInteractionEnabled {
            get => AttractorInteractionEnabled != null ? ((System.Boolean)AttractorInteractionEnabled).ToString() : "";
            set { if (value != "") { AttractorInteractionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AttractorInteractionEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionMode")] public string _Surrogate_Attribute_CollisionMode {
            get => CollisionMode != null ? ((Godot.ParticleProcessMaterial.CollisionModeEnum)CollisionMode).ToString() : "";
            set { if (value != "") { CollisionMode = System.Enum.Parse<Godot.ParticleProcessMaterial.CollisionModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.CollisionMode")] public string _Surrogate_Element_CollisionMode {
            get => CollisionMode != null ? ((Godot.ParticleProcessMaterial.CollisionModeEnum)CollisionMode).ToString() : "";
            set { if (value != "") { CollisionMode = System.Enum.Parse<Godot.ParticleProcessMaterial.CollisionModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.ParticleProcessMaterial.CollisionModeEnum? CollisionMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionFriction")] public string _Surrogate_Attribute_CollisionFriction {
            get => CollisionFriction != null ? ((System.Single)CollisionFriction).ToString() : "";
            set { if (value != "") { CollisionFriction = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.CollisionFriction")] public string _Surrogate_Element_CollisionFriction {
            get => CollisionFriction != null ? ((System.Single)CollisionFriction).ToString() : "";
            set { if (value != "") { CollisionFriction = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CollisionFriction { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionBounce")] public string _Surrogate_Attribute_CollisionBounce {
            get => CollisionBounce != null ? ((System.Single)CollisionBounce).ToString() : "";
            set { if (value != "") { CollisionBounce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.CollisionBounce")] public string _Surrogate_Element_CollisionBounce {
            get => CollisionBounce != null ? ((System.Single)CollisionBounce).ToString() : "";
            set { if (value != "") { CollisionBounce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CollisionBounce { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionUseScale")] public string _Surrogate_Attribute_CollisionUseScale {
            get => CollisionUseScale != null ? ((System.Boolean)CollisionUseScale).ToString() : "";
            set { if (value != "") { CollisionUseScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.CollisionUseScale")] public string _Surrogate_Element_CollisionUseScale {
            get => CollisionUseScale != null ? ((System.Boolean)CollisionUseScale).ToString() : "";
            set { if (value != "") { CollisionUseScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? CollisionUseScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RenderPriority")] public string _Surrogate_Attribute_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.RenderPriority")] public string _Surrogate_Element_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? RenderPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionBoxExtents")] public string _Surrogate_EmissionBoxExtents {
            get => EmissionBoxExtents != null ? ((Archwyvern.Nxml.Translators.Vector3)EmissionBoxExtents).ToString() : "";
            set => EmissionBoxExtents = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? EmissionBoxExtents;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionRingAxis")] public string _Surrogate_EmissionRingAxis {
            get => EmissionRingAxis != null ? ((Archwyvern.Nxml.Translators.Vector3)EmissionRingAxis).ToString() : "";
            set => EmissionRingAxis = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? EmissionRingAxis;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Direction")] public string _Surrogate_Direction {
            get => Direction != null ? ((Archwyvern.Nxml.Translators.Vector3)Direction).ToString() : "";
            set => Direction = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Direction;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Gravity")] public string _Surrogate_Gravity {
            get => Gravity != null ? ((Archwyvern.Nxml.Translators.Vector3)Gravity).ToString() : "";
            set => Gravity = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Gravity;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Color")] public string _Surrogate_Color {
            get => Color != null ? ((Archwyvern.Nxml.Translators.Color)Color).ToString() : "";
            set => Color = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Color;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TurbulenceNoiseSpeed")] public string _Surrogate_TurbulenceNoiseSpeed {
            get => TurbulenceNoiseSpeed != null ? ((Archwyvern.Nxml.Translators.Vector3)TurbulenceNoiseSpeed).ToString() : "";
            set => TurbulenceNoiseSpeed = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? TurbulenceNoiseSpeed;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.ParticleProcessMaterial) return alt;
            var obj = (Godot.ParticleProcessMaterial)alt ?? new Godot.ParticleProcessMaterial();

            // Attributes
            if (LifetimeRandomness != null) obj.LifetimeRandomness = (System.Double)LifetimeRandomness;
            if (EmissionShape != null) obj.EmissionShape = (Godot.ParticleProcessMaterial.EmissionShapeEnum)EmissionShape;
            if (EmissionSphereRadius != null) obj.EmissionSphereRadius = (System.Single)EmissionSphereRadius;
            if (EmissionPointCount != null) obj.EmissionPointCount = (System.Int32)EmissionPointCount;
            if (EmissionRingHeight != null) obj.EmissionRingHeight = (System.Single)EmissionRingHeight;
            if (EmissionRingRadius != null) obj.EmissionRingRadius = (System.Single)EmissionRingRadius;
            if (EmissionRingInnerRadius != null) obj.EmissionRingInnerRadius = (System.Single)EmissionRingInnerRadius;
            if (ParticleFlagAlignY != null) obj.ParticleFlagAlignY = (System.Boolean)ParticleFlagAlignY;
            if (ParticleFlagRotateY != null) obj.ParticleFlagRotateY = (System.Boolean)ParticleFlagRotateY;
            if (ParticleFlagDisableZ != null) obj.ParticleFlagDisableZ = (System.Boolean)ParticleFlagDisableZ;
            if (Spread != null) obj.Spread = (System.Single)Spread;
            if (Flatness != null) obj.Flatness = (System.Single)Flatness;
            if (InitialVelocityMin != null) obj.InitialVelocityMin = (System.Single)InitialVelocityMin;
            if (InitialVelocityMax != null) obj.InitialVelocityMax = (System.Single)InitialVelocityMax;
            if (AngularVelocityMin != null) obj.AngularVelocityMin = (System.Single)AngularVelocityMin;
            if (AngularVelocityMax != null) obj.AngularVelocityMax = (System.Single)AngularVelocityMax;
            if (OrbitVelocityMin != null) obj.OrbitVelocityMin = (System.Single)OrbitVelocityMin;
            if (OrbitVelocityMax != null) obj.OrbitVelocityMax = (System.Single)OrbitVelocityMax;
            if (LinearAccelMin != null) obj.LinearAccelMin = (System.Single)LinearAccelMin;
            if (LinearAccelMax != null) obj.LinearAccelMax = (System.Single)LinearAccelMax;
            if (RadialAccelMin != null) obj.RadialAccelMin = (System.Single)RadialAccelMin;
            if (RadialAccelMax != null) obj.RadialAccelMax = (System.Single)RadialAccelMax;
            if (TangentialAccelMin != null) obj.TangentialAccelMin = (System.Single)TangentialAccelMin;
            if (TangentialAccelMax != null) obj.TangentialAccelMax = (System.Single)TangentialAccelMax;
            if (DampingMin != null) obj.DampingMin = (System.Single)DampingMin;
            if (DampingMax != null) obj.DampingMax = (System.Single)DampingMax;
            if (AngleMin != null) obj.AngleMin = (System.Single)AngleMin;
            if (AngleMax != null) obj.AngleMax = (System.Single)AngleMax;
            if (ScaleMin != null) obj.ScaleMin = (System.Single)ScaleMin;
            if (ScaleMax != null) obj.ScaleMax = (System.Single)ScaleMax;
            if (HueVariationMin != null) obj.HueVariationMin = (System.Single)HueVariationMin;
            if (HueVariationMax != null) obj.HueVariationMax = (System.Single)HueVariationMax;
            if (TurbulenceEnabled != null) obj.TurbulenceEnabled = (System.Boolean)TurbulenceEnabled;
            if (TurbulenceNoiseStrength != null) obj.TurbulenceNoiseStrength = (System.Single)TurbulenceNoiseStrength;
            if (TurbulenceNoiseScale != null) obj.TurbulenceNoiseScale = (System.Single)TurbulenceNoiseScale;
            if (TurbulenceNoiseSpeedRandom != null) obj.TurbulenceNoiseSpeedRandom = (System.Single)TurbulenceNoiseSpeedRandom;
            if (TurbulenceInfluenceMin != null) obj.TurbulenceInfluenceMin = (System.Single)TurbulenceInfluenceMin;
            if (TurbulenceInfluenceMax != null) obj.TurbulenceInfluenceMax = (System.Single)TurbulenceInfluenceMax;
            if (TurbulenceInitialDisplacementMin != null) obj.TurbulenceInitialDisplacementMin = (System.Single)TurbulenceInitialDisplacementMin;
            if (TurbulenceInitialDisplacementMax != null) obj.TurbulenceInitialDisplacementMax = (System.Single)TurbulenceInitialDisplacementMax;
            if (AnimSpeedMin != null) obj.AnimSpeedMin = (System.Single)AnimSpeedMin;
            if (AnimSpeedMax != null) obj.AnimSpeedMax = (System.Single)AnimSpeedMax;
            if (AnimOffsetMin != null) obj.AnimOffsetMin = (System.Single)AnimOffsetMin;
            if (AnimOffsetMax != null) obj.AnimOffsetMax = (System.Single)AnimOffsetMax;
            if (SubEmitterMode != null) obj.SubEmitterMode = (Godot.ParticleProcessMaterial.SubEmitterModeEnum)SubEmitterMode;
            if (SubEmitterFrequency != null) obj.SubEmitterFrequency = (System.Double)SubEmitterFrequency;
            if (SubEmitterAmountAtEnd != null) obj.SubEmitterAmountAtEnd = (System.Int32)SubEmitterAmountAtEnd;
            if (SubEmitterAmountAtCollision != null) obj.SubEmitterAmountAtCollision = (System.Int32)SubEmitterAmountAtCollision;
            if (SubEmitterKeepVelocity != null) obj.SubEmitterKeepVelocity = (System.Boolean)SubEmitterKeepVelocity;
            if (AttractorInteractionEnabled != null) obj.AttractorInteractionEnabled = (System.Boolean)AttractorInteractionEnabled;
            if (CollisionMode != null) obj.CollisionMode = (Godot.ParticleProcessMaterial.CollisionModeEnum)CollisionMode;
            if (CollisionFriction != null) obj.CollisionFriction = (System.Single)CollisionFriction;
            if (CollisionBounce != null) obj.CollisionBounce = (System.Single)CollisionBounce;
            if (CollisionUseScale != null) obj.CollisionUseScale = (System.Boolean)CollisionUseScale;
            if (RenderPriority != null) obj.RenderPriority = (System.Int32)RenderPriority;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (EmissionBoxExtents != null) obj.EmissionBoxExtents = (Archwyvern.Nxml.Translators.Vector3)EmissionBoxExtents;
            if (EmissionRingAxis != null) obj.EmissionRingAxis = (Archwyvern.Nxml.Translators.Vector3)EmissionRingAxis;
            if (Direction != null) obj.Direction = (Archwyvern.Nxml.Translators.Vector3)Direction;
            if (Gravity != null) obj.Gravity = (Archwyvern.Nxml.Translators.Vector3)Gravity;
            if (Color != null) obj.Color = (Archwyvern.Nxml.Translators.Color)Color;
            if (TurbulenceNoiseSpeed != null) obj.TurbulenceNoiseSpeed = (Archwyvern.Nxml.Translators.Vector3)TurbulenceNoiseSpeed;
            // Elements
            if (EmissionPointTexture != null) {
                if (((IResourceTag)EmissionPointTexture).ResourcePath != null) {
                    obj.EmissionPointTexture = (Godot.Texture2D)EmissionPointTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)EmissionPointTexture).ResourcePath));
                } else {
                    obj.EmissionPointTexture = (Godot.Texture2D)EmissionPointTexture.Generate();
                }
            }
            if (EmissionNormalTexture != null) {
                if (((IResourceTag)EmissionNormalTexture).ResourcePath != null) {
                    obj.EmissionNormalTexture = (Godot.Texture2D)EmissionNormalTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)EmissionNormalTexture).ResourcePath));
                } else {
                    obj.EmissionNormalTexture = (Godot.Texture2D)EmissionNormalTexture.Generate();
                }
            }
            if (EmissionColorTexture != null) {
                if (((IResourceTag)EmissionColorTexture).ResourcePath != null) {
                    obj.EmissionColorTexture = (Godot.Texture2D)EmissionColorTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)EmissionColorTexture).ResourcePath));
                } else {
                    obj.EmissionColorTexture = (Godot.Texture2D)EmissionColorTexture.Generate();
                }
            }
            if (AngularVelocityCurve != null) {
                if (((IResourceTag)AngularVelocityCurve).ResourcePath != null) {
                    obj.AngularVelocityCurve = (Godot.Texture2D)AngularVelocityCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AngularVelocityCurve).ResourcePath));
                } else {
                    obj.AngularVelocityCurve = (Godot.Texture2D)AngularVelocityCurve.Generate();
                }
            }
            if (OrbitVelocityCurve != null) {
                if (((IResourceTag)OrbitVelocityCurve).ResourcePath != null) {
                    obj.OrbitVelocityCurve = (Godot.Texture2D)OrbitVelocityCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)OrbitVelocityCurve).ResourcePath));
                } else {
                    obj.OrbitVelocityCurve = (Godot.Texture2D)OrbitVelocityCurve.Generate();
                }
            }
            if (LinearAccelCurve != null) {
                if (((IResourceTag)LinearAccelCurve).ResourcePath != null) {
                    obj.LinearAccelCurve = (Godot.Texture2D)LinearAccelCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)LinearAccelCurve).ResourcePath));
                } else {
                    obj.LinearAccelCurve = (Godot.Texture2D)LinearAccelCurve.Generate();
                }
            }
            if (RadialAccelCurve != null) {
                if (((IResourceTag)RadialAccelCurve).ResourcePath != null) {
                    obj.RadialAccelCurve = (Godot.Texture2D)RadialAccelCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)RadialAccelCurve).ResourcePath));
                } else {
                    obj.RadialAccelCurve = (Godot.Texture2D)RadialAccelCurve.Generate();
                }
            }
            if (TangentialAccelCurve != null) {
                if (((IResourceTag)TangentialAccelCurve).ResourcePath != null) {
                    obj.TangentialAccelCurve = (Godot.Texture2D)TangentialAccelCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)TangentialAccelCurve).ResourcePath));
                } else {
                    obj.TangentialAccelCurve = (Godot.Texture2D)TangentialAccelCurve.Generate();
                }
            }
            if (DampingCurve != null) {
                if (((IResourceTag)DampingCurve).ResourcePath != null) {
                    obj.DampingCurve = (Godot.Texture2D)DampingCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)DampingCurve).ResourcePath));
                } else {
                    obj.DampingCurve = (Godot.Texture2D)DampingCurve.Generate();
                }
            }
            if (AngleCurve != null) {
                if (((IResourceTag)AngleCurve).ResourcePath != null) {
                    obj.AngleCurve = (Godot.Texture2D)AngleCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AngleCurve).ResourcePath));
                } else {
                    obj.AngleCurve = (Godot.Texture2D)AngleCurve.Generate();
                }
            }
            if (ScaleCurve != null) {
                if (((IResourceTag)ScaleCurve).ResourcePath != null) {
                    obj.ScaleCurve = (Godot.Texture2D)ScaleCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)ScaleCurve).ResourcePath));
                } else {
                    obj.ScaleCurve = (Godot.Texture2D)ScaleCurve.Generate();
                }
            }
            if (ColorRamp != null) {
                if (((IResourceTag)ColorRamp).ResourcePath != null) {
                    obj.ColorRamp = (Godot.Texture2D)ColorRamp.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)ColorRamp).ResourcePath));
                } else {
                    obj.ColorRamp = (Godot.Texture2D)ColorRamp.Generate();
                }
            }
            if (ColorInitialRamp != null) {
                if (((IResourceTag)ColorInitialRamp).ResourcePath != null) {
                    obj.ColorInitialRamp = (Godot.Texture2D)ColorInitialRamp.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)ColorInitialRamp).ResourcePath));
                } else {
                    obj.ColorInitialRamp = (Godot.Texture2D)ColorInitialRamp.Generate();
                }
            }
            if (HueVariationCurve != null) {
                if (((IResourceTag)HueVariationCurve).ResourcePath != null) {
                    obj.HueVariationCurve = (Godot.Texture2D)HueVariationCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)HueVariationCurve).ResourcePath));
                } else {
                    obj.HueVariationCurve = (Godot.Texture2D)HueVariationCurve.Generate();
                }
            }
            if (TurbulenceInfluenceOverLife != null) {
                if (((IResourceTag)TurbulenceInfluenceOverLife).ResourcePath != null) {
                    obj.TurbulenceInfluenceOverLife = (Godot.Texture2D)TurbulenceInfluenceOverLife.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)TurbulenceInfluenceOverLife).ResourcePath));
                } else {
                    obj.TurbulenceInfluenceOverLife = (Godot.Texture2D)TurbulenceInfluenceOverLife.Generate();
                }
            }
            if (AnimSpeedCurve != null) {
                if (((IResourceTag)AnimSpeedCurve).ResourcePath != null) {
                    obj.AnimSpeedCurve = (Godot.Texture2D)AnimSpeedCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AnimSpeedCurve).ResourcePath));
                } else {
                    obj.AnimSpeedCurve = (Godot.Texture2D)AnimSpeedCurve.Generate();
                }
            }
            if (AnimOffsetCurve != null) {
                if (((IResourceTag)AnimOffsetCurve).ResourcePath != null) {
                    obj.AnimOffsetCurve = (Godot.Texture2D)AnimOffsetCurve.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AnimOffsetCurve).ResourcePath));
                } else {
                    obj.AnimOffsetCurve = (Godot.Texture2D)AnimOffsetCurve.Generate();
                }
            }
            if (NextPass != null) {
                if (((IResourceTag)NextPass).ResourcePath != null) {
                    obj.NextPass = (Godot.Material)NextPass.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)NextPass).ResourcePath));
                } else {
                    obj.NextPass = (Godot.Material)NextPass.Generate();
                }
            }

            return obj;
        }
    }
}
