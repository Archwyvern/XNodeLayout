// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Camera2D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class Camera2DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Camera2D.ElementProperty.Material")] public class Material
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Material => _Surrogate_Element_Material?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.Material")] public Camera2DTag.ElementProperty.Material? _Surrogate_Element_Material;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnchorMode")] public string _Surrogate_Attribute_AnchorMode {
            get => AnchorMode != null ? ((Godot.Camera2D.AnchorModeEnum)AnchorMode).ToString() : "";
            set { if (value != "") { AnchorMode = System.Enum.Parse<Godot.Camera2D.AnchorModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.AnchorMode")] public string _Surrogate_Element_AnchorMode {
            get => AnchorMode != null ? ((Godot.Camera2D.AnchorModeEnum)AnchorMode).ToString() : "";
            set { if (value != "") { AnchorMode = System.Enum.Parse<Godot.Camera2D.AnchorModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Camera2D.AnchorModeEnum? AnchorMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "IgnoreRotation")] public string _Surrogate_Attribute_IgnoreRotation {
            get => IgnoreRotation != null ? ((System.Boolean)IgnoreRotation).ToString() : "";
            set { if (value != "") { IgnoreRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.IgnoreRotation")] public string _Surrogate_Element_IgnoreRotation {
            get => IgnoreRotation != null ? ((System.Boolean)IgnoreRotation).ToString() : "";
            set { if (value != "") { IgnoreRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? IgnoreRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Enabled")] public string _Surrogate_Attribute_Enabled {
            get => Enabled != null ? ((System.Boolean)Enabled).ToString() : "";
            set { if (value != "") { Enabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.Enabled")] public string _Surrogate_Element_Enabled {
            get => Enabled != null ? ((System.Boolean)Enabled).ToString() : "";
            set { if (value != "") { Enabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Enabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessCallback")] public string _Surrogate_Attribute_ProcessCallback {
            get => ProcessCallback != null ? ((Godot.Camera2D.Camera2DProcessCallback)ProcessCallback).ToString() : "";
            set { if (value != "") { ProcessCallback = System.Enum.Parse<Godot.Camera2D.Camera2DProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessCallback")] public string _Surrogate_Element_ProcessCallback {
            get => ProcessCallback != null ? ((Godot.Camera2D.Camera2DProcessCallback)ProcessCallback).ToString() : "";
            set { if (value != "") { ProcessCallback = System.Enum.Parse<Godot.Camera2D.Camera2DProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Camera2D.Camera2DProcessCallback? ProcessCallback { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LimitLeft")] public string _Surrogate_Attribute_LimitLeft {
            get => LimitLeft != null ? ((System.Int32)LimitLeft).ToString() : "";
            set { if (value != "") { LimitLeft = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LimitLeft")] public string _Surrogate_Element_LimitLeft {
            get => LimitLeft != null ? ((System.Int32)LimitLeft).ToString() : "";
            set { if (value != "") { LimitLeft = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LimitLeft { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LimitTop")] public string _Surrogate_Attribute_LimitTop {
            get => LimitTop != null ? ((System.Int32)LimitTop).ToString() : "";
            set { if (value != "") { LimitTop = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LimitTop")] public string _Surrogate_Element_LimitTop {
            get => LimitTop != null ? ((System.Int32)LimitTop).ToString() : "";
            set { if (value != "") { LimitTop = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LimitTop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LimitRight")] public string _Surrogate_Attribute_LimitRight {
            get => LimitRight != null ? ((System.Int32)LimitRight).ToString() : "";
            set { if (value != "") { LimitRight = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LimitRight")] public string _Surrogate_Element_LimitRight {
            get => LimitRight != null ? ((System.Int32)LimitRight).ToString() : "";
            set { if (value != "") { LimitRight = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LimitRight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LimitBottom")] public string _Surrogate_Attribute_LimitBottom {
            get => LimitBottom != null ? ((System.Int32)LimitBottom).ToString() : "";
            set { if (value != "") { LimitBottom = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LimitBottom")] public string _Surrogate_Element_LimitBottom {
            get => LimitBottom != null ? ((System.Int32)LimitBottom).ToString() : "";
            set { if (value != "") { LimitBottom = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LimitBottom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LimitSmoothed")] public string _Surrogate_Attribute_LimitSmoothed {
            get => LimitSmoothed != null ? ((System.Boolean)LimitSmoothed).ToString() : "";
            set { if (value != "") { LimitSmoothed = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LimitSmoothed")] public string _Surrogate_Element_LimitSmoothed {
            get => LimitSmoothed != null ? ((System.Boolean)LimitSmoothed).ToString() : "";
            set { if (value != "") { LimitSmoothed = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LimitSmoothed { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionSmoothingEnabled")] public string _Surrogate_Attribute_PositionSmoothingEnabled {
            get => PositionSmoothingEnabled != null ? ((System.Boolean)PositionSmoothingEnabled).ToString() : "";
            set { if (value != "") { PositionSmoothingEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.PositionSmoothingEnabled")] public string _Surrogate_Element_PositionSmoothingEnabled {
            get => PositionSmoothingEnabled != null ? ((System.Boolean)PositionSmoothingEnabled).ToString() : "";
            set { if (value != "") { PositionSmoothingEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PositionSmoothingEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PositionSmoothingSpeed")] public string _Surrogate_Attribute_PositionSmoothingSpeed {
            get => PositionSmoothingSpeed != null ? ((System.Single)PositionSmoothingSpeed).ToString() : "";
            set { if (value != "") { PositionSmoothingSpeed = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.PositionSmoothingSpeed")] public string _Surrogate_Element_PositionSmoothingSpeed {
            get => PositionSmoothingSpeed != null ? ((System.Single)PositionSmoothingSpeed).ToString() : "";
            set { if (value != "") { PositionSmoothingSpeed = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PositionSmoothingSpeed { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationSmoothingEnabled")] public string _Surrogate_Attribute_RotationSmoothingEnabled {
            get => RotationSmoothingEnabled != null ? ((System.Boolean)RotationSmoothingEnabled).ToString() : "";
            set { if (value != "") { RotationSmoothingEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.RotationSmoothingEnabled")] public string _Surrogate_Element_RotationSmoothingEnabled {
            get => RotationSmoothingEnabled != null ? ((System.Boolean)RotationSmoothingEnabled).ToString() : "";
            set { if (value != "") { RotationSmoothingEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? RotationSmoothingEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationSmoothingSpeed")] public string _Surrogate_Attribute_RotationSmoothingSpeed {
            get => RotationSmoothingSpeed != null ? ((System.Single)RotationSmoothingSpeed).ToString() : "";
            set { if (value != "") { RotationSmoothingSpeed = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.RotationSmoothingSpeed")] public string _Surrogate_Element_RotationSmoothingSpeed {
            get => RotationSmoothingSpeed != null ? ((System.Single)RotationSmoothingSpeed).ToString() : "";
            set { if (value != "") { RotationSmoothingSpeed = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RotationSmoothingSpeed { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragHorizontalEnabled")] public string _Surrogate_Attribute_DragHorizontalEnabled {
            get => DragHorizontalEnabled != null ? ((System.Boolean)DragHorizontalEnabled).ToString() : "";
            set { if (value != "") { DragHorizontalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragHorizontalEnabled")] public string _Surrogate_Element_DragHorizontalEnabled {
            get => DragHorizontalEnabled != null ? ((System.Boolean)DragHorizontalEnabled).ToString() : "";
            set { if (value != "") { DragHorizontalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DragHorizontalEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragVerticalEnabled")] public string _Surrogate_Attribute_DragVerticalEnabled {
            get => DragVerticalEnabled != null ? ((System.Boolean)DragVerticalEnabled).ToString() : "";
            set { if (value != "") { DragVerticalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragVerticalEnabled")] public string _Surrogate_Element_DragVerticalEnabled {
            get => DragVerticalEnabled != null ? ((System.Boolean)DragVerticalEnabled).ToString() : "";
            set { if (value != "") { DragVerticalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DragVerticalEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragHorizontalOffset")] public string _Surrogate_Attribute_DragHorizontalOffset {
            get => DragHorizontalOffset != null ? ((System.Single)DragHorizontalOffset).ToString() : "";
            set { if (value != "") { DragHorizontalOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragHorizontalOffset")] public string _Surrogate_Element_DragHorizontalOffset {
            get => DragHorizontalOffset != null ? ((System.Single)DragHorizontalOffset).ToString() : "";
            set { if (value != "") { DragHorizontalOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragHorizontalOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragVerticalOffset")] public string _Surrogate_Attribute_DragVerticalOffset {
            get => DragVerticalOffset != null ? ((System.Single)DragVerticalOffset).ToString() : "";
            set { if (value != "") { DragVerticalOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragVerticalOffset")] public string _Surrogate_Element_DragVerticalOffset {
            get => DragVerticalOffset != null ? ((System.Single)DragVerticalOffset).ToString() : "";
            set { if (value != "") { DragVerticalOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragVerticalOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragLeftMargin")] public string _Surrogate_Attribute_DragLeftMargin {
            get => DragLeftMargin != null ? ((System.Single)DragLeftMargin).ToString() : "";
            set { if (value != "") { DragLeftMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragLeftMargin")] public string _Surrogate_Element_DragLeftMargin {
            get => DragLeftMargin != null ? ((System.Single)DragLeftMargin).ToString() : "";
            set { if (value != "") { DragLeftMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragLeftMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragTopMargin")] public string _Surrogate_Attribute_DragTopMargin {
            get => DragTopMargin != null ? ((System.Single)DragTopMargin).ToString() : "";
            set { if (value != "") { DragTopMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragTopMargin")] public string _Surrogate_Element_DragTopMargin {
            get => DragTopMargin != null ? ((System.Single)DragTopMargin).ToString() : "";
            set { if (value != "") { DragTopMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragTopMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragRightMargin")] public string _Surrogate_Attribute_DragRightMargin {
            get => DragRightMargin != null ? ((System.Single)DragRightMargin).ToString() : "";
            set { if (value != "") { DragRightMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragRightMargin")] public string _Surrogate_Element_DragRightMargin {
            get => DragRightMargin != null ? ((System.Single)DragRightMargin).ToString() : "";
            set { if (value != "") { DragRightMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragRightMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DragBottomMargin")] public string _Surrogate_Attribute_DragBottomMargin {
            get => DragBottomMargin != null ? ((System.Single)DragBottomMargin).ToString() : "";
            set { if (value != "") { DragBottomMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.DragBottomMargin")] public string _Surrogate_Element_DragBottomMargin {
            get => DragBottomMargin != null ? ((System.Single)DragBottomMargin).ToString() : "";
            set { if (value != "") { DragBottomMargin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DragBottomMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDrawScreen")] public string _Surrogate_Attribute_EditorDrawScreen {
            get => EditorDrawScreen != null ? ((System.Boolean)EditorDrawScreen).ToString() : "";
            set { if (value != "") { EditorDrawScreen = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.EditorDrawScreen")] public string _Surrogate_Element_EditorDrawScreen {
            get => EditorDrawScreen != null ? ((System.Boolean)EditorDrawScreen).ToString() : "";
            set { if (value != "") { EditorDrawScreen = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EditorDrawScreen { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDrawLimits")] public string _Surrogate_Attribute_EditorDrawLimits {
            get => EditorDrawLimits != null ? ((System.Boolean)EditorDrawLimits).ToString() : "";
            set { if (value != "") { EditorDrawLimits = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.EditorDrawLimits")] public string _Surrogate_Element_EditorDrawLimits {
            get => EditorDrawLimits != null ? ((System.Boolean)EditorDrawLimits).ToString() : "";
            set { if (value != "") { EditorDrawLimits = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EditorDrawLimits { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDrawDragMargin")] public string _Surrogate_Attribute_EditorDrawDragMargin {
            get => EditorDrawDragMargin != null ? ((System.Boolean)EditorDrawDragMargin).ToString() : "";
            set { if (value != "") { EditorDrawDragMargin = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.EditorDrawDragMargin")] public string _Surrogate_Element_EditorDrawDragMargin {
            get => EditorDrawDragMargin != null ? ((System.Boolean)EditorDrawDragMargin).ToString() : "";
            set { if (value != "") { EditorDrawDragMargin = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EditorDrawDragMargin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Attribute_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.Rotation")] public string _Surrogate_Element_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Rotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_Attribute_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.RotationDegrees")] public string _Surrogate_Element_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Skew")] public string _Surrogate_Attribute_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.Skew")] public string _Surrogate_Element_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Skew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_Attribute_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.GlobalRotation")] public string _Surrogate_Element_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_Attribute_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.GlobalRotationDegrees")] public string _Surrogate_Element_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalSkew")] public string _Surrogate_Attribute_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.GlobalSkew")] public string _Surrogate_Element_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalSkew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShowBehindParent")] public string _Surrogate_Attribute_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ShowBehindParent")] public string _Surrogate_Element_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShowBehindParent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipChildren")] public string _Surrogate_Attribute_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ClipChildren")] public string _Surrogate_Element_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.ClipChildrenMode? ClipChildren { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightMask")] public string _Surrogate_Attribute_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.LightMask")] public string _Surrogate_Element_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LightMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityLayer")] public string _Surrogate_Attribute_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.VisibilityLayer")] public string _Surrogate_Element_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? VisibilityLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZIndex")] public string _Surrogate_Attribute_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ZIndex")] public string _Surrogate_Element_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ZIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZAsRelative")] public string _Surrogate_Attribute_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ZAsRelative")] public string _Surrogate_Element_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ZAsRelative { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "YSortEnabled")] public string _Surrogate_Attribute_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.YSortEnabled")] public string _Surrogate_Element_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? YSortEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureRepeat")] public string _Surrogate_Attribute_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.TextureRepeat")] public string _Surrogate_Element_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureRepeatEnum? TextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseParentMaterial")] public string _Surrogate_Attribute_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.UseParentMaterial")] public string _Surrogate_Element_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseParentMaterial { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera2D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Offset")] public string _Surrogate_Offset {
            get => Offset != null ? ((Archwyvern.Nxml.Translators.Vector2)Offset).ToString() : "";
            set => Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Offset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Zoom")] public string _Surrogate_Zoom {
            get => Zoom != null ? ((Archwyvern.Nxml.Translators.Vector2)Zoom).ToString() : "";
            set => Zoom = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Zoom;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector2)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector2)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalScale")] public string _Surrogate_GlobalScale {
            get => GlobalScale != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalScale).ToString() : "";
            set => GlobalScale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalScale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Modulate")] public string _Surrogate_Modulate {
            get => Modulate != null ? ((Archwyvern.Nxml.Translators.Color)Modulate).ToString() : "";
            set => Modulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Modulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SelfModulate")] public string _Surrogate_SelfModulate {
            get => SelfModulate != null ? ((Archwyvern.Nxml.Translators.Color)SelfModulate).ToString() : "";
            set => SelfModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SelfModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Camera2D) return alt;
            var obj = (Godot.Camera2D)alt ?? new Godot.Camera2D();

            // Attributes
            if (AnchorMode != null) obj.AnchorMode = (Godot.Camera2D.AnchorModeEnum)AnchorMode;
            if (IgnoreRotation != null) obj.IgnoreRotation = (System.Boolean)IgnoreRotation;
            if (Enabled != null) obj.Enabled = (System.Boolean)Enabled;
            if (ProcessCallback != null) obj.ProcessCallback = (Godot.Camera2D.Camera2DProcessCallback)ProcessCallback;
            if (LimitLeft != null) obj.LimitLeft = (System.Int32)LimitLeft;
            if (LimitTop != null) obj.LimitTop = (System.Int32)LimitTop;
            if (LimitRight != null) obj.LimitRight = (System.Int32)LimitRight;
            if (LimitBottom != null) obj.LimitBottom = (System.Int32)LimitBottom;
            if (LimitSmoothed != null) obj.LimitSmoothed = (System.Boolean)LimitSmoothed;
            if (PositionSmoothingEnabled != null) obj.PositionSmoothingEnabled = (System.Boolean)PositionSmoothingEnabled;
            if (PositionSmoothingSpeed != null) obj.PositionSmoothingSpeed = (System.Single)PositionSmoothingSpeed;
            if (RotationSmoothingEnabled != null) obj.RotationSmoothingEnabled = (System.Boolean)RotationSmoothingEnabled;
            if (RotationSmoothingSpeed != null) obj.RotationSmoothingSpeed = (System.Single)RotationSmoothingSpeed;
            if (DragHorizontalEnabled != null) obj.DragHorizontalEnabled = (System.Boolean)DragHorizontalEnabled;
            if (DragVerticalEnabled != null) obj.DragVerticalEnabled = (System.Boolean)DragVerticalEnabled;
            if (DragHorizontalOffset != null) obj.DragHorizontalOffset = (System.Single)DragHorizontalOffset;
            if (DragVerticalOffset != null) obj.DragVerticalOffset = (System.Single)DragVerticalOffset;
            if (DragLeftMargin != null) obj.DragLeftMargin = (System.Single)DragLeftMargin;
            if (DragTopMargin != null) obj.DragTopMargin = (System.Single)DragTopMargin;
            if (DragRightMargin != null) obj.DragRightMargin = (System.Single)DragRightMargin;
            if (DragBottomMargin != null) obj.DragBottomMargin = (System.Single)DragBottomMargin;
            if (EditorDrawScreen != null) obj.EditorDrawScreen = (System.Boolean)EditorDrawScreen;
            if (EditorDrawLimits != null) obj.EditorDrawLimits = (System.Boolean)EditorDrawLimits;
            if (EditorDrawDragMargin != null) obj.EditorDrawDragMargin = (System.Boolean)EditorDrawDragMargin;
            if (Rotation != null) obj.Rotation = (System.Single)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (System.Single)RotationDegrees;
            if (Skew != null) obj.Skew = (System.Single)Skew;
            if (GlobalRotation != null) obj.GlobalRotation = (System.Single)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (System.Single)GlobalRotationDegrees;
            if (GlobalSkew != null) obj.GlobalSkew = (System.Single)GlobalSkew;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (ShowBehindParent != null) obj.ShowBehindParent = (System.Boolean)ShowBehindParent;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (ClipChildren != null) obj.ClipChildren = (Godot.CanvasItem.ClipChildrenMode)ClipChildren;
            if (LightMask != null) obj.LightMask = (System.Int32)LightMask;
            if (VisibilityLayer != null) obj.VisibilityLayer = (System.UInt32)VisibilityLayer;
            if (ZIndex != null) obj.ZIndex = (System.Int32)ZIndex;
            if (ZAsRelative != null) obj.ZAsRelative = (System.Boolean)ZAsRelative;
            if (YSortEnabled != null) obj.YSortEnabled = (System.Boolean)YSortEnabled;
            if (TextureFilter != null) obj.TextureFilter = (Godot.CanvasItem.TextureFilterEnum)TextureFilter;
            if (TextureRepeat != null) obj.TextureRepeat = (Godot.CanvasItem.TextureRepeatEnum)TextureRepeat;
            if (UseParentMaterial != null) obj.UseParentMaterial = (System.Boolean)UseParentMaterial;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Offset != null) obj.Offset = (Archwyvern.Nxml.Translators.Vector2)Offset;
            if (Zoom != null) obj.Zoom = (Archwyvern.Nxml.Translators.Vector2)Zoom;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector2)Position;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector2)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector2)GlobalPosition;
            if (GlobalScale != null) obj.GlobalScale = (Archwyvern.Nxml.Translators.Vector2)GlobalScale;
            if (Modulate != null) obj.Modulate = (Archwyvern.Nxml.Translators.Color)Modulate;
            if (SelfModulate != null) obj.SelfModulate = (Archwyvern.Nxml.Translators.Color)SelfModulate;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Material != null) {
                if (((IResourceTag)Material).ResourcePath != null) {
                    obj.Material = (Godot.Material)Material.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)Material).ResourcePath));
                } else {
                    obj.Material = (Godot.Material)Material.Generate();
                }
            }

            return obj;
        }
    }
}
