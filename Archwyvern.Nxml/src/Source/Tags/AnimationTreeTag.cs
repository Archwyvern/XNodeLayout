// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationTree", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationTreeTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "AnimationTree.ElementProperty.TreeRoot")] public class TreeRoot
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNode", Type = typeof(AnimationNodeTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeAdd2", Type = typeof(AnimationNodeAdd2Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeAdd3", Type = typeof(AnimationNodeAdd3Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeAnimation", Type = typeof(AnimationNodeAnimationTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlend2", Type = typeof(AnimationNodeBlend2Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlend3", Type = typeof(AnimationNodeBlend3Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D", Type = typeof(AnimationNodeBlendSpace1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace2D", Type = typeof(AnimationNodeBlendSpace2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendTree", Type = typeof(AnimationNodeBlendTreeTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot", Type = typeof(AnimationNodeOneShotTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOutput", Type = typeof(AnimationNodeOutputTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine", Type = typeof(AnimationNodeStateMachineTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeSub2", Type = typeof(AnimationNodeSub2Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeSync", Type = typeof(AnimationNodeSyncTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTimeScale", Type = typeof(AnimationNodeTimeScaleTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTimeSeek", Type = typeof(AnimationNodeTimeSeekTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition", Type = typeof(AnimationNodeTransitionTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AnimationRootNode", Type = typeof(AnimationRootNodeTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? TreeRoot => _Surrogate_Element_TreeRoot?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.TreeRoot")] public AnimationTreeTag.ElementProperty.TreeRoot? _Surrogate_Element_TreeRoot;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Active")] public string _Surrogate_Attribute_Active {
            get => Active != null ? ((System.Boolean)Active).ToString() : "";
            set { if (value != "") { Active = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.Active")] public string _Surrogate_Element_Active {
            get => Active != null ? ((System.Boolean)Active).ToString() : "";
            set { if (value != "") { Active = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Active { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessCallback")] public string _Surrogate_Attribute_ProcessCallback {
            get => ProcessCallback != null ? ((Godot.AnimationTree.AnimationProcessCallback)ProcessCallback).ToString() : "";
            set { if (value != "") { ProcessCallback = System.Enum.Parse<Godot.AnimationTree.AnimationProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessCallback")] public string _Surrogate_Element_ProcessCallback {
            get => ProcessCallback != null ? ((Godot.AnimationTree.AnimationProcessCallback)ProcessCallback).ToString() : "";
            set { if (value != "") { ProcessCallback = System.Enum.Parse<Godot.AnimationTree.AnimationProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationTree.AnimationProcessCallback? ProcessCallback { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AudioMaxPolyphony")] public string _Surrogate_Attribute_AudioMaxPolyphony {
            get => AudioMaxPolyphony != null ? ((System.Int32)AudioMaxPolyphony).ToString() : "";
            set { if (value != "") { AudioMaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.AudioMaxPolyphony")] public string _Surrogate_Element_AudioMaxPolyphony {
            get => AudioMaxPolyphony != null ? ((System.Int32)AudioMaxPolyphony).ToString() : "";
            set { if (value != "") { AudioMaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? AudioMaxPolyphony { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationTree.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationTree) return alt;
            var obj = (Godot.AnimationTree)alt ?? new Godot.AnimationTree();

            // Attributes
            if (Active != null) obj.Active = (System.Boolean)Active;
            if (ProcessCallback != null) obj.ProcessCallback = (Godot.AnimationTree.AnimationProcessCallback)ProcessCallback;
            if (AudioMaxPolyphony != null) obj.AudioMaxPolyphony = (System.Int32)AudioMaxPolyphony;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (TreeRoot != null) {
                if (((IResourceTag)TreeRoot).ResourcePath != null) {
                    obj.TreeRoot = (Godot.AnimationNode)TreeRoot.Generate(Godot.GD.Load<Godot.AnimationNode>(((IResourceTag)TreeRoot).ResourcePath));
                } else {
                    obj.TreeRoot = (Godot.AnimationNode)TreeRoot.Generate();
                }
            }

            return obj;
        }
    }
}
