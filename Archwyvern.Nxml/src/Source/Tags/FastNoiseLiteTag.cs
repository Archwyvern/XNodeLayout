// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "FastNoiseLite", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class FastNoiseLiteTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "NoiseType")] public string _Surrogate_Attribute_NoiseType {
            get => NoiseType != null ? ((Godot.FastNoiseLite.NoiseTypeEnum)NoiseType).ToString() : "";
            set { if (value != "") { NoiseType = System.Enum.Parse<Godot.FastNoiseLite.NoiseTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.NoiseType")] public string _Surrogate_Element_NoiseType {
            get => NoiseType != null ? ((Godot.FastNoiseLite.NoiseTypeEnum)NoiseType).ToString() : "";
            set { if (value != "") { NoiseType = System.Enum.Parse<Godot.FastNoiseLite.NoiseTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.NoiseTypeEnum? NoiseType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Seed")] public string _Surrogate_Attribute_Seed {
            get => Seed != null ? ((System.Int32)Seed).ToString() : "";
            set { if (value != "") { Seed = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.Seed")] public string _Surrogate_Element_Seed {
            get => Seed != null ? ((System.Int32)Seed).ToString() : "";
            set { if (value != "") { Seed = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? Seed { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Frequency")] public string _Surrogate_Attribute_Frequency {
            get => Frequency != null ? ((System.Single)Frequency).ToString() : "";
            set { if (value != "") { Frequency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.Frequency")] public string _Surrogate_Element_Frequency {
            get => Frequency != null ? ((System.Single)Frequency).ToString() : "";
            set { if (value != "") { Frequency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Frequency { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalType")] public string _Surrogate_Attribute_FractalType {
            get => FractalType != null ? ((Godot.FastNoiseLite.FractalTypeEnum)FractalType).ToString() : "";
            set { if (value != "") { FractalType = System.Enum.Parse<Godot.FastNoiseLite.FractalTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalType")] public string _Surrogate_Element_FractalType {
            get => FractalType != null ? ((Godot.FastNoiseLite.FractalTypeEnum)FractalType).ToString() : "";
            set { if (value != "") { FractalType = System.Enum.Parse<Godot.FastNoiseLite.FractalTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.FractalTypeEnum? FractalType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalOctaves")] public string _Surrogate_Attribute_FractalOctaves {
            get => FractalOctaves != null ? ((System.Int32)FractalOctaves).ToString() : "";
            set { if (value != "") { FractalOctaves = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalOctaves")] public string _Surrogate_Element_FractalOctaves {
            get => FractalOctaves != null ? ((System.Int32)FractalOctaves).ToString() : "";
            set { if (value != "") { FractalOctaves = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FractalOctaves { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalLacunarity")] public string _Surrogate_Attribute_FractalLacunarity {
            get => FractalLacunarity != null ? ((System.Single)FractalLacunarity).ToString() : "";
            set { if (value != "") { FractalLacunarity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalLacunarity")] public string _Surrogate_Element_FractalLacunarity {
            get => FractalLacunarity != null ? ((System.Single)FractalLacunarity).ToString() : "";
            set { if (value != "") { FractalLacunarity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FractalLacunarity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalGain")] public string _Surrogate_Attribute_FractalGain {
            get => FractalGain != null ? ((System.Single)FractalGain).ToString() : "";
            set { if (value != "") { FractalGain = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalGain")] public string _Surrogate_Element_FractalGain {
            get => FractalGain != null ? ((System.Single)FractalGain).ToString() : "";
            set { if (value != "") { FractalGain = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FractalGain { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalWeightedStrength")] public string _Surrogate_Attribute_FractalWeightedStrength {
            get => FractalWeightedStrength != null ? ((System.Single)FractalWeightedStrength).ToString() : "";
            set { if (value != "") { FractalWeightedStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalWeightedStrength")] public string _Surrogate_Element_FractalWeightedStrength {
            get => FractalWeightedStrength != null ? ((System.Single)FractalWeightedStrength).ToString() : "";
            set { if (value != "") { FractalWeightedStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FractalWeightedStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractalPingPongStrength")] public string _Surrogate_Attribute_FractalPingPongStrength {
            get => FractalPingPongStrength != null ? ((System.Single)FractalPingPongStrength).ToString() : "";
            set { if (value != "") { FractalPingPongStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.FractalPingPongStrength")] public string _Surrogate_Element_FractalPingPongStrength {
            get => FractalPingPongStrength != null ? ((System.Single)FractalPingPongStrength).ToString() : "";
            set { if (value != "") { FractalPingPongStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FractalPingPongStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CellularDistanceFunction")] public string _Surrogate_Attribute_CellularDistanceFunction {
            get => CellularDistanceFunction != null ? ((Godot.FastNoiseLite.CellularDistanceFunctionEnum)CellularDistanceFunction).ToString() : "";
            set { if (value != "") { CellularDistanceFunction = System.Enum.Parse<Godot.FastNoiseLite.CellularDistanceFunctionEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.CellularDistanceFunction")] public string _Surrogate_Element_CellularDistanceFunction {
            get => CellularDistanceFunction != null ? ((Godot.FastNoiseLite.CellularDistanceFunctionEnum)CellularDistanceFunction).ToString() : "";
            set { if (value != "") { CellularDistanceFunction = System.Enum.Parse<Godot.FastNoiseLite.CellularDistanceFunctionEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.CellularDistanceFunctionEnum? CellularDistanceFunction { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CellularJitter")] public string _Surrogate_Attribute_CellularJitter {
            get => CellularJitter != null ? ((System.Single)CellularJitter).ToString() : "";
            set { if (value != "") { CellularJitter = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.CellularJitter")] public string _Surrogate_Element_CellularJitter {
            get => CellularJitter != null ? ((System.Single)CellularJitter).ToString() : "";
            set { if (value != "") { CellularJitter = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CellularJitter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CellularReturnType")] public string _Surrogate_Attribute_CellularReturnType {
            get => CellularReturnType != null ? ((Godot.FastNoiseLite.CellularReturnTypeEnum)CellularReturnType).ToString() : "";
            set { if (value != "") { CellularReturnType = System.Enum.Parse<Godot.FastNoiseLite.CellularReturnTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.CellularReturnType")] public string _Surrogate_Element_CellularReturnType {
            get => CellularReturnType != null ? ((Godot.FastNoiseLite.CellularReturnTypeEnum)CellularReturnType).ToString() : "";
            set { if (value != "") { CellularReturnType = System.Enum.Parse<Godot.FastNoiseLite.CellularReturnTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.CellularReturnTypeEnum? CellularReturnType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpEnabled")] public string _Surrogate_Attribute_DomainWarpEnabled {
            get => DomainWarpEnabled != null ? ((System.Boolean)DomainWarpEnabled).ToString() : "";
            set { if (value != "") { DomainWarpEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpEnabled")] public string _Surrogate_Element_DomainWarpEnabled {
            get => DomainWarpEnabled != null ? ((System.Boolean)DomainWarpEnabled).ToString() : "";
            set { if (value != "") { DomainWarpEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DomainWarpEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpType")] public string _Surrogate_Attribute_DomainWarpType {
            get => DomainWarpType != null ? ((Godot.FastNoiseLite.DomainWarpTypeEnum)DomainWarpType).ToString() : "";
            set { if (value != "") { DomainWarpType = System.Enum.Parse<Godot.FastNoiseLite.DomainWarpTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpType")] public string _Surrogate_Element_DomainWarpType {
            get => DomainWarpType != null ? ((Godot.FastNoiseLite.DomainWarpTypeEnum)DomainWarpType).ToString() : "";
            set { if (value != "") { DomainWarpType = System.Enum.Parse<Godot.FastNoiseLite.DomainWarpTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.DomainWarpTypeEnum? DomainWarpType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpAmplitude")] public string _Surrogate_Attribute_DomainWarpAmplitude {
            get => DomainWarpAmplitude != null ? ((System.Single)DomainWarpAmplitude).ToString() : "";
            set { if (value != "") { DomainWarpAmplitude = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpAmplitude")] public string _Surrogate_Element_DomainWarpAmplitude {
            get => DomainWarpAmplitude != null ? ((System.Single)DomainWarpAmplitude).ToString() : "";
            set { if (value != "") { DomainWarpAmplitude = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DomainWarpAmplitude { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpFrequency")] public string _Surrogate_Attribute_DomainWarpFrequency {
            get => DomainWarpFrequency != null ? ((System.Single)DomainWarpFrequency).ToString() : "";
            set { if (value != "") { DomainWarpFrequency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpFrequency")] public string _Surrogate_Element_DomainWarpFrequency {
            get => DomainWarpFrequency != null ? ((System.Single)DomainWarpFrequency).ToString() : "";
            set { if (value != "") { DomainWarpFrequency = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DomainWarpFrequency { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpFractalType")] public string _Surrogate_Attribute_DomainWarpFractalType {
            get => DomainWarpFractalType != null ? ((Godot.FastNoiseLite.DomainWarpFractalTypeEnum)DomainWarpFractalType).ToString() : "";
            set { if (value != "") { DomainWarpFractalType = System.Enum.Parse<Godot.FastNoiseLite.DomainWarpFractalTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpFractalType")] public string _Surrogate_Element_DomainWarpFractalType {
            get => DomainWarpFractalType != null ? ((Godot.FastNoiseLite.DomainWarpFractalTypeEnum)DomainWarpFractalType).ToString() : "";
            set { if (value != "") { DomainWarpFractalType = System.Enum.Parse<Godot.FastNoiseLite.DomainWarpFractalTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.FastNoiseLite.DomainWarpFractalTypeEnum? DomainWarpFractalType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpFractalOctaves")] public string _Surrogate_Attribute_DomainWarpFractalOctaves {
            get => DomainWarpFractalOctaves != null ? ((System.Int32)DomainWarpFractalOctaves).ToString() : "";
            set { if (value != "") { DomainWarpFractalOctaves = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpFractalOctaves")] public string _Surrogate_Element_DomainWarpFractalOctaves {
            get => DomainWarpFractalOctaves != null ? ((System.Int32)DomainWarpFractalOctaves).ToString() : "";
            set { if (value != "") { DomainWarpFractalOctaves = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? DomainWarpFractalOctaves { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpFractalLacunarity")] public string _Surrogate_Attribute_DomainWarpFractalLacunarity {
            get => DomainWarpFractalLacunarity != null ? ((System.Single)DomainWarpFractalLacunarity).ToString() : "";
            set { if (value != "") { DomainWarpFractalLacunarity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpFractalLacunarity")] public string _Surrogate_Element_DomainWarpFractalLacunarity {
            get => DomainWarpFractalLacunarity != null ? ((System.Single)DomainWarpFractalLacunarity).ToString() : "";
            set { if (value != "") { DomainWarpFractalLacunarity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DomainWarpFractalLacunarity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DomainWarpFractalGain")] public string _Surrogate_Attribute_DomainWarpFractalGain {
            get => DomainWarpFractalGain != null ? ((System.Single)DomainWarpFractalGain).ToString() : "";
            set { if (value != "") { DomainWarpFractalGain = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.DomainWarpFractalGain")] public string _Surrogate_Element_DomainWarpFractalGain {
            get => DomainWarpFractalGain != null ? ((System.Single)DomainWarpFractalGain).ToString() : "";
            set { if (value != "") { DomainWarpFractalGain = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DomainWarpFractalGain { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FastNoiseLite.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Offset")] public string _Surrogate_Offset {
            get => Offset != null ? ((Archwyvern.Nxml.Translators.Vector3)Offset).ToString() : "";
            set => Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Offset;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.FastNoiseLite) return alt;
            var obj = (Godot.FastNoiseLite)alt ?? new Godot.FastNoiseLite();

            // Attributes
            if (NoiseType != null) obj.NoiseType = (Godot.FastNoiseLite.NoiseTypeEnum)NoiseType;
            if (Seed != null) obj.Seed = (System.Int32)Seed;
            if (Frequency != null) obj.Frequency = (System.Single)Frequency;
            if (FractalType != null) obj.FractalType = (Godot.FastNoiseLite.FractalTypeEnum)FractalType;
            if (FractalOctaves != null) obj.FractalOctaves = (System.Int32)FractalOctaves;
            if (FractalLacunarity != null) obj.FractalLacunarity = (System.Single)FractalLacunarity;
            if (FractalGain != null) obj.FractalGain = (System.Single)FractalGain;
            if (FractalWeightedStrength != null) obj.FractalWeightedStrength = (System.Single)FractalWeightedStrength;
            if (FractalPingPongStrength != null) obj.FractalPingPongStrength = (System.Single)FractalPingPongStrength;
            if (CellularDistanceFunction != null) obj.CellularDistanceFunction = (Godot.FastNoiseLite.CellularDistanceFunctionEnum)CellularDistanceFunction;
            if (CellularJitter != null) obj.CellularJitter = (System.Single)CellularJitter;
            if (CellularReturnType != null) obj.CellularReturnType = (Godot.FastNoiseLite.CellularReturnTypeEnum)CellularReturnType;
            if (DomainWarpEnabled != null) obj.DomainWarpEnabled = (System.Boolean)DomainWarpEnabled;
            if (DomainWarpType != null) obj.DomainWarpType = (Godot.FastNoiseLite.DomainWarpTypeEnum)DomainWarpType;
            if (DomainWarpAmplitude != null) obj.DomainWarpAmplitude = (System.Single)DomainWarpAmplitude;
            if (DomainWarpFrequency != null) obj.DomainWarpFrequency = (System.Single)DomainWarpFrequency;
            if (DomainWarpFractalType != null) obj.DomainWarpFractalType = (Godot.FastNoiseLite.DomainWarpFractalTypeEnum)DomainWarpFractalType;
            if (DomainWarpFractalOctaves != null) obj.DomainWarpFractalOctaves = (System.Int32)DomainWarpFractalOctaves;
            if (DomainWarpFractalLacunarity != null) obj.DomainWarpFractalLacunarity = (System.Single)DomainWarpFractalLacunarity;
            if (DomainWarpFractalGain != null) obj.DomainWarpFractalGain = (System.Single)DomainWarpFractalGain;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (Offset != null) obj.Offset = (Archwyvern.Nxml.Translators.Vector3)Offset;
            // Elements

            return obj;
        }
    }
}
