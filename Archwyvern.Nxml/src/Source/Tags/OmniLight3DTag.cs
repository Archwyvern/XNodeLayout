// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "OmniLight3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class OmniLight3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "OmniLight3D.ElementProperty.LightProjector")] public class LightProjector
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? LightProjector => _Surrogate_Element_LightProjector?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightProjector")] public OmniLight3DTag.ElementProperty.LightProjector? _Surrogate_Element_LightProjector;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OmniRange")] public string _Surrogate_Attribute_OmniRange {
            get => OmniRange != null ? ((System.Single)OmniRange).ToString() : "";
            set { if (value != "") { OmniRange = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.OmniRange")] public string _Surrogate_Element_OmniRange {
            get => OmniRange != null ? ((System.Single)OmniRange).ToString() : "";
            set { if (value != "") { OmniRange = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OmniRange { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OmniAttenuation")] public string _Surrogate_Attribute_OmniAttenuation {
            get => OmniAttenuation != null ? ((System.Single)OmniAttenuation).ToString() : "";
            set { if (value != "") { OmniAttenuation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.OmniAttenuation")] public string _Surrogate_Element_OmniAttenuation {
            get => OmniAttenuation != null ? ((System.Single)OmniAttenuation).ToString() : "";
            set { if (value != "") { OmniAttenuation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OmniAttenuation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OmniShadowMode")] public string _Surrogate_Attribute_OmniShadowMode {
            get => OmniShadowMode != null ? ((Godot.OmniLight3D.ShadowMode)OmniShadowMode).ToString() : "";
            set { if (value != "") { OmniShadowMode = System.Enum.Parse<Godot.OmniLight3D.ShadowMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.OmniShadowMode")] public string _Surrogate_Element_OmniShadowMode {
            get => OmniShadowMode != null ? ((Godot.OmniLight3D.ShadowMode)OmniShadowMode).ToString() : "";
            set { if (value != "") { OmniShadowMode = System.Enum.Parse<Godot.OmniLight3D.ShadowMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.OmniLight3D.ShadowMode? OmniShadowMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightIntensityLumens")] public string _Surrogate_Attribute_LightIntensityLumens {
            get => LightIntensityLumens != null ? ((System.Single)LightIntensityLumens).ToString() : "";
            set { if (value != "") { LightIntensityLumens = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightIntensityLumens")] public string _Surrogate_Element_LightIntensityLumens {
            get => LightIntensityLumens != null ? ((System.Single)LightIntensityLumens).ToString() : "";
            set { if (value != "") { LightIntensityLumens = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightIntensityLumens { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightIntensityLux")] public string _Surrogate_Attribute_LightIntensityLux {
            get => LightIntensityLux != null ? ((System.Single)LightIntensityLux).ToString() : "";
            set { if (value != "") { LightIntensityLux = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightIntensityLux")] public string _Surrogate_Element_LightIntensityLux {
            get => LightIntensityLux != null ? ((System.Single)LightIntensityLux).ToString() : "";
            set { if (value != "") { LightIntensityLux = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightIntensityLux { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightTemperature")] public string _Surrogate_Attribute_LightTemperature {
            get => LightTemperature != null ? ((System.Single)LightTemperature).ToString() : "";
            set { if (value != "") { LightTemperature = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightTemperature")] public string _Surrogate_Element_LightTemperature {
            get => LightTemperature != null ? ((System.Single)LightTemperature).ToString() : "";
            set { if (value != "") { LightTemperature = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightTemperature { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightEnergy")] public string _Surrogate_Attribute_LightEnergy {
            get => LightEnergy != null ? ((System.Single)LightEnergy).ToString() : "";
            set { if (value != "") { LightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightEnergy")] public string _Surrogate_Element_LightEnergy {
            get => LightEnergy != null ? ((System.Single)LightEnergy).ToString() : "";
            set { if (value != "") { LightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightIndirectEnergy")] public string _Surrogate_Attribute_LightIndirectEnergy {
            get => LightIndirectEnergy != null ? ((System.Single)LightIndirectEnergy).ToString() : "";
            set { if (value != "") { LightIndirectEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightIndirectEnergy")] public string _Surrogate_Element_LightIndirectEnergy {
            get => LightIndirectEnergy != null ? ((System.Single)LightIndirectEnergy).ToString() : "";
            set { if (value != "") { LightIndirectEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightIndirectEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightVolumetricFogEnergy")] public string _Surrogate_Attribute_LightVolumetricFogEnergy {
            get => LightVolumetricFogEnergy != null ? ((System.Single)LightVolumetricFogEnergy).ToString() : "";
            set { if (value != "") { LightVolumetricFogEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightVolumetricFogEnergy")] public string _Surrogate_Element_LightVolumetricFogEnergy {
            get => LightVolumetricFogEnergy != null ? ((System.Single)LightVolumetricFogEnergy).ToString() : "";
            set { if (value != "") { LightVolumetricFogEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightVolumetricFogEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightSize")] public string _Surrogate_Attribute_LightSize {
            get => LightSize != null ? ((System.Single)LightSize).ToString() : "";
            set { if (value != "") { LightSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightSize")] public string _Surrogate_Element_LightSize {
            get => LightSize != null ? ((System.Single)LightSize).ToString() : "";
            set { if (value != "") { LightSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightAngularDistance")] public string _Surrogate_Attribute_LightAngularDistance {
            get => LightAngularDistance != null ? ((System.Single)LightAngularDistance).ToString() : "";
            set { if (value != "") { LightAngularDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightAngularDistance")] public string _Surrogate_Element_LightAngularDistance {
            get => LightAngularDistance != null ? ((System.Single)LightAngularDistance).ToString() : "";
            set { if (value != "") { LightAngularDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightAngularDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightNegative")] public string _Surrogate_Attribute_LightNegative {
            get => LightNegative != null ? ((System.Boolean)LightNegative).ToString() : "";
            set { if (value != "") { LightNegative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightNegative")] public string _Surrogate_Element_LightNegative {
            get => LightNegative != null ? ((System.Boolean)LightNegative).ToString() : "";
            set { if (value != "") { LightNegative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LightNegative { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightSpecular")] public string _Surrogate_Attribute_LightSpecular {
            get => LightSpecular != null ? ((System.Single)LightSpecular).ToString() : "";
            set { if (value != "") { LightSpecular = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightSpecular")] public string _Surrogate_Element_LightSpecular {
            get => LightSpecular != null ? ((System.Single)LightSpecular).ToString() : "";
            set { if (value != "") { LightSpecular = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LightSpecular { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightBakeMode")] public string _Surrogate_Attribute_LightBakeMode {
            get => LightBakeMode != null ? ((Godot.Light3D.BakeMode)LightBakeMode).ToString() : "";
            set { if (value != "") { LightBakeMode = System.Enum.Parse<Godot.Light3D.BakeMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightBakeMode")] public string _Surrogate_Element_LightBakeMode {
            get => LightBakeMode != null ? ((Godot.Light3D.BakeMode)LightBakeMode).ToString() : "";
            set { if (value != "") { LightBakeMode = System.Enum.Parse<Godot.Light3D.BakeMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Light3D.BakeMode? LightBakeMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightCullMask")] public string _Surrogate_Attribute_LightCullMask {
            get => LightCullMask != null ? ((System.UInt32)LightCullMask).ToString() : "";
            set { if (value != "") { LightCullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.LightCullMask")] public string _Surrogate_Element_LightCullMask {
            get => LightCullMask != null ? ((System.UInt32)LightCullMask).ToString() : "";
            set { if (value != "") { LightCullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? LightCullMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowEnabled")] public string _Surrogate_Attribute_ShadowEnabled {
            get => ShadowEnabled != null ? ((System.Boolean)ShadowEnabled).ToString() : "";
            set { if (value != "") { ShadowEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowEnabled")] public string _Surrogate_Element_ShadowEnabled {
            get => ShadowEnabled != null ? ((System.Boolean)ShadowEnabled).ToString() : "";
            set { if (value != "") { ShadowEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShadowEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowBias")] public string _Surrogate_Attribute_ShadowBias {
            get => ShadowBias != null ? ((System.Single)ShadowBias).ToString() : "";
            set { if (value != "") { ShadowBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowBias")] public string _Surrogate_Element_ShadowBias {
            get => ShadowBias != null ? ((System.Single)ShadowBias).ToString() : "";
            set { if (value != "") { ShadowBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ShadowBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowNormalBias")] public string _Surrogate_Attribute_ShadowNormalBias {
            get => ShadowNormalBias != null ? ((System.Single)ShadowNormalBias).ToString() : "";
            set { if (value != "") { ShadowNormalBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowNormalBias")] public string _Surrogate_Element_ShadowNormalBias {
            get => ShadowNormalBias != null ? ((System.Single)ShadowNormalBias).ToString() : "";
            set { if (value != "") { ShadowNormalBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ShadowNormalBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowReverseCullFace")] public string _Surrogate_Attribute_ShadowReverseCullFace {
            get => ShadowReverseCullFace != null ? ((System.Boolean)ShadowReverseCullFace).ToString() : "";
            set { if (value != "") { ShadowReverseCullFace = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowReverseCullFace")] public string _Surrogate_Element_ShadowReverseCullFace {
            get => ShadowReverseCullFace != null ? ((System.Boolean)ShadowReverseCullFace).ToString() : "";
            set { if (value != "") { ShadowReverseCullFace = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShadowReverseCullFace { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowTransmittanceBias")] public string _Surrogate_Attribute_ShadowTransmittanceBias {
            get => ShadowTransmittanceBias != null ? ((System.Single)ShadowTransmittanceBias).ToString() : "";
            set { if (value != "") { ShadowTransmittanceBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowTransmittanceBias")] public string _Surrogate_Element_ShadowTransmittanceBias {
            get => ShadowTransmittanceBias != null ? ((System.Single)ShadowTransmittanceBias).ToString() : "";
            set { if (value != "") { ShadowTransmittanceBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ShadowTransmittanceBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowOpacity")] public string _Surrogate_Attribute_ShadowOpacity {
            get => ShadowOpacity != null ? ((System.Single)ShadowOpacity).ToString() : "";
            set { if (value != "") { ShadowOpacity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowOpacity")] public string _Surrogate_Element_ShadowOpacity {
            get => ShadowOpacity != null ? ((System.Single)ShadowOpacity).ToString() : "";
            set { if (value != "") { ShadowOpacity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ShadowOpacity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowBlur")] public string _Surrogate_Attribute_ShadowBlur {
            get => ShadowBlur != null ? ((System.Single)ShadowBlur).ToString() : "";
            set { if (value != "") { ShadowBlur = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ShadowBlur")] public string _Surrogate_Element_ShadowBlur {
            get => ShadowBlur != null ? ((System.Single)ShadowBlur).ToString() : "";
            set { if (value != "") { ShadowBlur = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ShadowBlur { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeEnabled")] public string _Surrogate_Attribute_DistanceFadeEnabled {
            get => DistanceFadeEnabled != null ? ((System.Boolean)DistanceFadeEnabled).ToString() : "";
            set { if (value != "") { DistanceFadeEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.DistanceFadeEnabled")] public string _Surrogate_Element_DistanceFadeEnabled {
            get => DistanceFadeEnabled != null ? ((System.Boolean)DistanceFadeEnabled).ToString() : "";
            set { if (value != "") { DistanceFadeEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DistanceFadeEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeBegin")] public string _Surrogate_Attribute_DistanceFadeBegin {
            get => DistanceFadeBegin != null ? ((System.Single)DistanceFadeBegin).ToString() : "";
            set { if (value != "") { DistanceFadeBegin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.DistanceFadeBegin")] public string _Surrogate_Element_DistanceFadeBegin {
            get => DistanceFadeBegin != null ? ((System.Single)DistanceFadeBegin).ToString() : "";
            set { if (value != "") { DistanceFadeBegin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DistanceFadeBegin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeShadow")] public string _Surrogate_Attribute_DistanceFadeShadow {
            get => DistanceFadeShadow != null ? ((System.Single)DistanceFadeShadow).ToString() : "";
            set { if (value != "") { DistanceFadeShadow = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.DistanceFadeShadow")] public string _Surrogate_Element_DistanceFadeShadow {
            get => DistanceFadeShadow != null ? ((System.Single)DistanceFadeShadow).ToString() : "";
            set { if (value != "") { DistanceFadeShadow = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DistanceFadeShadow { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeLength")] public string _Surrogate_Attribute_DistanceFadeLength {
            get => DistanceFadeLength != null ? ((System.Single)DistanceFadeLength).ToString() : "";
            set { if (value != "") { DistanceFadeLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.DistanceFadeLength")] public string _Surrogate_Element_DistanceFadeLength {
            get => DistanceFadeLength != null ? ((System.Single)DistanceFadeLength).ToString() : "";
            set { if (value != "") { DistanceFadeLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DistanceFadeLength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorOnly")] public string _Surrogate_Attribute_EditorOnly {
            get => EditorOnly != null ? ((System.Boolean)EditorOnly).ToString() : "";
            set { if (value != "") { EditorOnly = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.EditorOnly")] public string _Surrogate_Element_EditorOnly {
            get => EditorOnly != null ? ((System.Boolean)EditorOnly).ToString() : "";
            set { if (value != "") { EditorOnly = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EditorOnly { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Layers")] public string _Surrogate_Attribute_Layers {
            get => Layers != null ? ((System.UInt32)Layers).ToString() : "";
            set { if (value != "") { Layers = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.Layers")] public string _Surrogate_Element_Layers {
            get => Layers != null ? ((System.UInt32)Layers).ToString() : "";
            set { if (value != "") { Layers = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? Layers { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SortingOffset")] public string _Surrogate_Attribute_SortingOffset {
            get => SortingOffset != null ? ((System.Single)SortingOffset).ToString() : "";
            set { if (value != "") { SortingOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.SortingOffset")] public string _Surrogate_Element_SortingOffset {
            get => SortingOffset != null ? ((System.Single)SortingOffset).ToString() : "";
            set { if (value != "") { SortingOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SortingOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SortingUseAabbCenter")] public string _Surrogate_Attribute_SortingUseAabbCenter {
            get => SortingUseAabbCenter != null ? ((System.Boolean)SortingUseAabbCenter).ToString() : "";
            set { if (value != "") { SortingUseAabbCenter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.SortingUseAabbCenter")] public string _Surrogate_Element_SortingUseAabbCenter {
            get => SortingUseAabbCenter != null ? ((System.Boolean)SortingUseAabbCenter).ToString() : "";
            set { if (value != "") { SortingUseAabbCenter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SortingUseAabbCenter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OmniLight3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightColor")] public string _Surrogate_LightColor {
            get => LightColor != null ? ((Archwyvern.Nxml.Translators.Color)LightColor).ToString() : "";
            set => LightColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? LightColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.OmniLight3D) return alt;
            var obj = (Godot.OmniLight3D)alt ?? new Godot.OmniLight3D();

            // Attributes
            if (OmniRange != null) obj.OmniRange = (System.Single)OmniRange;
            if (OmniAttenuation != null) obj.OmniAttenuation = (System.Single)OmniAttenuation;
            if (OmniShadowMode != null) obj.OmniShadowMode = (Godot.OmniLight3D.ShadowMode)OmniShadowMode;
            if (LightIntensityLumens != null) obj.LightIntensityLumens = (System.Single)LightIntensityLumens;
            if (LightIntensityLux != null) obj.LightIntensityLux = (System.Single)LightIntensityLux;
            if (LightTemperature != null) obj.LightTemperature = (System.Single)LightTemperature;
            if (LightEnergy != null) obj.LightEnergy = (System.Single)LightEnergy;
            if (LightIndirectEnergy != null) obj.LightIndirectEnergy = (System.Single)LightIndirectEnergy;
            if (LightVolumetricFogEnergy != null) obj.LightVolumetricFogEnergy = (System.Single)LightVolumetricFogEnergy;
            if (LightSize != null) obj.LightSize = (System.Single)LightSize;
            if (LightAngularDistance != null) obj.LightAngularDistance = (System.Single)LightAngularDistance;
            if (LightNegative != null) obj.LightNegative = (System.Boolean)LightNegative;
            if (LightSpecular != null) obj.LightSpecular = (System.Single)LightSpecular;
            if (LightBakeMode != null) obj.LightBakeMode = (Godot.Light3D.BakeMode)LightBakeMode;
            if (LightCullMask != null) obj.LightCullMask = (System.UInt32)LightCullMask;
            if (ShadowEnabled != null) obj.ShadowEnabled = (System.Boolean)ShadowEnabled;
            if (ShadowBias != null) obj.ShadowBias = (System.Single)ShadowBias;
            if (ShadowNormalBias != null) obj.ShadowNormalBias = (System.Single)ShadowNormalBias;
            if (ShadowReverseCullFace != null) obj.ShadowReverseCullFace = (System.Boolean)ShadowReverseCullFace;
            if (ShadowTransmittanceBias != null) obj.ShadowTransmittanceBias = (System.Single)ShadowTransmittanceBias;
            if (ShadowOpacity != null) obj.ShadowOpacity = (System.Single)ShadowOpacity;
            if (ShadowBlur != null) obj.ShadowBlur = (System.Single)ShadowBlur;
            if (DistanceFadeEnabled != null) obj.DistanceFadeEnabled = (System.Boolean)DistanceFadeEnabled;
            if (DistanceFadeBegin != null) obj.DistanceFadeBegin = (System.Single)DistanceFadeBegin;
            if (DistanceFadeShadow != null) obj.DistanceFadeShadow = (System.Single)DistanceFadeShadow;
            if (DistanceFadeLength != null) obj.DistanceFadeLength = (System.Single)DistanceFadeLength;
            if (EditorOnly != null) obj.EditorOnly = (System.Boolean)EditorOnly;
            if (Layers != null) obj.Layers = (System.UInt32)Layers;
            if (SortingOffset != null) obj.SortingOffset = (System.Single)SortingOffset;
            if (SortingUseAabbCenter != null) obj.SortingUseAabbCenter = (System.Boolean)SortingUseAabbCenter;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (LightColor != null) obj.LightColor = (Archwyvern.Nxml.Translators.Color)LightColor;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (LightProjector != null) {
                if (((IResourceTag)LightProjector).ResourcePath != null) {
                    obj.LightProjector = (Godot.Texture2D)LightProjector.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)LightProjector).ResourcePath));
                } else {
                    obj.LightProjector = (Godot.Texture2D)LightProjector.Generate();
                }
            }

            return obj;
        }
    }
}
