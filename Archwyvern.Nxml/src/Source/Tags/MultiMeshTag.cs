// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "MultiMesh", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class MultiMeshTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "MultiMesh.ElementProperty.Mesh")] public class Mesh
            {
                [System.Xml.Serialization.XmlElement(ElementName = "ArrayMesh", Type = typeof(ArrayMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "BoxMesh", Type = typeof(BoxMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CapsuleMesh", Type = typeof(CapsuleMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CylinderMesh", Type = typeof(CylinderMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImmediateMesh", Type = typeof(ImmediateMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Mesh", Type = typeof(MeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMesh", Type = typeof(PlaceholderMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaneMesh", Type = typeof(PlaneMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PointMesh", Type = typeof(PointMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PrimitiveMesh", Type = typeof(PrimitiveMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PrismMesh", Type = typeof(PrismMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "QuadMesh", Type = typeof(QuadMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "RibbonTrailMesh", Type = typeof(RibbonTrailMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "SphereMesh", Type = typeof(SphereMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TextMesh", Type = typeof(TextMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TorusMesh", Type = typeof(TorusMeshTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TubeTrailMesh", Type = typeof(TubeTrailMeshTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Mesh => _Surrogate_Element_Mesh?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.Mesh")] public MultiMeshTag.ElementProperty.Mesh? _Surrogate_Element_Mesh;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TransformFormat")] public string _Surrogate_Attribute_TransformFormat {
            get => TransformFormat != null ? ((Godot.MultiMesh.TransformFormatEnum)TransformFormat).ToString() : "";
            set { if (value != "") { TransformFormat = System.Enum.Parse<Godot.MultiMesh.TransformFormatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.TransformFormat")] public string _Surrogate_Element_TransformFormat {
            get => TransformFormat != null ? ((Godot.MultiMesh.TransformFormatEnum)TransformFormat).ToString() : "";
            set { if (value != "") { TransformFormat = System.Enum.Parse<Godot.MultiMesh.TransformFormatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.MultiMesh.TransformFormatEnum? TransformFormat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseColors")] public string _Surrogate_Attribute_UseColors {
            get => UseColors != null ? ((System.Boolean)UseColors).ToString() : "";
            set { if (value != "") { UseColors = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.UseColors")] public string _Surrogate_Element_UseColors {
            get => UseColors != null ? ((System.Boolean)UseColors).ToString() : "";
            set { if (value != "") { UseColors = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseColors { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseCustomData")] public string _Surrogate_Attribute_UseCustomData {
            get => UseCustomData != null ? ((System.Boolean)UseCustomData).ToString() : "";
            set { if (value != "") { UseCustomData = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.UseCustomData")] public string _Surrogate_Element_UseCustomData {
            get => UseCustomData != null ? ((System.Boolean)UseCustomData).ToString() : "";
            set { if (value != "") { UseCustomData = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseCustomData { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InstanceCount")] public string _Surrogate_Attribute_InstanceCount {
            get => InstanceCount != null ? ((System.Int32)InstanceCount).ToString() : "";
            set { if (value != "") { InstanceCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.InstanceCount")] public string _Surrogate_Element_InstanceCount {
            get => InstanceCount != null ? ((System.Int32)InstanceCount).ToString() : "";
            set { if (value != "") { InstanceCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? InstanceCount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibleInstanceCount")] public string _Surrogate_Attribute_VisibleInstanceCount {
            get => VisibleInstanceCount != null ? ((System.Int32)VisibleInstanceCount).ToString() : "";
            set { if (value != "") { VisibleInstanceCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.VisibleInstanceCount")] public string _Surrogate_Element_VisibleInstanceCount {
            get => VisibleInstanceCount != null ? ((System.Int32)VisibleInstanceCount).ToString() : "";
            set { if (value != "") { VisibleInstanceCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? VisibleInstanceCount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiMesh.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.MultiMesh) return alt;
            var obj = (Godot.MultiMesh)alt ?? new Godot.MultiMesh();

            // Attributes
            if (TransformFormat != null) obj.TransformFormat = (Godot.MultiMesh.TransformFormatEnum)TransformFormat;
            if (UseColors != null) obj.UseColors = (System.Boolean)UseColors;
            if (UseCustomData != null) obj.UseCustomData = (System.Boolean)UseCustomData;
            if (InstanceCount != null) obj.InstanceCount = (System.Int32)InstanceCount;
            if (VisibleInstanceCount != null) obj.VisibleInstanceCount = (System.Int32)VisibleInstanceCount;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (Mesh != null) {
                if (((IResourceTag)Mesh).ResourcePath != null) {
                    obj.Mesh = (Godot.Mesh)Mesh.Generate(Godot.GD.Load<Godot.Mesh>(((IResourceTag)Mesh).ResourcePath));
                } else {
                    obj.Mesh = (Godot.Mesh)Mesh.Generate();
                }
            }

            return obj;
        }
    }
}
