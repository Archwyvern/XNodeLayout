// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "SystemFont", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class SystemFontTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FontItalic")] public string _Surrogate_Attribute_FontItalic {
            get => FontItalic != null ? ((System.Boolean)FontItalic).ToString() : "";
            set { if (value != "") { FontItalic = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.FontItalic")] public string _Surrogate_Element_FontItalic {
            get => FontItalic != null ? ((System.Boolean)FontItalic).ToString() : "";
            set { if (value != "") { FontItalic = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FontItalic { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FontWeight")] public string _Surrogate_Attribute_FontWeight {
            get => FontWeight != null ? ((System.Int32)FontWeight).ToString() : "";
            set { if (value != "") { FontWeight = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.FontWeight")] public string _Surrogate_Element_FontWeight {
            get => FontWeight != null ? ((System.Int32)FontWeight).ToString() : "";
            set { if (value != "") { FontWeight = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FontWeight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FontStretch")] public string _Surrogate_Attribute_FontStretch {
            get => FontStretch != null ? ((System.Int32)FontStretch).ToString() : "";
            set { if (value != "") { FontStretch = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.FontStretch")] public string _Surrogate_Element_FontStretch {
            get => FontStretch != null ? ((System.Int32)FontStretch).ToString() : "";
            set { if (value != "") { FontStretch = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FontStretch { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Antialiasing")] public string _Surrogate_Attribute_Antialiasing {
            get => Antialiasing != null ? ((Godot.TextServer.FontAntialiasing)Antialiasing).ToString() : "";
            set { if (value != "") { Antialiasing = System.Enum.Parse<Godot.TextServer.FontAntialiasing>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.Antialiasing")] public string _Surrogate_Element_Antialiasing {
            get => Antialiasing != null ? ((Godot.TextServer.FontAntialiasing)Antialiasing).ToString() : "";
            set { if (value != "") { Antialiasing = System.Enum.Parse<Godot.TextServer.FontAntialiasing>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.FontAntialiasing? Antialiasing { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GenerateMipmaps")] public string _Surrogate_Attribute_GenerateMipmaps {
            get => GenerateMipmaps != null ? ((System.Boolean)GenerateMipmaps).ToString() : "";
            set { if (value != "") { GenerateMipmaps = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.GenerateMipmaps")] public string _Surrogate_Element_GenerateMipmaps {
            get => GenerateMipmaps != null ? ((System.Boolean)GenerateMipmaps).ToString() : "";
            set { if (value != "") { GenerateMipmaps = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GenerateMipmaps { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AllowSystemFallback")] public string _Surrogate_Attribute_AllowSystemFallback {
            get => AllowSystemFallback != null ? ((System.Boolean)AllowSystemFallback).ToString() : "";
            set { if (value != "") { AllowSystemFallback = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.AllowSystemFallback")] public string _Surrogate_Element_AllowSystemFallback {
            get => AllowSystemFallback != null ? ((System.Boolean)AllowSystemFallback).ToString() : "";
            set { if (value != "") { AllowSystemFallback = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AllowSystemFallback { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ForceAutohinter")] public string _Surrogate_Attribute_ForceAutohinter {
            get => ForceAutohinter != null ? ((System.Boolean)ForceAutohinter).ToString() : "";
            set { if (value != "") { ForceAutohinter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.ForceAutohinter")] public string _Surrogate_Element_ForceAutohinter {
            get => ForceAutohinter != null ? ((System.Boolean)ForceAutohinter).ToString() : "";
            set { if (value != "") { ForceAutohinter = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ForceAutohinter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Hinting")] public string _Surrogate_Attribute_Hinting {
            get => Hinting != null ? ((Godot.TextServer.Hinting)Hinting).ToString() : "";
            set { if (value != "") { Hinting = System.Enum.Parse<Godot.TextServer.Hinting>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.Hinting")] public string _Surrogate_Element_Hinting {
            get => Hinting != null ? ((Godot.TextServer.Hinting)Hinting).ToString() : "";
            set { if (value != "") { Hinting = System.Enum.Parse<Godot.TextServer.Hinting>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.Hinting? Hinting { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubpixelPositioning")] public string _Surrogate_Attribute_SubpixelPositioning {
            get => SubpixelPositioning != null ? ((Godot.TextServer.SubpixelPositioning)SubpixelPositioning).ToString() : "";
            set { if (value != "") { SubpixelPositioning = System.Enum.Parse<Godot.TextServer.SubpixelPositioning>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.SubpixelPositioning")] public string _Surrogate_Element_SubpixelPositioning {
            get => SubpixelPositioning != null ? ((Godot.TextServer.SubpixelPositioning)SubpixelPositioning).ToString() : "";
            set { if (value != "") { SubpixelPositioning = System.Enum.Parse<Godot.TextServer.SubpixelPositioning>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.SubpixelPositioning? SubpixelPositioning { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MultichannelSignedDistanceField")] public string _Surrogate_Attribute_MultichannelSignedDistanceField {
            get => MultichannelSignedDistanceField != null ? ((System.Boolean)MultichannelSignedDistanceField).ToString() : "";
            set { if (value != "") { MultichannelSignedDistanceField = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.MultichannelSignedDistanceField")] public string _Surrogate_Element_MultichannelSignedDistanceField {
            get => MultichannelSignedDistanceField != null ? ((System.Boolean)MultichannelSignedDistanceField).ToString() : "";
            set { if (value != "") { MultichannelSignedDistanceField = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? MultichannelSignedDistanceField { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MsdfPixelRange")] public string _Surrogate_Attribute_MsdfPixelRange {
            get => MsdfPixelRange != null ? ((System.Int32)MsdfPixelRange).ToString() : "";
            set { if (value != "") { MsdfPixelRange = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.MsdfPixelRange")] public string _Surrogate_Element_MsdfPixelRange {
            get => MsdfPixelRange != null ? ((System.Int32)MsdfPixelRange).ToString() : "";
            set { if (value != "") { MsdfPixelRange = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MsdfPixelRange { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MsdfSize")] public string _Surrogate_Attribute_MsdfSize {
            get => MsdfSize != null ? ((System.Int32)MsdfSize).ToString() : "";
            set { if (value != "") { MsdfSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.MsdfSize")] public string _Surrogate_Element_MsdfSize {
            get => MsdfSize != null ? ((System.Int32)MsdfSize).ToString() : "";
            set { if (value != "") { MsdfSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MsdfSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Oversampling")] public string _Surrogate_Attribute_Oversampling {
            get => Oversampling != null ? ((System.Single)Oversampling).ToString() : "";
            set { if (value != "") { Oversampling = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.Oversampling")] public string _Surrogate_Element_Oversampling {
            get => Oversampling != null ? ((System.Single)Oversampling).ToString() : "";
            set { if (value != "") { Oversampling = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Oversampling { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "SystemFont.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.SystemFont) return alt;
            var obj = (Godot.SystemFont)alt ?? new Godot.SystemFont();

            // Attributes
            if (FontItalic != null) obj.FontItalic = (System.Boolean)FontItalic;
            if (FontWeight != null) obj.FontWeight = (System.Int32)FontWeight;
            if (FontStretch != null) obj.FontStretch = (System.Int32)FontStretch;
            if (Antialiasing != null) obj.Antialiasing = (Godot.TextServer.FontAntialiasing)Antialiasing;
            if (GenerateMipmaps != null) obj.GenerateMipmaps = (System.Boolean)GenerateMipmaps;
            if (AllowSystemFallback != null) obj.AllowSystemFallback = (System.Boolean)AllowSystemFallback;
            if (ForceAutohinter != null) obj.ForceAutohinter = (System.Boolean)ForceAutohinter;
            if (Hinting != null) obj.Hinting = (Godot.TextServer.Hinting)Hinting;
            if (SubpixelPositioning != null) obj.SubpixelPositioning = (Godot.TextServer.SubpixelPositioning)SubpixelPositioning;
            if (MultichannelSignedDistanceField != null) obj.MultichannelSignedDistanceField = (System.Boolean)MultichannelSignedDistanceField;
            if (MsdfPixelRange != null) obj.MsdfPixelRange = (System.Int32)MsdfPixelRange;
            if (MsdfSize != null) obj.MsdfSize = (System.Int32)MsdfSize;
            if (Oversampling != null) obj.Oversampling = (System.Single)Oversampling;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
