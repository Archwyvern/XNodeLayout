// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "NavigationMesh", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class NavigationMeshTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SamplePartitionType")] public string _Surrogate_Attribute_SamplePartitionType {
            get => SamplePartitionType != null ? ((Godot.NavigationMesh.SamplePartitionTypeEnum)SamplePartitionType).ToString() : "";
            set { if (value != "") { SamplePartitionType = System.Enum.Parse<Godot.NavigationMesh.SamplePartitionTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.SamplePartitionType")] public string _Surrogate_Element_SamplePartitionType {
            get => SamplePartitionType != null ? ((Godot.NavigationMesh.SamplePartitionTypeEnum)SamplePartitionType).ToString() : "";
            set { if (value != "") { SamplePartitionType = System.Enum.Parse<Godot.NavigationMesh.SamplePartitionTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.NavigationMesh.SamplePartitionTypeEnum? SamplePartitionType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GeometryParsedGeometryType")] public string _Surrogate_Attribute_GeometryParsedGeometryType {
            get => GeometryParsedGeometryType != null ? ((Godot.NavigationMesh.ParsedGeometryType)GeometryParsedGeometryType).ToString() : "";
            set { if (value != "") { GeometryParsedGeometryType = System.Enum.Parse<Godot.NavigationMesh.ParsedGeometryType>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.GeometryParsedGeometryType")] public string _Surrogate_Element_GeometryParsedGeometryType {
            get => GeometryParsedGeometryType != null ? ((Godot.NavigationMesh.ParsedGeometryType)GeometryParsedGeometryType).ToString() : "";
            set { if (value != "") { GeometryParsedGeometryType = System.Enum.Parse<Godot.NavigationMesh.ParsedGeometryType>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.NavigationMesh.ParsedGeometryType? GeometryParsedGeometryType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GeometryCollisionMask")] public string _Surrogate_Attribute_GeometryCollisionMask {
            get => GeometryCollisionMask != null ? ((System.UInt32)GeometryCollisionMask).ToString() : "";
            set { if (value != "") { GeometryCollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.GeometryCollisionMask")] public string _Surrogate_Element_GeometryCollisionMask {
            get => GeometryCollisionMask != null ? ((System.UInt32)GeometryCollisionMask).ToString() : "";
            set { if (value != "") { GeometryCollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? GeometryCollisionMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GeometrySourceGeometryMode")] public string _Surrogate_Attribute_GeometrySourceGeometryMode {
            get => GeometrySourceGeometryMode != null ? ((Godot.NavigationMesh.SourceGeometryMode)GeometrySourceGeometryMode).ToString() : "";
            set { if (value != "") { GeometrySourceGeometryMode = System.Enum.Parse<Godot.NavigationMesh.SourceGeometryMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.GeometrySourceGeometryMode")] public string _Surrogate_Element_GeometrySourceGeometryMode {
            get => GeometrySourceGeometryMode != null ? ((Godot.NavigationMesh.SourceGeometryMode)GeometrySourceGeometryMode).ToString() : "";
            set { if (value != "") { GeometrySourceGeometryMode = System.Enum.Parse<Godot.NavigationMesh.SourceGeometryMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.NavigationMesh.SourceGeometryMode? GeometrySourceGeometryMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CellSize")] public string _Surrogate_Attribute_CellSize {
            get => CellSize != null ? ((System.Single)CellSize).ToString() : "";
            set { if (value != "") { CellSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.CellSize")] public string _Surrogate_Element_CellSize {
            get => CellSize != null ? ((System.Single)CellSize).ToString() : "";
            set { if (value != "") { CellSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CellSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CellHeight")] public string _Surrogate_Attribute_CellHeight {
            get => CellHeight != null ? ((System.Single)CellHeight).ToString() : "";
            set { if (value != "") { CellHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.CellHeight")] public string _Surrogate_Element_CellHeight {
            get => CellHeight != null ? ((System.Single)CellHeight).ToString() : "";
            set { if (value != "") { CellHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CellHeight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AgentHeight")] public string _Surrogate_Attribute_AgentHeight {
            get => AgentHeight != null ? ((System.Single)AgentHeight).ToString() : "";
            set { if (value != "") { AgentHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.AgentHeight")] public string _Surrogate_Element_AgentHeight {
            get => AgentHeight != null ? ((System.Single)AgentHeight).ToString() : "";
            set { if (value != "") { AgentHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AgentHeight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AgentRadius")] public string _Surrogate_Attribute_AgentRadius {
            get => AgentRadius != null ? ((System.Single)AgentRadius).ToString() : "";
            set { if (value != "") { AgentRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.AgentRadius")] public string _Surrogate_Element_AgentRadius {
            get => AgentRadius != null ? ((System.Single)AgentRadius).ToString() : "";
            set { if (value != "") { AgentRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AgentRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AgentMaxClimb")] public string _Surrogate_Attribute_AgentMaxClimb {
            get => AgentMaxClimb != null ? ((System.Single)AgentMaxClimb).ToString() : "";
            set { if (value != "") { AgentMaxClimb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.AgentMaxClimb")] public string _Surrogate_Element_AgentMaxClimb {
            get => AgentMaxClimb != null ? ((System.Single)AgentMaxClimb).ToString() : "";
            set { if (value != "") { AgentMaxClimb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AgentMaxClimb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AgentMaxSlope")] public string _Surrogate_Attribute_AgentMaxSlope {
            get => AgentMaxSlope != null ? ((System.Single)AgentMaxSlope).ToString() : "";
            set { if (value != "") { AgentMaxSlope = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.AgentMaxSlope")] public string _Surrogate_Element_AgentMaxSlope {
            get => AgentMaxSlope != null ? ((System.Single)AgentMaxSlope).ToString() : "";
            set { if (value != "") { AgentMaxSlope = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AgentMaxSlope { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RegionMinSize")] public string _Surrogate_Attribute_RegionMinSize {
            get => RegionMinSize != null ? ((System.Single)RegionMinSize).ToString() : "";
            set { if (value != "") { RegionMinSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.RegionMinSize")] public string _Surrogate_Element_RegionMinSize {
            get => RegionMinSize != null ? ((System.Single)RegionMinSize).ToString() : "";
            set { if (value != "") { RegionMinSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RegionMinSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RegionMergeSize")] public string _Surrogate_Attribute_RegionMergeSize {
            get => RegionMergeSize != null ? ((System.Single)RegionMergeSize).ToString() : "";
            set { if (value != "") { RegionMergeSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.RegionMergeSize")] public string _Surrogate_Element_RegionMergeSize {
            get => RegionMergeSize != null ? ((System.Single)RegionMergeSize).ToString() : "";
            set { if (value != "") { RegionMergeSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RegionMergeSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EdgeMaxLength")] public string _Surrogate_Attribute_EdgeMaxLength {
            get => EdgeMaxLength != null ? ((System.Single)EdgeMaxLength).ToString() : "";
            set { if (value != "") { EdgeMaxLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.EdgeMaxLength")] public string _Surrogate_Element_EdgeMaxLength {
            get => EdgeMaxLength != null ? ((System.Single)EdgeMaxLength).ToString() : "";
            set { if (value != "") { EdgeMaxLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EdgeMaxLength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EdgeMaxError")] public string _Surrogate_Attribute_EdgeMaxError {
            get => EdgeMaxError != null ? ((System.Single)EdgeMaxError).ToString() : "";
            set { if (value != "") { EdgeMaxError = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.EdgeMaxError")] public string _Surrogate_Element_EdgeMaxError {
            get => EdgeMaxError != null ? ((System.Single)EdgeMaxError).ToString() : "";
            set { if (value != "") { EdgeMaxError = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EdgeMaxError { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VerticesPerPolygon")] public string _Surrogate_Attribute_VerticesPerPolygon {
            get => VerticesPerPolygon != null ? ((System.Single)VerticesPerPolygon).ToString() : "";
            set { if (value != "") { VerticesPerPolygon = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.VerticesPerPolygon")] public string _Surrogate_Element_VerticesPerPolygon {
            get => VerticesPerPolygon != null ? ((System.Single)VerticesPerPolygon).ToString() : "";
            set { if (value != "") { VerticesPerPolygon = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VerticesPerPolygon { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DetailSampleDistance")] public string _Surrogate_Attribute_DetailSampleDistance {
            get => DetailSampleDistance != null ? ((System.Single)DetailSampleDistance).ToString() : "";
            set { if (value != "") { DetailSampleDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.DetailSampleDistance")] public string _Surrogate_Element_DetailSampleDistance {
            get => DetailSampleDistance != null ? ((System.Single)DetailSampleDistance).ToString() : "";
            set { if (value != "") { DetailSampleDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DetailSampleDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DetailSampleMaxError")] public string _Surrogate_Attribute_DetailSampleMaxError {
            get => DetailSampleMaxError != null ? ((System.Single)DetailSampleMaxError).ToString() : "";
            set { if (value != "") { DetailSampleMaxError = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.DetailSampleMaxError")] public string _Surrogate_Element_DetailSampleMaxError {
            get => DetailSampleMaxError != null ? ((System.Single)DetailSampleMaxError).ToString() : "";
            set { if (value != "") { DetailSampleMaxError = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DetailSampleMaxError { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterLowHangingObstacles")] public string _Surrogate_Attribute_FilterLowHangingObstacles {
            get => FilterLowHangingObstacles != null ? ((System.Boolean)FilterLowHangingObstacles).ToString() : "";
            set { if (value != "") { FilterLowHangingObstacles = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.FilterLowHangingObstacles")] public string _Surrogate_Element_FilterLowHangingObstacles {
            get => FilterLowHangingObstacles != null ? ((System.Boolean)FilterLowHangingObstacles).ToString() : "";
            set { if (value != "") { FilterLowHangingObstacles = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterLowHangingObstacles { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterLedgeSpans")] public string _Surrogate_Attribute_FilterLedgeSpans {
            get => FilterLedgeSpans != null ? ((System.Boolean)FilterLedgeSpans).ToString() : "";
            set { if (value != "") { FilterLedgeSpans = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.FilterLedgeSpans")] public string _Surrogate_Element_FilterLedgeSpans {
            get => FilterLedgeSpans != null ? ((System.Boolean)FilterLedgeSpans).ToString() : "";
            set { if (value != "") { FilterLedgeSpans = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterLedgeSpans { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterWalkableLowHeightSpans")] public string _Surrogate_Attribute_FilterWalkableLowHeightSpans {
            get => FilterWalkableLowHeightSpans != null ? ((System.Boolean)FilterWalkableLowHeightSpans).ToString() : "";
            set { if (value != "") { FilterWalkableLowHeightSpans = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.FilterWalkableLowHeightSpans")] public string _Surrogate_Element_FilterWalkableLowHeightSpans {
            get => FilterWalkableLowHeightSpans != null ? ((System.Boolean)FilterWalkableLowHeightSpans).ToString() : "";
            set { if (value != "") { FilterWalkableLowHeightSpans = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterWalkableLowHeightSpans { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "NavigationMesh.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GeometrySourceGroupName")] public string _Surrogate_GeometrySourceGroupName {
            get => GeometrySourceGroupName != null ? ((Archwyvern.Nxml.Translators.StringName)GeometrySourceGroupName).ToString() : "";
            set => GeometrySourceGroupName = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? GeometrySourceGroupName;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterBakingAabbOffset")] public string _Surrogate_FilterBakingAabbOffset {
            get => FilterBakingAabbOffset != null ? ((Archwyvern.Nxml.Translators.Vector3)FilterBakingAabbOffset).ToString() : "";
            set => FilterBakingAabbOffset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? FilterBakingAabbOffset;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.NavigationMesh) return alt;
            var obj = (Godot.NavigationMesh)alt ?? new Godot.NavigationMesh();

            // Attributes
            if (SamplePartitionType != null) obj.SamplePartitionType = (Godot.NavigationMesh.SamplePartitionTypeEnum)SamplePartitionType;
            if (GeometryParsedGeometryType != null) obj.GeometryParsedGeometryType = (Godot.NavigationMesh.ParsedGeometryType)GeometryParsedGeometryType;
            if (GeometryCollisionMask != null) obj.GeometryCollisionMask = (System.UInt32)GeometryCollisionMask;
            if (GeometrySourceGeometryMode != null) obj.GeometrySourceGeometryMode = (Godot.NavigationMesh.SourceGeometryMode)GeometrySourceGeometryMode;
            if (CellSize != null) obj.CellSize = (System.Single)CellSize;
            if (CellHeight != null) obj.CellHeight = (System.Single)CellHeight;
            if (AgentHeight != null) obj.AgentHeight = (System.Single)AgentHeight;
            if (AgentRadius != null) obj.AgentRadius = (System.Single)AgentRadius;
            if (AgentMaxClimb != null) obj.AgentMaxClimb = (System.Single)AgentMaxClimb;
            if (AgentMaxSlope != null) obj.AgentMaxSlope = (System.Single)AgentMaxSlope;
            if (RegionMinSize != null) obj.RegionMinSize = (System.Single)RegionMinSize;
            if (RegionMergeSize != null) obj.RegionMergeSize = (System.Single)RegionMergeSize;
            if (EdgeMaxLength != null) obj.EdgeMaxLength = (System.Single)EdgeMaxLength;
            if (EdgeMaxError != null) obj.EdgeMaxError = (System.Single)EdgeMaxError;
            if (VerticesPerPolygon != null) obj.VerticesPerPolygon = (System.Single)VerticesPerPolygon;
            if (DetailSampleDistance != null) obj.DetailSampleDistance = (System.Single)DetailSampleDistance;
            if (DetailSampleMaxError != null) obj.DetailSampleMaxError = (System.Single)DetailSampleMaxError;
            if (FilterLowHangingObstacles != null) obj.FilterLowHangingObstacles = (System.Boolean)FilterLowHangingObstacles;
            if (FilterLedgeSpans != null) obj.FilterLedgeSpans = (System.Boolean)FilterLedgeSpans;
            if (FilterWalkableLowHeightSpans != null) obj.FilterWalkableLowHeightSpans = (System.Boolean)FilterWalkableLowHeightSpans;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (GeometrySourceGroupName != null) obj.GeometrySourceGroupName = (Archwyvern.Nxml.Translators.StringName)GeometrySourceGroupName;
            if (FilterBakingAabbOffset != null) obj.FilterBakingAabbOffset = (Archwyvern.Nxml.Translators.Vector3)FilterBakingAabbOffset;
            // Elements

            return obj;
        }
    }
}
