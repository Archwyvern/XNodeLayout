// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "RigidBody3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class RigidBody3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "RigidBody3D.ElementProperty.PhysicsMaterialOverride")] public class PhysicsMaterialOverride
            {
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicsMaterial", Type = typeof(PhysicsMaterialTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? PhysicsMaterialOverride => _Surrogate_Element_PhysicsMaterialOverride?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.PhysicsMaterialOverride")] public RigidBody3DTag.ElementProperty.PhysicsMaterialOverride? _Surrogate_Element_PhysicsMaterialOverride;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Mass")] public string _Surrogate_Attribute_Mass {
            get => Mass != null ? ((System.Single)Mass).ToString() : "";
            set { if (value != "") { Mass = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.Mass")] public string _Surrogate_Element_Mass {
            get => Mass != null ? ((System.Single)Mass).ToString() : "";
            set { if (value != "") { Mass = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Mass { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CenterOfMassMode")] public string _Surrogate_Attribute_CenterOfMassMode {
            get => CenterOfMassMode != null ? ((Godot.RigidBody3D.CenterOfMassModeEnum)CenterOfMassMode).ToString() : "";
            set { if (value != "") { CenterOfMassMode = System.Enum.Parse<Godot.RigidBody3D.CenterOfMassModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CenterOfMassMode")] public string _Surrogate_Element_CenterOfMassMode {
            get => CenterOfMassMode != null ? ((Godot.RigidBody3D.CenterOfMassModeEnum)CenterOfMassMode).ToString() : "";
            set { if (value != "") { CenterOfMassMode = System.Enum.Parse<Godot.RigidBody3D.CenterOfMassModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody3D.CenterOfMassModeEnum? CenterOfMassMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GravityScale")] public string _Surrogate_Attribute_GravityScale {
            get => GravityScale != null ? ((System.Single)GravityScale).ToString() : "";
            set { if (value != "") { GravityScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.GravityScale")] public string _Surrogate_Element_GravityScale {
            get => GravityScale != null ? ((System.Single)GravityScale).ToString() : "";
            set { if (value != "") { GravityScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GravityScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CustomIntegrator")] public string _Surrogate_Attribute_CustomIntegrator {
            get => CustomIntegrator != null ? ((System.Boolean)CustomIntegrator).ToString() : "";
            set { if (value != "") { CustomIntegrator = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CustomIntegrator")] public string _Surrogate_Element_CustomIntegrator {
            get => CustomIntegrator != null ? ((System.Boolean)CustomIntegrator).ToString() : "";
            set { if (value != "") { CustomIntegrator = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? CustomIntegrator { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContinuousCd")] public string _Surrogate_Attribute_ContinuousCd {
            get => ContinuousCd != null ? ((System.Boolean)ContinuousCd).ToString() : "";
            set { if (value != "") { ContinuousCd = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ContinuousCd")] public string _Surrogate_Element_ContinuousCd {
            get => ContinuousCd != null ? ((System.Boolean)ContinuousCd).ToString() : "";
            set { if (value != "") { ContinuousCd = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ContinuousCd { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxContactsReported")] public string _Surrogate_Attribute_MaxContactsReported {
            get => MaxContactsReported != null ? ((System.Int32)MaxContactsReported).ToString() : "";
            set { if (value != "") { MaxContactsReported = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.MaxContactsReported")] public string _Surrogate_Element_MaxContactsReported {
            get => MaxContactsReported != null ? ((System.Int32)MaxContactsReported).ToString() : "";
            set { if (value != "") { MaxContactsReported = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MaxContactsReported { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContactMonitor")] public string _Surrogate_Attribute_ContactMonitor {
            get => ContactMonitor != null ? ((System.Boolean)ContactMonitor).ToString() : "";
            set { if (value != "") { ContactMonitor = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ContactMonitor")] public string _Surrogate_Element_ContactMonitor {
            get => ContactMonitor != null ? ((System.Boolean)ContactMonitor).ToString() : "";
            set { if (value != "") { ContactMonitor = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ContactMonitor { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Sleeping")] public string _Surrogate_Attribute_Sleeping {
            get => Sleeping != null ? ((System.Boolean)Sleeping).ToString() : "";
            set { if (value != "") { Sleeping = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.Sleeping")] public string _Surrogate_Element_Sleeping {
            get => Sleeping != null ? ((System.Boolean)Sleeping).ToString() : "";
            set { if (value != "") { Sleeping = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Sleeping { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CanSleep")] public string _Surrogate_Attribute_CanSleep {
            get => CanSleep != null ? ((System.Boolean)CanSleep).ToString() : "";
            set { if (value != "") { CanSleep = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CanSleep")] public string _Surrogate_Element_CanSleep {
            get => CanSleep != null ? ((System.Boolean)CanSleep).ToString() : "";
            set { if (value != "") { CanSleep = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? CanSleep { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LockRotation")] public string _Surrogate_Attribute_LockRotation {
            get => LockRotation != null ? ((System.Boolean)LockRotation).ToString() : "";
            set { if (value != "") { LockRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.LockRotation")] public string _Surrogate_Element_LockRotation {
            get => LockRotation != null ? ((System.Boolean)LockRotation).ToString() : "";
            set { if (value != "") { LockRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LockRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Freeze")] public string _Surrogate_Attribute_Freeze {
            get => Freeze != null ? ((System.Boolean)Freeze).ToString() : "";
            set { if (value != "") { Freeze = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.Freeze")] public string _Surrogate_Element_Freeze {
            get => Freeze != null ? ((System.Boolean)Freeze).ToString() : "";
            set { if (value != "") { Freeze = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Freeze { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FreezeMode")] public string _Surrogate_Attribute_FreezeMode {
            get => FreezeMode != null ? ((Godot.RigidBody3D.FreezeModeEnum)FreezeMode).ToString() : "";
            set { if (value != "") { FreezeMode = System.Enum.Parse<Godot.RigidBody3D.FreezeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.FreezeMode")] public string _Surrogate_Element_FreezeMode {
            get => FreezeMode != null ? ((Godot.RigidBody3D.FreezeModeEnum)FreezeMode).ToString() : "";
            set { if (value != "") { FreezeMode = System.Enum.Parse<Godot.RigidBody3D.FreezeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody3D.FreezeModeEnum? FreezeMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearDampMode")] public string _Surrogate_Attribute_LinearDampMode {
            get => LinearDampMode != null ? ((Godot.RigidBody3D.DampMode)LinearDampMode).ToString() : "";
            set { if (value != "") { LinearDampMode = System.Enum.Parse<Godot.RigidBody3D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.LinearDampMode")] public string _Surrogate_Element_LinearDampMode {
            get => LinearDampMode != null ? ((Godot.RigidBody3D.DampMode)LinearDampMode).ToString() : "";
            set { if (value != "") { LinearDampMode = System.Enum.Parse<Godot.RigidBody3D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody3D.DampMode? LinearDampMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearDamp")] public string _Surrogate_Attribute_LinearDamp {
            get => LinearDamp != null ? ((System.Single)LinearDamp).ToString() : "";
            set { if (value != "") { LinearDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.LinearDamp")] public string _Surrogate_Element_LinearDamp {
            get => LinearDamp != null ? ((System.Single)LinearDamp).ToString() : "";
            set { if (value != "") { LinearDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearDamp { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularDampMode")] public string _Surrogate_Attribute_AngularDampMode {
            get => AngularDampMode != null ? ((Godot.RigidBody3D.DampMode)AngularDampMode).ToString() : "";
            set { if (value != "") { AngularDampMode = System.Enum.Parse<Godot.RigidBody3D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AngularDampMode")] public string _Surrogate_Element_AngularDampMode {
            get => AngularDampMode != null ? ((Godot.RigidBody3D.DampMode)AngularDampMode).ToString() : "";
            set { if (value != "") { AngularDampMode = System.Enum.Parse<Godot.RigidBody3D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody3D.DampMode? AngularDampMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularDamp")] public string _Surrogate_Attribute_AngularDamp {
            get => AngularDamp != null ? ((System.Single)AngularDamp).ToString() : "";
            set { if (value != "") { AngularDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AngularDamp")] public string _Surrogate_Element_AngularDamp {
            get => AngularDamp != null ? ((System.Single)AngularDamp).ToString() : "";
            set { if (value != "") { AngularDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularDamp { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockLinearX")] public string _Surrogate_Attribute_AxisLockLinearX {
            get => AxisLockLinearX != null ? ((System.Boolean)AxisLockLinearX).ToString() : "";
            set { if (value != "") { AxisLockLinearX = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockLinearX")] public string _Surrogate_Element_AxisLockLinearX {
            get => AxisLockLinearX != null ? ((System.Boolean)AxisLockLinearX).ToString() : "";
            set { if (value != "") { AxisLockLinearX = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockLinearX { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockLinearY")] public string _Surrogate_Attribute_AxisLockLinearY {
            get => AxisLockLinearY != null ? ((System.Boolean)AxisLockLinearY).ToString() : "";
            set { if (value != "") { AxisLockLinearY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockLinearY")] public string _Surrogate_Element_AxisLockLinearY {
            get => AxisLockLinearY != null ? ((System.Boolean)AxisLockLinearY).ToString() : "";
            set { if (value != "") { AxisLockLinearY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockLinearY { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockLinearZ")] public string _Surrogate_Attribute_AxisLockLinearZ {
            get => AxisLockLinearZ != null ? ((System.Boolean)AxisLockLinearZ).ToString() : "";
            set { if (value != "") { AxisLockLinearZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockLinearZ")] public string _Surrogate_Element_AxisLockLinearZ {
            get => AxisLockLinearZ != null ? ((System.Boolean)AxisLockLinearZ).ToString() : "";
            set { if (value != "") { AxisLockLinearZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockLinearZ { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockAngularX")] public string _Surrogate_Attribute_AxisLockAngularX {
            get => AxisLockAngularX != null ? ((System.Boolean)AxisLockAngularX).ToString() : "";
            set { if (value != "") { AxisLockAngularX = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockAngularX")] public string _Surrogate_Element_AxisLockAngularX {
            get => AxisLockAngularX != null ? ((System.Boolean)AxisLockAngularX).ToString() : "";
            set { if (value != "") { AxisLockAngularX = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockAngularX { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockAngularY")] public string _Surrogate_Attribute_AxisLockAngularY {
            get => AxisLockAngularY != null ? ((System.Boolean)AxisLockAngularY).ToString() : "";
            set { if (value != "") { AxisLockAngularY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockAngularY")] public string _Surrogate_Element_AxisLockAngularY {
            get => AxisLockAngularY != null ? ((System.Boolean)AxisLockAngularY).ToString() : "";
            set { if (value != "") { AxisLockAngularY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockAngularY { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AxisLockAngularZ")] public string _Surrogate_Attribute_AxisLockAngularZ {
            get => AxisLockAngularZ != null ? ((System.Boolean)AxisLockAngularZ).ToString() : "";
            set { if (value != "") { AxisLockAngularZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.AxisLockAngularZ")] public string _Surrogate_Element_AxisLockAngularZ {
            get => AxisLockAngularZ != null ? ((System.Boolean)AxisLockAngularZ).ToString() : "";
            set { if (value != "") { AxisLockAngularZ = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AxisLockAngularZ { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DisableMode")] public string _Surrogate_Attribute_DisableMode {
            get => DisableMode != null ? ((Godot.CollisionObject3D.DisableModeEnum)DisableMode).ToString() : "";
            set { if (value != "") { DisableMode = System.Enum.Parse<Godot.CollisionObject3D.DisableModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.DisableMode")] public string _Surrogate_Element_DisableMode {
            get => DisableMode != null ? ((Godot.CollisionObject3D.DisableModeEnum)DisableMode).ToString() : "";
            set { if (value != "") { DisableMode = System.Enum.Parse<Godot.CollisionObject3D.DisableModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CollisionObject3D.DisableModeEnum? DisableMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionLayer")] public string _Surrogate_Attribute_CollisionLayer {
            get => CollisionLayer != null ? ((System.UInt32)CollisionLayer).ToString() : "";
            set { if (value != "") { CollisionLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CollisionLayer")] public string _Surrogate_Element_CollisionLayer {
            get => CollisionLayer != null ? ((System.UInt32)CollisionLayer).ToString() : "";
            set { if (value != "") { CollisionLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CollisionLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionMask")] public string _Surrogate_Attribute_CollisionMask {
            get => CollisionMask != null ? ((System.UInt32)CollisionMask).ToString() : "";
            set { if (value != "") { CollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CollisionMask")] public string _Surrogate_Element_CollisionMask {
            get => CollisionMask != null ? ((System.UInt32)CollisionMask).ToString() : "";
            set { if (value != "") { CollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CollisionMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionPriority")] public string _Surrogate_Attribute_CollisionPriority {
            get => CollisionPriority != null ? ((System.Single)CollisionPriority).ToString() : "";
            set { if (value != "") { CollisionPriority = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.CollisionPriority")] public string _Surrogate_Element_CollisionPriority {
            get => CollisionPriority != null ? ((System.Single)CollisionPriority).ToString() : "";
            set { if (value != "") { CollisionPriority = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CollisionPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InputRayPickable")] public string _Surrogate_Attribute_InputRayPickable {
            get => InputRayPickable != null ? ((System.Boolean)InputRayPickable).ToString() : "";
            set { if (value != "") { InputRayPickable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.InputRayPickable")] public string _Surrogate_Element_InputRayPickable {
            get => InputRayPickable != null ? ((System.Boolean)InputRayPickable).ToString() : "";
            set { if (value != "") { InputRayPickable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? InputRayPickable { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InputCaptureOnDrag")] public string _Surrogate_Attribute_InputCaptureOnDrag {
            get => InputCaptureOnDrag != null ? ((System.Boolean)InputCaptureOnDrag).ToString() : "";
            set { if (value != "") { InputCaptureOnDrag = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.InputCaptureOnDrag")] public string _Surrogate_Element_InputCaptureOnDrag {
            get => InputCaptureOnDrag != null ? ((System.Boolean)InputCaptureOnDrag).ToString() : "";
            set { if (value != "") { InputCaptureOnDrag = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? InputCaptureOnDrag { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "RigidBody3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Inertia")] public string _Surrogate_Inertia {
            get => Inertia != null ? ((Archwyvern.Nxml.Translators.Vector3)Inertia).ToString() : "";
            set => Inertia = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Inertia;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CenterOfMass")] public string _Surrogate_CenterOfMass {
            get => CenterOfMass != null ? ((Archwyvern.Nxml.Translators.Vector3)CenterOfMass).ToString() : "";
            set => CenterOfMass = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? CenterOfMass;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearVelocity")] public string _Surrogate_LinearVelocity {
            get => LinearVelocity != null ? ((Archwyvern.Nxml.Translators.Vector3)LinearVelocity).ToString() : "";
            set => LinearVelocity = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? LinearVelocity;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocity")] public string _Surrogate_AngularVelocity {
            get => AngularVelocity != null ? ((Archwyvern.Nxml.Translators.Vector3)AngularVelocity).ToString() : "";
            set => AngularVelocity = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? AngularVelocity;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ConstantForce")] public string _Surrogate_ConstantForce {
            get => ConstantForce != null ? ((Archwyvern.Nxml.Translators.Vector3)ConstantForce).ToString() : "";
            set => ConstantForce = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? ConstantForce;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ConstantTorque")] public string _Surrogate_ConstantTorque {
            get => ConstantTorque != null ? ((Archwyvern.Nxml.Translators.Vector3)ConstantTorque).ToString() : "";
            set => ConstantTorque = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? ConstantTorque;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.RigidBody3D) return alt;
            var obj = (Godot.RigidBody3D)alt ?? new Godot.RigidBody3D();

            // Attributes
            if (Mass != null) obj.Mass = (System.Single)Mass;
            if (CenterOfMassMode != null) obj.CenterOfMassMode = (Godot.RigidBody3D.CenterOfMassModeEnum)CenterOfMassMode;
            if (GravityScale != null) obj.GravityScale = (System.Single)GravityScale;
            if (CustomIntegrator != null) obj.CustomIntegrator = (System.Boolean)CustomIntegrator;
            if (ContinuousCd != null) obj.ContinuousCd = (System.Boolean)ContinuousCd;
            if (MaxContactsReported != null) obj.MaxContactsReported = (System.Int32)MaxContactsReported;
            if (ContactMonitor != null) obj.ContactMonitor = (System.Boolean)ContactMonitor;
            if (Sleeping != null) obj.Sleeping = (System.Boolean)Sleeping;
            if (CanSleep != null) obj.CanSleep = (System.Boolean)CanSleep;
            if (LockRotation != null) obj.LockRotation = (System.Boolean)LockRotation;
            if (Freeze != null) obj.Freeze = (System.Boolean)Freeze;
            if (FreezeMode != null) obj.FreezeMode = (Godot.RigidBody3D.FreezeModeEnum)FreezeMode;
            if (LinearDampMode != null) obj.LinearDampMode = (Godot.RigidBody3D.DampMode)LinearDampMode;
            if (LinearDamp != null) obj.LinearDamp = (System.Single)LinearDamp;
            if (AngularDampMode != null) obj.AngularDampMode = (Godot.RigidBody3D.DampMode)AngularDampMode;
            if (AngularDamp != null) obj.AngularDamp = (System.Single)AngularDamp;
            if (AxisLockLinearX != null) obj.AxisLockLinearX = (System.Boolean)AxisLockLinearX;
            if (AxisLockLinearY != null) obj.AxisLockLinearY = (System.Boolean)AxisLockLinearY;
            if (AxisLockLinearZ != null) obj.AxisLockLinearZ = (System.Boolean)AxisLockLinearZ;
            if (AxisLockAngularX != null) obj.AxisLockAngularX = (System.Boolean)AxisLockAngularX;
            if (AxisLockAngularY != null) obj.AxisLockAngularY = (System.Boolean)AxisLockAngularY;
            if (AxisLockAngularZ != null) obj.AxisLockAngularZ = (System.Boolean)AxisLockAngularZ;
            if (DisableMode != null) obj.DisableMode = (Godot.CollisionObject3D.DisableModeEnum)DisableMode;
            if (CollisionLayer != null) obj.CollisionLayer = (System.UInt32)CollisionLayer;
            if (CollisionMask != null) obj.CollisionMask = (System.UInt32)CollisionMask;
            if (CollisionPriority != null) obj.CollisionPriority = (System.Single)CollisionPriority;
            if (InputRayPickable != null) obj.InputRayPickable = (System.Boolean)InputRayPickable;
            if (InputCaptureOnDrag != null) obj.InputCaptureOnDrag = (System.Boolean)InputCaptureOnDrag;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Inertia != null) obj.Inertia = (Archwyvern.Nxml.Translators.Vector3)Inertia;
            if (CenterOfMass != null) obj.CenterOfMass = (Archwyvern.Nxml.Translators.Vector3)CenterOfMass;
            if (LinearVelocity != null) obj.LinearVelocity = (Archwyvern.Nxml.Translators.Vector3)LinearVelocity;
            if (AngularVelocity != null) obj.AngularVelocity = (Archwyvern.Nxml.Translators.Vector3)AngularVelocity;
            if (ConstantForce != null) obj.ConstantForce = (Archwyvern.Nxml.Translators.Vector3)ConstantForce;
            if (ConstantTorque != null) obj.ConstantTorque = (Archwyvern.Nxml.Translators.Vector3)ConstantTorque;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (PhysicsMaterialOverride != null) {
                if (((IResourceTag)PhysicsMaterialOverride).ResourcePath != null) {
                    obj.PhysicsMaterialOverride = (Godot.PhysicsMaterial)PhysicsMaterialOverride.Generate(Godot.GD.Load<Godot.PhysicsMaterial>(((IResourceTag)PhysicsMaterialOverride).ResourcePath));
                } else {
                    obj.PhysicsMaterialOverride = (Godot.PhysicsMaterial)PhysicsMaterialOverride.Generate();
                }
            }

            return obj;
        }
    }
}
