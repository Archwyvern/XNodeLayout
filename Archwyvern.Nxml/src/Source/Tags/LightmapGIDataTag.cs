// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "LightmapGIData", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class LightmapGIDataTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "LightmapGIData.ElementProperty.LightTexture")] public class LightTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemap", Type = typeof(CompressedCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemapArray", Type = typeof(CompressedCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2DArray", Type = typeof(CompressedTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Cubemap", Type = typeof(CubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CubemapArray", Type = typeof(CubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemap", Type = typeof(PlaceholderCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemapArray", Type = typeof(PlaceholderCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2DArray", Type = typeof(PlaceholderTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2DArray", Type = typeof(Texture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TextureLayered", Type = typeof(TextureLayeredTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? LightTexture => _Surrogate_Element_LightTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "LightmapGIData.LightTexture")] public LightmapGIDataTag.ElementProperty.LightTexture? _Surrogate_Element_LightTexture;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UsesSphericalHarmonics")] public string _Surrogate_Attribute_UsesSphericalHarmonics {
            get => UsesSphericalHarmonics != null ? ((System.Boolean)UsesSphericalHarmonics).ToString() : "";
            set { if (value != "") { UsesSphericalHarmonics = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "LightmapGIData.UsesSphericalHarmonics")] public string _Surrogate_Element_UsesSphericalHarmonics {
            get => UsesSphericalHarmonics != null ? ((System.Boolean)UsesSphericalHarmonics).ToString() : "";
            set { if (value != "") { UsesSphericalHarmonics = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UsesSphericalHarmonics { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "LightmapGIData.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "LightmapGIData.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "LightmapGIData.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.LightmapGIData) return alt;
            var obj = (Godot.LightmapGIData)alt ?? new Godot.LightmapGIData();

            // Attributes
            if (UsesSphericalHarmonics != null) obj.UsesSphericalHarmonics = (System.Boolean)UsesSphericalHarmonics;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (LightTexture != null) {
                if (((IResourceTag)LightTexture).ResourcePath != null) {
                    obj.LightTexture = (Godot.TextureLayered)LightTexture.Generate(Godot.GD.Load<Godot.TextureLayered>(((IResourceTag)LightTexture).ResourcePath));
                } else {
                    obj.LightTexture = (Godot.TextureLayered)LightTexture.Generate();
                }
            }

            return obj;
        }
    }
}
