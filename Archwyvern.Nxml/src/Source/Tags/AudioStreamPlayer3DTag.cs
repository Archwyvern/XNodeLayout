// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AudioStreamPlayer3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AudioStreamPlayer3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "AudioStreamPlayer3D.ElementProperty.Stream")] public class Stream
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStream", Type = typeof(AudioStreamTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamGenerator", Type = typeof(AudioStreamGeneratorTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamMP3", Type = typeof(AudioStreamMP3Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamMicrophone", Type = typeof(AudioStreamMicrophoneTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamOggVorbis", Type = typeof(AudioStreamOggVorbisTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPolyphonic", Type = typeof(AudioStreamPolyphonicTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer", Type = typeof(AudioStreamRandomizerTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav", Type = typeof(AudioStreamWavTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Stream => _Surrogate_Element_Stream?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.Stream")] public AudioStreamPlayer3DTag.ElementProperty.Stream? _Surrogate_Element_Stream;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AttenuationModel")] public string _Surrogate_Attribute_AttenuationModel {
            get => AttenuationModel != null ? ((Godot.AudioStreamPlayer3D.AttenuationModelEnum)AttenuationModel).ToString() : "";
            set { if (value != "") { AttenuationModel = System.Enum.Parse<Godot.AudioStreamPlayer3D.AttenuationModelEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.AttenuationModel")] public string _Surrogate_Element_AttenuationModel {
            get => AttenuationModel != null ? ((Godot.AudioStreamPlayer3D.AttenuationModelEnum)AttenuationModel).ToString() : "";
            set { if (value != "") { AttenuationModel = System.Enum.Parse<Godot.AudioStreamPlayer3D.AttenuationModelEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamPlayer3D.AttenuationModelEnum? AttenuationModel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumeDb")] public string _Surrogate_Attribute_VolumeDb {
            get => VolumeDb != null ? ((System.Single)VolumeDb).ToString() : "";
            set { if (value != "") { VolumeDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.VolumeDb")] public string _Surrogate_Element_VolumeDb {
            get => VolumeDb != null ? ((System.Single)VolumeDb).ToString() : "";
            set { if (value != "") { VolumeDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumeDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UnitSize")] public string _Surrogate_Attribute_UnitSize {
            get => UnitSize != null ? ((System.Single)UnitSize).ToString() : "";
            set { if (value != "") { UnitSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.UnitSize")] public string _Surrogate_Element_UnitSize {
            get => UnitSize != null ? ((System.Single)UnitSize).ToString() : "";
            set { if (value != "") { UnitSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? UnitSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxDb")] public string _Surrogate_Attribute_MaxDb {
            get => MaxDb != null ? ((System.Single)MaxDb).ToString() : "";
            set { if (value != "") { MaxDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.MaxDb")] public string _Surrogate_Element_MaxDb {
            get => MaxDb != null ? ((System.Single)MaxDb).ToString() : "";
            set { if (value != "") { MaxDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MaxDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PitchScale")] public string _Surrogate_Attribute_PitchScale {
            get => PitchScale != null ? ((System.Single)PitchScale).ToString() : "";
            set { if (value != "") { PitchScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.PitchScale")] public string _Surrogate_Element_PitchScale {
            get => PitchScale != null ? ((System.Single)PitchScale).ToString() : "";
            set { if (value != "") { PitchScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PitchScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Playing")] public string _Surrogate_Attribute_Playing {
            get => Playing != null ? ((System.Boolean)Playing).ToString() : "";
            set { if (value != "") { Playing = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.Playing")] public string _Surrogate_Element_Playing {
            get => Playing != null ? ((System.Boolean)Playing).ToString() : "";
            set { if (value != "") { Playing = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Playing { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Autoplay")] public string _Surrogate_Attribute_Autoplay {
            get => Autoplay != null ? ((System.Boolean)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.Autoplay")] public string _Surrogate_Element_Autoplay {
            get => Autoplay != null ? ((System.Boolean)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Autoplay { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StreamPaused")] public string _Surrogate_Attribute_StreamPaused {
            get => StreamPaused != null ? ((System.Boolean)StreamPaused).ToString() : "";
            set { if (value != "") { StreamPaused = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.StreamPaused")] public string _Surrogate_Element_StreamPaused {
            get => StreamPaused != null ? ((System.Boolean)StreamPaused).ToString() : "";
            set { if (value != "") { StreamPaused = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? StreamPaused { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxDistance")] public string _Surrogate_Attribute_MaxDistance {
            get => MaxDistance != null ? ((System.Single)MaxDistance).ToString() : "";
            set { if (value != "") { MaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.MaxDistance")] public string _Surrogate_Element_MaxDistance {
            get => MaxDistance != null ? ((System.Single)MaxDistance).ToString() : "";
            set { if (value != "") { MaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MaxDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxPolyphony")] public string _Surrogate_Attribute_MaxPolyphony {
            get => MaxPolyphony != null ? ((System.Int32)MaxPolyphony).ToString() : "";
            set { if (value != "") { MaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.MaxPolyphony")] public string _Surrogate_Element_MaxPolyphony {
            get => MaxPolyphony != null ? ((System.Int32)MaxPolyphony).ToString() : "";
            set { if (value != "") { MaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MaxPolyphony { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PanningStrength")] public string _Surrogate_Attribute_PanningStrength {
            get => PanningStrength != null ? ((System.Single)PanningStrength).ToString() : "";
            set { if (value != "") { PanningStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.PanningStrength")] public string _Surrogate_Element_PanningStrength {
            get => PanningStrength != null ? ((System.Single)PanningStrength).ToString() : "";
            set { if (value != "") { PanningStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PanningStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AreaMask")] public string _Surrogate_Attribute_AreaMask {
            get => AreaMask != null ? ((System.UInt32)AreaMask).ToString() : "";
            set { if (value != "") { AreaMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.AreaMask")] public string _Surrogate_Element_AreaMask {
            get => AreaMask != null ? ((System.UInt32)AreaMask).ToString() : "";
            set { if (value != "") { AreaMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? AreaMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionAngleEnabled")] public string _Surrogate_Attribute_EmissionAngleEnabled {
            get => EmissionAngleEnabled != null ? ((System.Boolean)EmissionAngleEnabled).ToString() : "";
            set { if (value != "") { EmissionAngleEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.EmissionAngleEnabled")] public string _Surrogate_Element_EmissionAngleEnabled {
            get => EmissionAngleEnabled != null ? ((System.Boolean)EmissionAngleEnabled).ToString() : "";
            set { if (value != "") { EmissionAngleEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EmissionAngleEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionAngleDegrees")] public string _Surrogate_Attribute_EmissionAngleDegrees {
            get => EmissionAngleDegrees != null ? ((System.Single)EmissionAngleDegrees).ToString() : "";
            set { if (value != "") { EmissionAngleDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.EmissionAngleDegrees")] public string _Surrogate_Element_EmissionAngleDegrees {
            get => EmissionAngleDegrees != null ? ((System.Single)EmissionAngleDegrees).ToString() : "";
            set { if (value != "") { EmissionAngleDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionAngleDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionAngleFilterAttenuationDb")] public string _Surrogate_Attribute_EmissionAngleFilterAttenuationDb {
            get => EmissionAngleFilterAttenuationDb != null ? ((System.Single)EmissionAngleFilterAttenuationDb).ToString() : "";
            set { if (value != "") { EmissionAngleFilterAttenuationDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.EmissionAngleFilterAttenuationDb")] public string _Surrogate_Element_EmissionAngleFilterAttenuationDb {
            get => EmissionAngleFilterAttenuationDb != null ? ((System.Single)EmissionAngleFilterAttenuationDb).ToString() : "";
            set { if (value != "") { EmissionAngleFilterAttenuationDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionAngleFilterAttenuationDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AttenuationFilterCutoffHz")] public string _Surrogate_Attribute_AttenuationFilterCutoffHz {
            get => AttenuationFilterCutoffHz != null ? ((System.Single)AttenuationFilterCutoffHz).ToString() : "";
            set { if (value != "") { AttenuationFilterCutoffHz = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.AttenuationFilterCutoffHz")] public string _Surrogate_Element_AttenuationFilterCutoffHz {
            get => AttenuationFilterCutoffHz != null ? ((System.Single)AttenuationFilterCutoffHz).ToString() : "";
            set { if (value != "") { AttenuationFilterCutoffHz = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AttenuationFilterCutoffHz { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AttenuationFilterDb")] public string _Surrogate_Attribute_AttenuationFilterDb {
            get => AttenuationFilterDb != null ? ((System.Single)AttenuationFilterDb).ToString() : "";
            set { if (value != "") { AttenuationFilterDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.AttenuationFilterDb")] public string _Surrogate_Element_AttenuationFilterDb {
            get => AttenuationFilterDb != null ? ((System.Single)AttenuationFilterDb).ToString() : "";
            set { if (value != "") { AttenuationFilterDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AttenuationFilterDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DopplerTracking")] public string _Surrogate_Attribute_DopplerTracking {
            get => DopplerTracking != null ? ((Godot.AudioStreamPlayer3D.DopplerTrackingEnum)DopplerTracking).ToString() : "";
            set { if (value != "") { DopplerTracking = System.Enum.Parse<Godot.AudioStreamPlayer3D.DopplerTrackingEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.DopplerTracking")] public string _Surrogate_Element_DopplerTracking {
            get => DopplerTracking != null ? ((Godot.AudioStreamPlayer3D.DopplerTrackingEnum)DopplerTracking).ToString() : "";
            set { if (value != "") { DopplerTracking = System.Enum.Parse<Godot.AudioStreamPlayer3D.DopplerTrackingEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamPlayer3D.DopplerTrackingEnum? DopplerTracking { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Bus")] public string _Surrogate_Bus {
            get => Bus != null ? ((Archwyvern.Nxml.Translators.StringName)Bus).ToString() : "";
            set => Bus = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Bus;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AudioStreamPlayer3D) return alt;
            var obj = (Godot.AudioStreamPlayer3D)alt ?? new Godot.AudioStreamPlayer3D();

            // Attributes
            if (AttenuationModel != null) obj.AttenuationModel = (Godot.AudioStreamPlayer3D.AttenuationModelEnum)AttenuationModel;
            if (VolumeDb != null) obj.VolumeDb = (System.Single)VolumeDb;
            if (UnitSize != null) obj.UnitSize = (System.Single)UnitSize;
            if (MaxDb != null) obj.MaxDb = (System.Single)MaxDb;
            if (PitchScale != null) obj.PitchScale = (System.Single)PitchScale;
            if (Playing != null) obj.Playing = (System.Boolean)Playing;
            if (Autoplay != null) obj.Autoplay = (System.Boolean)Autoplay;
            if (StreamPaused != null) obj.StreamPaused = (System.Boolean)StreamPaused;
            if (MaxDistance != null) obj.MaxDistance = (System.Single)MaxDistance;
            if (MaxPolyphony != null) obj.MaxPolyphony = (System.Int32)MaxPolyphony;
            if (PanningStrength != null) obj.PanningStrength = (System.Single)PanningStrength;
            if (AreaMask != null) obj.AreaMask = (System.UInt32)AreaMask;
            if (EmissionAngleEnabled != null) obj.EmissionAngleEnabled = (System.Boolean)EmissionAngleEnabled;
            if (EmissionAngleDegrees != null) obj.EmissionAngleDegrees = (System.Single)EmissionAngleDegrees;
            if (EmissionAngleFilterAttenuationDb != null) obj.EmissionAngleFilterAttenuationDb = (System.Single)EmissionAngleFilterAttenuationDb;
            if (AttenuationFilterCutoffHz != null) obj.AttenuationFilterCutoffHz = (System.Single)AttenuationFilterCutoffHz;
            if (AttenuationFilterDb != null) obj.AttenuationFilterDb = (System.Single)AttenuationFilterDb;
            if (DopplerTracking != null) obj.DopplerTracking = (Godot.AudioStreamPlayer3D.DopplerTrackingEnum)DopplerTracking;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Bus != null) obj.Bus = (Archwyvern.Nxml.Translators.StringName)Bus;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Stream != null) {
                if (((IResourceTag)Stream).ResourcePath != null) {
                    obj.Stream = (Godot.AudioStream)Stream.Generate(Godot.GD.Load<Godot.AudioStream>(((IResourceTag)Stream).ResourcePath));
                } else {
                    obj.Stream = (Godot.AudioStream)Stream.Generate();
                }
            }

            return obj;
        }
    }
}
