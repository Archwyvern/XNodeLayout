// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AudioStreamPlayer", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AudioStreamPlayerTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "AudioStreamPlayer.ElementProperty.Stream")] public class Stream
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStream", Type = typeof(AudioStreamTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamGenerator", Type = typeof(AudioStreamGeneratorTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamMP3", Type = typeof(AudioStreamMP3Tag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamMicrophone", Type = typeof(AudioStreamMicrophoneTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamOggVorbis", Type = typeof(AudioStreamOggVorbisTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPolyphonic", Type = typeof(AudioStreamPolyphonicTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer", Type = typeof(AudioStreamRandomizerTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav", Type = typeof(AudioStreamWavTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Stream => _Surrogate_Element_Stream?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.Stream")] public AudioStreamPlayerTag.ElementProperty.Stream? _Surrogate_Element_Stream;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumeDb")] public string _Surrogate_Attribute_VolumeDb {
            get => VolumeDb != null ? ((System.Single)VolumeDb).ToString() : "";
            set { if (value != "") { VolumeDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.VolumeDb")] public string _Surrogate_Element_VolumeDb {
            get => VolumeDb != null ? ((System.Single)VolumeDb).ToString() : "";
            set { if (value != "") { VolumeDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumeDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PitchScale")] public string _Surrogate_Attribute_PitchScale {
            get => PitchScale != null ? ((System.Single)PitchScale).ToString() : "";
            set { if (value != "") { PitchScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.PitchScale")] public string _Surrogate_Element_PitchScale {
            get => PitchScale != null ? ((System.Single)PitchScale).ToString() : "";
            set { if (value != "") { PitchScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PitchScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Playing")] public string _Surrogate_Attribute_Playing {
            get => Playing != null ? ((System.Boolean)Playing).ToString() : "";
            set { if (value != "") { Playing = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.Playing")] public string _Surrogate_Element_Playing {
            get => Playing != null ? ((System.Boolean)Playing).ToString() : "";
            set { if (value != "") { Playing = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Playing { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Autoplay")] public string _Surrogate_Attribute_Autoplay {
            get => Autoplay != null ? ((System.Boolean)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.Autoplay")] public string _Surrogate_Element_Autoplay {
            get => Autoplay != null ? ((System.Boolean)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Autoplay { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StreamPaused")] public string _Surrogate_Attribute_StreamPaused {
            get => StreamPaused != null ? ((System.Boolean)StreamPaused).ToString() : "";
            set { if (value != "") { StreamPaused = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.StreamPaused")] public string _Surrogate_Element_StreamPaused {
            get => StreamPaused != null ? ((System.Boolean)StreamPaused).ToString() : "";
            set { if (value != "") { StreamPaused = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? StreamPaused { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MixTarget")] public string _Surrogate_Attribute_MixTarget {
            get => MixTarget != null ? ((Godot.AudioStreamPlayer.MixTargetEnum)MixTarget).ToString() : "";
            set { if (value != "") { MixTarget = System.Enum.Parse<Godot.AudioStreamPlayer.MixTargetEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.MixTarget")] public string _Surrogate_Element_MixTarget {
            get => MixTarget != null ? ((Godot.AudioStreamPlayer.MixTargetEnum)MixTarget).ToString() : "";
            set { if (value != "") { MixTarget = System.Enum.Parse<Godot.AudioStreamPlayer.MixTargetEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamPlayer.MixTargetEnum? MixTarget { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxPolyphony")] public string _Surrogate_Attribute_MaxPolyphony {
            get => MaxPolyphony != null ? ((System.Int32)MaxPolyphony).ToString() : "";
            set { if (value != "") { MaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.MaxPolyphony")] public string _Surrogate_Element_MaxPolyphony {
            get => MaxPolyphony != null ? ((System.Int32)MaxPolyphony).ToString() : "";
            set { if (value != "") { MaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MaxPolyphony { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamPlayer.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Bus")] public string _Surrogate_Bus {
            get => Bus != null ? ((Archwyvern.Nxml.Translators.StringName)Bus).ToString() : "";
            set => Bus = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Bus;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AudioStreamPlayer) return alt;
            var obj = (Godot.AudioStreamPlayer)alt ?? new Godot.AudioStreamPlayer();

            // Attributes
            if (VolumeDb != null) obj.VolumeDb = (System.Single)VolumeDb;
            if (PitchScale != null) obj.PitchScale = (System.Single)PitchScale;
            if (Playing != null) obj.Playing = (System.Boolean)Playing;
            if (Autoplay != null) obj.Autoplay = (System.Boolean)Autoplay;
            if (StreamPaused != null) obj.StreamPaused = (System.Boolean)StreamPaused;
            if (MixTarget != null) obj.MixTarget = (Godot.AudioStreamPlayer.MixTargetEnum)MixTarget;
            if (MaxPolyphony != null) obj.MaxPolyphony = (System.Int32)MaxPolyphony;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Bus != null) obj.Bus = (Archwyvern.Nxml.Translators.StringName)Bus;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Stream != null) {
                if (((IResourceTag)Stream).ResourcePath != null) {
                    obj.Stream = (Godot.AudioStream)Stream.Generate(Godot.GD.Load<Godot.AudioStream>(((IResourceTag)Stream).ResourcePath));
                } else {
                    obj.Stream = (Godot.AudioStream)Stream.Generate();
                }
            }

            return obj;
        }
    }
}
