// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "CpuParticles2D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class CpuParticles2DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.Texture")] public class Texture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.AngularVelocityCurve")] public class AngularVelocityCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.OrbitVelocityCurve")] public class OrbitVelocityCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.LinearAccelCurve")] public class LinearAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.RadialAccelCurve")] public class RadialAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.TangentialAccelCurve")] public class TangentialAccelCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.DampingCurve")] public class DampingCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.AngleCurve")] public class AngleCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.ScaleAmountCurve")] public class ScaleAmountCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.ScaleCurveX")] public class ScaleCurveX
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.ScaleCurveY")] public class ScaleCurveY
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.ColorRamp")] public class ColorRamp
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Gradient", Type = typeof(GradientTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.ColorInitialRamp")] public class ColorInitialRamp
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Gradient", Type = typeof(GradientTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.HueVariationCurve")] public class HueVariationCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.AnimSpeedCurve")] public class AnimSpeedCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.AnimOffsetCurve")] public class AnimOffsetCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "CpuParticles2D.ElementProperty.Material")] public class Material
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Texture => _Surrogate_Element_Texture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Texture")] public CpuParticles2DTag.ElementProperty.Texture? _Surrogate_Element_Texture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AngularVelocityCurve => _Surrogate_Element_AngularVelocityCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngularVelocityCurve")] public CpuParticles2DTag.ElementProperty.AngularVelocityCurve? _Surrogate_Element_AngularVelocityCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? OrbitVelocityCurve => _Surrogate_Element_OrbitVelocityCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.OrbitVelocityCurve")] public CpuParticles2DTag.ElementProperty.OrbitVelocityCurve? _Surrogate_Element_OrbitVelocityCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? LinearAccelCurve => _Surrogate_Element_LinearAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LinearAccelCurve")] public CpuParticles2DTag.ElementProperty.LinearAccelCurve? _Surrogate_Element_LinearAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? RadialAccelCurve => _Surrogate_Element_RadialAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.RadialAccelCurve")] public CpuParticles2DTag.ElementProperty.RadialAccelCurve? _Surrogate_Element_RadialAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? TangentialAccelCurve => _Surrogate_Element_TangentialAccelCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TangentialAccelCurve")] public CpuParticles2DTag.ElementProperty.TangentialAccelCurve? _Surrogate_Element_TangentialAccelCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DampingCurve => _Surrogate_Element_DampingCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.DampingCurve")] public CpuParticles2DTag.ElementProperty.DampingCurve? _Surrogate_Element_DampingCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AngleCurve => _Surrogate_Element_AngleCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngleCurve")] public CpuParticles2DTag.ElementProperty.AngleCurve? _Surrogate_Element_AngleCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ScaleAmountCurve => _Surrogate_Element_ScaleAmountCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ScaleAmountCurve")] public CpuParticles2DTag.ElementProperty.ScaleAmountCurve? _Surrogate_Element_ScaleAmountCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ScaleCurveX => _Surrogate_Element_ScaleCurveX?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ScaleCurveX")] public CpuParticles2DTag.ElementProperty.ScaleCurveX? _Surrogate_Element_ScaleCurveX;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ScaleCurveY => _Surrogate_Element_ScaleCurveY?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ScaleCurveY")] public CpuParticles2DTag.ElementProperty.ScaleCurveY? _Surrogate_Element_ScaleCurveY;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ColorRamp => _Surrogate_Element_ColorRamp?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ColorRamp")] public CpuParticles2DTag.ElementProperty.ColorRamp? _Surrogate_Element_ColorRamp;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ColorInitialRamp => _Surrogate_Element_ColorInitialRamp?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ColorInitialRamp")] public CpuParticles2DTag.ElementProperty.ColorInitialRamp? _Surrogate_Element_ColorInitialRamp;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? HueVariationCurve => _Surrogate_Element_HueVariationCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.HueVariationCurve")] public CpuParticles2DTag.ElementProperty.HueVariationCurve? _Surrogate_Element_HueVariationCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AnimSpeedCurve => _Surrogate_Element_AnimSpeedCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimSpeedCurve")] public CpuParticles2DTag.ElementProperty.AnimSpeedCurve? _Surrogate_Element_AnimSpeedCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AnimOffsetCurve => _Surrogate_Element_AnimOffsetCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimOffsetCurve")] public CpuParticles2DTag.ElementProperty.AnimOffsetCurve? _Surrogate_Element_AnimOffsetCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Material => _Surrogate_Element_Material?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Material")] public CpuParticles2DTag.ElementProperty.Material? _Surrogate_Element_Material;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Emitting")] public string _Surrogate_Attribute_Emitting {
            get => Emitting != null ? ((System.Boolean)Emitting).ToString() : "";
            set { if (value != "") { Emitting = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Emitting")] public string _Surrogate_Element_Emitting {
            get => Emitting != null ? ((System.Boolean)Emitting).ToString() : "";
            set { if (value != "") { Emitting = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Emitting { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Amount")] public string _Surrogate_Attribute_Amount {
            get => Amount != null ? ((System.Int32)Amount).ToString() : "";
            set { if (value != "") { Amount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Amount")] public string _Surrogate_Element_Amount {
            get => Amount != null ? ((System.Int32)Amount).ToString() : "";
            set { if (value != "") { Amount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? Amount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Lifetime")] public string _Surrogate_Attribute_Lifetime {
            get => Lifetime != null ? ((System.Double)Lifetime).ToString() : "";
            set { if (value != "") { Lifetime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Lifetime")] public string _Surrogate_Element_Lifetime {
            get => Lifetime != null ? ((System.Double)Lifetime).ToString() : "";
            set { if (value != "") { Lifetime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? Lifetime { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OneShot")] public string _Surrogate_Attribute_OneShot {
            get => OneShot != null ? ((System.Boolean)OneShot).ToString() : "";
            set { if (value != "") { OneShot = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.OneShot")] public string _Surrogate_Element_OneShot {
            get => OneShot != null ? ((System.Boolean)OneShot).ToString() : "";
            set { if (value != "") { OneShot = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? OneShot { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Preprocess")] public string _Surrogate_Attribute_Preprocess {
            get => Preprocess != null ? ((System.Double)Preprocess).ToString() : "";
            set { if (value != "") { Preprocess = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Preprocess")] public string _Surrogate_Element_Preprocess {
            get => Preprocess != null ? ((System.Double)Preprocess).ToString() : "";
            set { if (value != "") { Preprocess = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? Preprocess { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpeedScale")] public string _Surrogate_Attribute_SpeedScale {
            get => SpeedScale != null ? ((System.Double)SpeedScale).ToString() : "";
            set { if (value != "") { SpeedScale = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.SpeedScale")] public string _Surrogate_Element_SpeedScale {
            get => SpeedScale != null ? ((System.Double)SpeedScale).ToString() : "";
            set { if (value != "") { SpeedScale = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? SpeedScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Explosiveness")] public string _Surrogate_Attribute_Explosiveness {
            get => Explosiveness != null ? ((System.Single)Explosiveness).ToString() : "";
            set { if (value != "") { Explosiveness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Explosiveness")] public string _Surrogate_Element_Explosiveness {
            get => Explosiveness != null ? ((System.Single)Explosiveness).ToString() : "";
            set { if (value != "") { Explosiveness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Explosiveness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Randomness")] public string _Surrogate_Attribute_Randomness {
            get => Randomness != null ? ((System.Single)Randomness).ToString() : "";
            set { if (value != "") { Randomness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Randomness")] public string _Surrogate_Element_Randomness {
            get => Randomness != null ? ((System.Single)Randomness).ToString() : "";
            set { if (value != "") { Randomness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Randomness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LifetimeRandomness")] public string _Surrogate_Attribute_LifetimeRandomness {
            get => LifetimeRandomness != null ? ((System.Double)LifetimeRandomness).ToString() : "";
            set { if (value != "") { LifetimeRandomness = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LifetimeRandomness")] public string _Surrogate_Element_LifetimeRandomness {
            get => LifetimeRandomness != null ? ((System.Double)LifetimeRandomness).ToString() : "";
            set { if (value != "") { LifetimeRandomness = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? LifetimeRandomness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FixedFps")] public string _Surrogate_Attribute_FixedFps {
            get => FixedFps != null ? ((System.Int32)FixedFps).ToString() : "";
            set { if (value != "") { FixedFps = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.FixedFps")] public string _Surrogate_Element_FixedFps {
            get => FixedFps != null ? ((System.Int32)FixedFps).ToString() : "";
            set { if (value != "") { FixedFps = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FixedFps { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FractDelta")] public string _Surrogate_Attribute_FractDelta {
            get => FractDelta != null ? ((System.Boolean)FractDelta).ToString() : "";
            set { if (value != "") { FractDelta = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.FractDelta")] public string _Surrogate_Element_FractDelta {
            get => FractDelta != null ? ((System.Boolean)FractDelta).ToString() : "";
            set { if (value != "") { FractDelta = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FractDelta { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LocalCoords")] public string _Surrogate_Attribute_LocalCoords {
            get => LocalCoords != null ? ((System.Boolean)LocalCoords).ToString() : "";
            set { if (value != "") { LocalCoords = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LocalCoords")] public string _Surrogate_Element_LocalCoords {
            get => LocalCoords != null ? ((System.Boolean)LocalCoords).ToString() : "";
            set { if (value != "") { LocalCoords = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LocalCoords { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DrawOrder")] public string _Surrogate_Attribute_DrawOrder {
            get => DrawOrder != null ? ((Godot.CpuParticles2D.DrawOrderEnum)DrawOrder).ToString() : "";
            set { if (value != "") { DrawOrder = System.Enum.Parse<Godot.CpuParticles2D.DrawOrderEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.DrawOrder")] public string _Surrogate_Element_DrawOrder {
            get => DrawOrder != null ? ((Godot.CpuParticles2D.DrawOrderEnum)DrawOrder).ToString() : "";
            set { if (value != "") { DrawOrder = System.Enum.Parse<Godot.CpuParticles2D.DrawOrderEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CpuParticles2D.DrawOrderEnum? DrawOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionShape")] public string _Surrogate_Attribute_EmissionShape {
            get => EmissionShape != null ? ((Godot.CpuParticles2D.EmissionShapeEnum)EmissionShape).ToString() : "";
            set { if (value != "") { EmissionShape = System.Enum.Parse<Godot.CpuParticles2D.EmissionShapeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.EmissionShape")] public string _Surrogate_Element_EmissionShape {
            get => EmissionShape != null ? ((Godot.CpuParticles2D.EmissionShapeEnum)EmissionShape).ToString() : "";
            set { if (value != "") { EmissionShape = System.Enum.Parse<Godot.CpuParticles2D.EmissionShapeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CpuParticles2D.EmissionShapeEnum? EmissionShape { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionSphereRadius")] public string _Surrogate_Attribute_EmissionSphereRadius {
            get => EmissionSphereRadius != null ? ((System.Single)EmissionSphereRadius).ToString() : "";
            set { if (value != "") { EmissionSphereRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.EmissionSphereRadius")] public string _Surrogate_Element_EmissionSphereRadius {
            get => EmissionSphereRadius != null ? ((System.Single)EmissionSphereRadius).ToString() : "";
            set { if (value != "") { EmissionSphereRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionSphereRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticleFlagAlignY")] public string _Surrogate_Attribute_ParticleFlagAlignY {
            get => ParticleFlagAlignY != null ? ((System.Boolean)ParticleFlagAlignY).ToString() : "";
            set { if (value != "") { ParticleFlagAlignY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ParticleFlagAlignY")] public string _Surrogate_Element_ParticleFlagAlignY {
            get => ParticleFlagAlignY != null ? ((System.Boolean)ParticleFlagAlignY).ToString() : "";
            set { if (value != "") { ParticleFlagAlignY = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ParticleFlagAlignY { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Spread")] public string _Surrogate_Attribute_Spread {
            get => Spread != null ? ((System.Single)Spread).ToString() : "";
            set { if (value != "") { Spread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Spread")] public string _Surrogate_Element_Spread {
            get => Spread != null ? ((System.Single)Spread).ToString() : "";
            set { if (value != "") { Spread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Spread { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InitialVelocityMin")] public string _Surrogate_Attribute_InitialVelocityMin {
            get => InitialVelocityMin != null ? ((System.Single)InitialVelocityMin).ToString() : "";
            set { if (value != "") { InitialVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.InitialVelocityMin")] public string _Surrogate_Element_InitialVelocityMin {
            get => InitialVelocityMin != null ? ((System.Single)InitialVelocityMin).ToString() : "";
            set { if (value != "") { InitialVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? InitialVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InitialVelocityMax")] public string _Surrogate_Attribute_InitialVelocityMax {
            get => InitialVelocityMax != null ? ((System.Single)InitialVelocityMax).ToString() : "";
            set { if (value != "") { InitialVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.InitialVelocityMax")] public string _Surrogate_Element_InitialVelocityMax {
            get => InitialVelocityMax != null ? ((System.Single)InitialVelocityMax).ToString() : "";
            set { if (value != "") { InitialVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? InitialVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocityMin")] public string _Surrogate_Attribute_AngularVelocityMin {
            get => AngularVelocityMin != null ? ((System.Single)AngularVelocityMin).ToString() : "";
            set { if (value != "") { AngularVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngularVelocityMin")] public string _Surrogate_Element_AngularVelocityMin {
            get => AngularVelocityMin != null ? ((System.Single)AngularVelocityMin).ToString() : "";
            set { if (value != "") { AngularVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocityMax")] public string _Surrogate_Attribute_AngularVelocityMax {
            get => AngularVelocityMax != null ? ((System.Single)AngularVelocityMax).ToString() : "";
            set { if (value != "") { AngularVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngularVelocityMax")] public string _Surrogate_Element_AngularVelocityMax {
            get => AngularVelocityMax != null ? ((System.Single)AngularVelocityMax).ToString() : "";
            set { if (value != "") { AngularVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OrbitVelocityMin")] public string _Surrogate_Attribute_OrbitVelocityMin {
            get => OrbitVelocityMin != null ? ((System.Single)OrbitVelocityMin).ToString() : "";
            set { if (value != "") { OrbitVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.OrbitVelocityMin")] public string _Surrogate_Element_OrbitVelocityMin {
            get => OrbitVelocityMin != null ? ((System.Single)OrbitVelocityMin).ToString() : "";
            set { if (value != "") { OrbitVelocityMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OrbitVelocityMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "OrbitVelocityMax")] public string _Surrogate_Attribute_OrbitVelocityMax {
            get => OrbitVelocityMax != null ? ((System.Single)OrbitVelocityMax).ToString() : "";
            set { if (value != "") { OrbitVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.OrbitVelocityMax")] public string _Surrogate_Element_OrbitVelocityMax {
            get => OrbitVelocityMax != null ? ((System.Single)OrbitVelocityMax).ToString() : "";
            set { if (value != "") { OrbitVelocityMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? OrbitVelocityMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearAccelMin")] public string _Surrogate_Attribute_LinearAccelMin {
            get => LinearAccelMin != null ? ((System.Single)LinearAccelMin).ToString() : "";
            set { if (value != "") { LinearAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LinearAccelMin")] public string _Surrogate_Element_LinearAccelMin {
            get => LinearAccelMin != null ? ((System.Single)LinearAccelMin).ToString() : "";
            set { if (value != "") { LinearAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearAccelMax")] public string _Surrogate_Attribute_LinearAccelMax {
            get => LinearAccelMax != null ? ((System.Single)LinearAccelMax).ToString() : "";
            set { if (value != "") { LinearAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LinearAccelMax")] public string _Surrogate_Element_LinearAccelMax {
            get => LinearAccelMax != null ? ((System.Single)LinearAccelMax).ToString() : "";
            set { if (value != "") { LinearAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RadialAccelMin")] public string _Surrogate_Attribute_RadialAccelMin {
            get => RadialAccelMin != null ? ((System.Single)RadialAccelMin).ToString() : "";
            set { if (value != "") { RadialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.RadialAccelMin")] public string _Surrogate_Element_RadialAccelMin {
            get => RadialAccelMin != null ? ((System.Single)RadialAccelMin).ToString() : "";
            set { if (value != "") { RadialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RadialAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RadialAccelMax")] public string _Surrogate_Attribute_RadialAccelMax {
            get => RadialAccelMax != null ? ((System.Single)RadialAccelMax).ToString() : "";
            set { if (value != "") { RadialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.RadialAccelMax")] public string _Surrogate_Element_RadialAccelMax {
            get => RadialAccelMax != null ? ((System.Single)RadialAccelMax).ToString() : "";
            set { if (value != "") { RadialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RadialAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TangentialAccelMin")] public string _Surrogate_Attribute_TangentialAccelMin {
            get => TangentialAccelMin != null ? ((System.Single)TangentialAccelMin).ToString() : "";
            set { if (value != "") { TangentialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TangentialAccelMin")] public string _Surrogate_Element_TangentialAccelMin {
            get => TangentialAccelMin != null ? ((System.Single)TangentialAccelMin).ToString() : "";
            set { if (value != "") { TangentialAccelMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TangentialAccelMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TangentialAccelMax")] public string _Surrogate_Attribute_TangentialAccelMax {
            get => TangentialAccelMax != null ? ((System.Single)TangentialAccelMax).ToString() : "";
            set { if (value != "") { TangentialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TangentialAccelMax")] public string _Surrogate_Element_TangentialAccelMax {
            get => TangentialAccelMax != null ? ((System.Single)TangentialAccelMax).ToString() : "";
            set { if (value != "") { TangentialAccelMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TangentialAccelMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingMin")] public string _Surrogate_Attribute_DampingMin {
            get => DampingMin != null ? ((System.Single)DampingMin).ToString() : "";
            set { if (value != "") { DampingMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.DampingMin")] public string _Surrogate_Element_DampingMin {
            get => DampingMin != null ? ((System.Single)DampingMin).ToString() : "";
            set { if (value != "") { DampingMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingMax")] public string _Surrogate_Attribute_DampingMax {
            get => DampingMax != null ? ((System.Single)DampingMax).ToString() : "";
            set { if (value != "") { DampingMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.DampingMax")] public string _Surrogate_Element_DampingMax {
            get => DampingMax != null ? ((System.Single)DampingMax).ToString() : "";
            set { if (value != "") { DampingMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngleMin")] public string _Surrogate_Attribute_AngleMin {
            get => AngleMin != null ? ((System.Single)AngleMin).ToString() : "";
            set { if (value != "") { AngleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngleMin")] public string _Surrogate_Element_AngleMin {
            get => AngleMin != null ? ((System.Single)AngleMin).ToString() : "";
            set { if (value != "") { AngleMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngleMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngleMax")] public string _Surrogate_Attribute_AngleMax {
            get => AngleMax != null ? ((System.Single)AngleMax).ToString() : "";
            set { if (value != "") { AngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AngleMax")] public string _Surrogate_Element_AngleMax {
            get => AngleMax != null ? ((System.Single)AngleMax).ToString() : "";
            set { if (value != "") { AngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngleMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ScaleAmountMin")] public string _Surrogate_Attribute_ScaleAmountMin {
            get => ScaleAmountMin != null ? ((System.Single)ScaleAmountMin).ToString() : "";
            set { if (value != "") { ScaleAmountMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ScaleAmountMin")] public string _Surrogate_Element_ScaleAmountMin {
            get => ScaleAmountMin != null ? ((System.Single)ScaleAmountMin).ToString() : "";
            set { if (value != "") { ScaleAmountMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ScaleAmountMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ScaleAmountMax")] public string _Surrogate_Attribute_ScaleAmountMax {
            get => ScaleAmountMax != null ? ((System.Single)ScaleAmountMax).ToString() : "";
            set { if (value != "") { ScaleAmountMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ScaleAmountMax")] public string _Surrogate_Element_ScaleAmountMax {
            get => ScaleAmountMax != null ? ((System.Single)ScaleAmountMax).ToString() : "";
            set { if (value != "") { ScaleAmountMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ScaleAmountMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SplitScale")] public string _Surrogate_Attribute_SplitScale {
            get => SplitScale != null ? ((System.Boolean)SplitScale).ToString() : "";
            set { if (value != "") { SplitScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.SplitScale")] public string _Surrogate_Element_SplitScale {
            get => SplitScale != null ? ((System.Boolean)SplitScale).ToString() : "";
            set { if (value != "") { SplitScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SplitScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HueVariationMin")] public string _Surrogate_Attribute_HueVariationMin {
            get => HueVariationMin != null ? ((System.Single)HueVariationMin).ToString() : "";
            set { if (value != "") { HueVariationMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.HueVariationMin")] public string _Surrogate_Element_HueVariationMin {
            get => HueVariationMin != null ? ((System.Single)HueVariationMin).ToString() : "";
            set { if (value != "") { HueVariationMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HueVariationMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HueVariationMax")] public string _Surrogate_Attribute_HueVariationMax {
            get => HueVariationMax != null ? ((System.Single)HueVariationMax).ToString() : "";
            set { if (value != "") { HueVariationMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.HueVariationMax")] public string _Surrogate_Element_HueVariationMax {
            get => HueVariationMax != null ? ((System.Single)HueVariationMax).ToString() : "";
            set { if (value != "") { HueVariationMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HueVariationMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimSpeedMin")] public string _Surrogate_Attribute_AnimSpeedMin {
            get => AnimSpeedMin != null ? ((System.Single)AnimSpeedMin).ToString() : "";
            set { if (value != "") { AnimSpeedMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimSpeedMin")] public string _Surrogate_Element_AnimSpeedMin {
            get => AnimSpeedMin != null ? ((System.Single)AnimSpeedMin).ToString() : "";
            set { if (value != "") { AnimSpeedMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimSpeedMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimSpeedMax")] public string _Surrogate_Attribute_AnimSpeedMax {
            get => AnimSpeedMax != null ? ((System.Single)AnimSpeedMax).ToString() : "";
            set { if (value != "") { AnimSpeedMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimSpeedMax")] public string _Surrogate_Element_AnimSpeedMax {
            get => AnimSpeedMax != null ? ((System.Single)AnimSpeedMax).ToString() : "";
            set { if (value != "") { AnimSpeedMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimSpeedMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimOffsetMin")] public string _Surrogate_Attribute_AnimOffsetMin {
            get => AnimOffsetMin != null ? ((System.Single)AnimOffsetMin).ToString() : "";
            set { if (value != "") { AnimOffsetMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimOffsetMin")] public string _Surrogate_Element_AnimOffsetMin {
            get => AnimOffsetMin != null ? ((System.Single)AnimOffsetMin).ToString() : "";
            set { if (value != "") { AnimOffsetMin = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimOffsetMin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnimOffsetMax")] public string _Surrogate_Attribute_AnimOffsetMax {
            get => AnimOffsetMax != null ? ((System.Single)AnimOffsetMax).ToString() : "";
            set { if (value != "") { AnimOffsetMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.AnimOffsetMax")] public string _Surrogate_Element_AnimOffsetMax {
            get => AnimOffsetMax != null ? ((System.Single)AnimOffsetMax).ToString() : "";
            set { if (value != "") { AnimOffsetMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AnimOffsetMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Attribute_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Rotation")] public string _Surrogate_Element_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Rotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_Attribute_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.RotationDegrees")] public string _Surrogate_Element_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Skew")] public string _Surrogate_Attribute_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Skew")] public string _Surrogate_Element_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Skew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_Attribute_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.GlobalRotation")] public string _Surrogate_Element_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_Attribute_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.GlobalRotationDegrees")] public string _Surrogate_Element_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalSkew")] public string _Surrogate_Attribute_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.GlobalSkew")] public string _Surrogate_Element_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalSkew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShowBehindParent")] public string _Surrogate_Attribute_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ShowBehindParent")] public string _Surrogate_Element_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShowBehindParent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipChildren")] public string _Surrogate_Attribute_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ClipChildren")] public string _Surrogate_Element_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.ClipChildrenMode? ClipChildren { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightMask")] public string _Surrogate_Attribute_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.LightMask")] public string _Surrogate_Element_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LightMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityLayer")] public string _Surrogate_Attribute_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.VisibilityLayer")] public string _Surrogate_Element_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? VisibilityLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZIndex")] public string _Surrogate_Attribute_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ZIndex")] public string _Surrogate_Element_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ZIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZAsRelative")] public string _Surrogate_Attribute_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ZAsRelative")] public string _Surrogate_Element_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ZAsRelative { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "YSortEnabled")] public string _Surrogate_Attribute_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.YSortEnabled")] public string _Surrogate_Element_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? YSortEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureRepeat")] public string _Surrogate_Attribute_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.TextureRepeat")] public string _Surrogate_Element_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureRepeatEnum? TextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseParentMaterial")] public string _Surrogate_Attribute_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.UseParentMaterial")] public string _Surrogate_Element_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseParentMaterial { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "CpuParticles2D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionRectExtents")] public string _Surrogate_EmissionRectExtents {
            get => EmissionRectExtents != null ? ((Archwyvern.Nxml.Translators.Vector2)EmissionRectExtents).ToString() : "";
            set => EmissionRectExtents = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? EmissionRectExtents;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Direction")] public string _Surrogate_Direction {
            get => Direction != null ? ((Archwyvern.Nxml.Translators.Vector2)Direction).ToString() : "";
            set => Direction = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Direction;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Gravity")] public string _Surrogate_Gravity {
            get => Gravity != null ? ((Archwyvern.Nxml.Translators.Vector2)Gravity).ToString() : "";
            set => Gravity = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Gravity;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Color")] public string _Surrogate_Color {
            get => Color != null ? ((Archwyvern.Nxml.Translators.Color)Color).ToString() : "";
            set => Color = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Color;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector2)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector2)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalScale")] public string _Surrogate_GlobalScale {
            get => GlobalScale != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalScale).ToString() : "";
            set => GlobalScale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalScale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Modulate")] public string _Surrogate_Modulate {
            get => Modulate != null ? ((Archwyvern.Nxml.Translators.Color)Modulate).ToString() : "";
            set => Modulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Modulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SelfModulate")] public string _Surrogate_SelfModulate {
            get => SelfModulate != null ? ((Archwyvern.Nxml.Translators.Color)SelfModulate).ToString() : "";
            set => SelfModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SelfModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.CpuParticles2D) return alt;
            var obj = (Godot.CpuParticles2D)alt ?? new Godot.CpuParticles2D();

            // Attributes
            if (Emitting != null) obj.Emitting = (System.Boolean)Emitting;
            if (Amount != null) obj.Amount = (System.Int32)Amount;
            if (Lifetime != null) obj.Lifetime = (System.Double)Lifetime;
            if (OneShot != null) obj.OneShot = (System.Boolean)OneShot;
            if (Preprocess != null) obj.Preprocess = (System.Double)Preprocess;
            if (SpeedScale != null) obj.SpeedScale = (System.Double)SpeedScale;
            if (Explosiveness != null) obj.Explosiveness = (System.Single)Explosiveness;
            if (Randomness != null) obj.Randomness = (System.Single)Randomness;
            if (LifetimeRandomness != null) obj.LifetimeRandomness = (System.Double)LifetimeRandomness;
            if (FixedFps != null) obj.FixedFps = (System.Int32)FixedFps;
            if (FractDelta != null) obj.FractDelta = (System.Boolean)FractDelta;
            if (LocalCoords != null) obj.LocalCoords = (System.Boolean)LocalCoords;
            if (DrawOrder != null) obj.DrawOrder = (Godot.CpuParticles2D.DrawOrderEnum)DrawOrder;
            if (EmissionShape != null) obj.EmissionShape = (Godot.CpuParticles2D.EmissionShapeEnum)EmissionShape;
            if (EmissionSphereRadius != null) obj.EmissionSphereRadius = (System.Single)EmissionSphereRadius;
            if (ParticleFlagAlignY != null) obj.ParticleFlagAlignY = (System.Boolean)ParticleFlagAlignY;
            if (Spread != null) obj.Spread = (System.Single)Spread;
            if (InitialVelocityMin != null) obj.InitialVelocityMin = (System.Single)InitialVelocityMin;
            if (InitialVelocityMax != null) obj.InitialVelocityMax = (System.Single)InitialVelocityMax;
            if (AngularVelocityMin != null) obj.AngularVelocityMin = (System.Single)AngularVelocityMin;
            if (AngularVelocityMax != null) obj.AngularVelocityMax = (System.Single)AngularVelocityMax;
            if (OrbitVelocityMin != null) obj.OrbitVelocityMin = (System.Single)OrbitVelocityMin;
            if (OrbitVelocityMax != null) obj.OrbitVelocityMax = (System.Single)OrbitVelocityMax;
            if (LinearAccelMin != null) obj.LinearAccelMin = (System.Single)LinearAccelMin;
            if (LinearAccelMax != null) obj.LinearAccelMax = (System.Single)LinearAccelMax;
            if (RadialAccelMin != null) obj.RadialAccelMin = (System.Single)RadialAccelMin;
            if (RadialAccelMax != null) obj.RadialAccelMax = (System.Single)RadialAccelMax;
            if (TangentialAccelMin != null) obj.TangentialAccelMin = (System.Single)TangentialAccelMin;
            if (TangentialAccelMax != null) obj.TangentialAccelMax = (System.Single)TangentialAccelMax;
            if (DampingMin != null) obj.DampingMin = (System.Single)DampingMin;
            if (DampingMax != null) obj.DampingMax = (System.Single)DampingMax;
            if (AngleMin != null) obj.AngleMin = (System.Single)AngleMin;
            if (AngleMax != null) obj.AngleMax = (System.Single)AngleMax;
            if (ScaleAmountMin != null) obj.ScaleAmountMin = (System.Single)ScaleAmountMin;
            if (ScaleAmountMax != null) obj.ScaleAmountMax = (System.Single)ScaleAmountMax;
            if (SplitScale != null) obj.SplitScale = (System.Boolean)SplitScale;
            if (HueVariationMin != null) obj.HueVariationMin = (System.Single)HueVariationMin;
            if (HueVariationMax != null) obj.HueVariationMax = (System.Single)HueVariationMax;
            if (AnimSpeedMin != null) obj.AnimSpeedMin = (System.Single)AnimSpeedMin;
            if (AnimSpeedMax != null) obj.AnimSpeedMax = (System.Single)AnimSpeedMax;
            if (AnimOffsetMin != null) obj.AnimOffsetMin = (System.Single)AnimOffsetMin;
            if (AnimOffsetMax != null) obj.AnimOffsetMax = (System.Single)AnimOffsetMax;
            if (Rotation != null) obj.Rotation = (System.Single)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (System.Single)RotationDegrees;
            if (Skew != null) obj.Skew = (System.Single)Skew;
            if (GlobalRotation != null) obj.GlobalRotation = (System.Single)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (System.Single)GlobalRotationDegrees;
            if (GlobalSkew != null) obj.GlobalSkew = (System.Single)GlobalSkew;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (ShowBehindParent != null) obj.ShowBehindParent = (System.Boolean)ShowBehindParent;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (ClipChildren != null) obj.ClipChildren = (Godot.CanvasItem.ClipChildrenMode)ClipChildren;
            if (LightMask != null) obj.LightMask = (System.Int32)LightMask;
            if (VisibilityLayer != null) obj.VisibilityLayer = (System.UInt32)VisibilityLayer;
            if (ZIndex != null) obj.ZIndex = (System.Int32)ZIndex;
            if (ZAsRelative != null) obj.ZAsRelative = (System.Boolean)ZAsRelative;
            if (YSortEnabled != null) obj.YSortEnabled = (System.Boolean)YSortEnabled;
            if (TextureFilter != null) obj.TextureFilter = (Godot.CanvasItem.TextureFilterEnum)TextureFilter;
            if (TextureRepeat != null) obj.TextureRepeat = (Godot.CanvasItem.TextureRepeatEnum)TextureRepeat;
            if (UseParentMaterial != null) obj.UseParentMaterial = (System.Boolean)UseParentMaterial;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (EmissionRectExtents != null) obj.EmissionRectExtents = (Archwyvern.Nxml.Translators.Vector2)EmissionRectExtents;
            if (Direction != null) obj.Direction = (Archwyvern.Nxml.Translators.Vector2)Direction;
            if (Gravity != null) obj.Gravity = (Archwyvern.Nxml.Translators.Vector2)Gravity;
            if (Color != null) obj.Color = (Archwyvern.Nxml.Translators.Color)Color;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector2)Position;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector2)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector2)GlobalPosition;
            if (GlobalScale != null) obj.GlobalScale = (Archwyvern.Nxml.Translators.Vector2)GlobalScale;
            if (Modulate != null) obj.Modulate = (Archwyvern.Nxml.Translators.Color)Modulate;
            if (SelfModulate != null) obj.SelfModulate = (Archwyvern.Nxml.Translators.Color)SelfModulate;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Texture != null) {
                if (((IResourceTag)Texture).ResourcePath != null) {
                    obj.Texture = (Godot.Texture2D)Texture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)Texture).ResourcePath));
                } else {
                    obj.Texture = (Godot.Texture2D)Texture.Generate();
                }
            }
            if (AngularVelocityCurve != null) {
                if (((IResourceTag)AngularVelocityCurve).ResourcePath != null) {
                    obj.AngularVelocityCurve = (Godot.Curve)AngularVelocityCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)AngularVelocityCurve).ResourcePath));
                } else {
                    obj.AngularVelocityCurve = (Godot.Curve)AngularVelocityCurve.Generate();
                }
            }
            if (OrbitVelocityCurve != null) {
                if (((IResourceTag)OrbitVelocityCurve).ResourcePath != null) {
                    obj.OrbitVelocityCurve = (Godot.Curve)OrbitVelocityCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)OrbitVelocityCurve).ResourcePath));
                } else {
                    obj.OrbitVelocityCurve = (Godot.Curve)OrbitVelocityCurve.Generate();
                }
            }
            if (LinearAccelCurve != null) {
                if (((IResourceTag)LinearAccelCurve).ResourcePath != null) {
                    obj.LinearAccelCurve = (Godot.Curve)LinearAccelCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)LinearAccelCurve).ResourcePath));
                } else {
                    obj.LinearAccelCurve = (Godot.Curve)LinearAccelCurve.Generate();
                }
            }
            if (RadialAccelCurve != null) {
                if (((IResourceTag)RadialAccelCurve).ResourcePath != null) {
                    obj.RadialAccelCurve = (Godot.Curve)RadialAccelCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)RadialAccelCurve).ResourcePath));
                } else {
                    obj.RadialAccelCurve = (Godot.Curve)RadialAccelCurve.Generate();
                }
            }
            if (TangentialAccelCurve != null) {
                if (((IResourceTag)TangentialAccelCurve).ResourcePath != null) {
                    obj.TangentialAccelCurve = (Godot.Curve)TangentialAccelCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)TangentialAccelCurve).ResourcePath));
                } else {
                    obj.TangentialAccelCurve = (Godot.Curve)TangentialAccelCurve.Generate();
                }
            }
            if (DampingCurve != null) {
                if (((IResourceTag)DampingCurve).ResourcePath != null) {
                    obj.DampingCurve = (Godot.Curve)DampingCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)DampingCurve).ResourcePath));
                } else {
                    obj.DampingCurve = (Godot.Curve)DampingCurve.Generate();
                }
            }
            if (AngleCurve != null) {
                if (((IResourceTag)AngleCurve).ResourcePath != null) {
                    obj.AngleCurve = (Godot.Curve)AngleCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)AngleCurve).ResourcePath));
                } else {
                    obj.AngleCurve = (Godot.Curve)AngleCurve.Generate();
                }
            }
            if (ScaleAmountCurve != null) {
                if (((IResourceTag)ScaleAmountCurve).ResourcePath != null) {
                    obj.ScaleAmountCurve = (Godot.Curve)ScaleAmountCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)ScaleAmountCurve).ResourcePath));
                } else {
                    obj.ScaleAmountCurve = (Godot.Curve)ScaleAmountCurve.Generate();
                }
            }
            if (ScaleCurveX != null) {
                if (((IResourceTag)ScaleCurveX).ResourcePath != null) {
                    obj.ScaleCurveX = (Godot.Curve)ScaleCurveX.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)ScaleCurveX).ResourcePath));
                } else {
                    obj.ScaleCurveX = (Godot.Curve)ScaleCurveX.Generate();
                }
            }
            if (ScaleCurveY != null) {
                if (((IResourceTag)ScaleCurveY).ResourcePath != null) {
                    obj.ScaleCurveY = (Godot.Curve)ScaleCurveY.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)ScaleCurveY).ResourcePath));
                } else {
                    obj.ScaleCurveY = (Godot.Curve)ScaleCurveY.Generate();
                }
            }
            if (ColorRamp != null) {
                if (((IResourceTag)ColorRamp).ResourcePath != null) {
                    obj.ColorRamp = (Godot.Gradient)ColorRamp.Generate(Godot.GD.Load<Godot.Gradient>(((IResourceTag)ColorRamp).ResourcePath));
                } else {
                    obj.ColorRamp = (Godot.Gradient)ColorRamp.Generate();
                }
            }
            if (ColorInitialRamp != null) {
                if (((IResourceTag)ColorInitialRamp).ResourcePath != null) {
                    obj.ColorInitialRamp = (Godot.Gradient)ColorInitialRamp.Generate(Godot.GD.Load<Godot.Gradient>(((IResourceTag)ColorInitialRamp).ResourcePath));
                } else {
                    obj.ColorInitialRamp = (Godot.Gradient)ColorInitialRamp.Generate();
                }
            }
            if (HueVariationCurve != null) {
                if (((IResourceTag)HueVariationCurve).ResourcePath != null) {
                    obj.HueVariationCurve = (Godot.Curve)HueVariationCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)HueVariationCurve).ResourcePath));
                } else {
                    obj.HueVariationCurve = (Godot.Curve)HueVariationCurve.Generate();
                }
            }
            if (AnimSpeedCurve != null) {
                if (((IResourceTag)AnimSpeedCurve).ResourcePath != null) {
                    obj.AnimSpeedCurve = (Godot.Curve)AnimSpeedCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)AnimSpeedCurve).ResourcePath));
                } else {
                    obj.AnimSpeedCurve = (Godot.Curve)AnimSpeedCurve.Generate();
                }
            }
            if (AnimOffsetCurve != null) {
                if (((IResourceTag)AnimOffsetCurve).ResourcePath != null) {
                    obj.AnimOffsetCurve = (Godot.Curve)AnimOffsetCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)AnimOffsetCurve).ResourcePath));
                } else {
                    obj.AnimOffsetCurve = (Godot.Curve)AnimOffsetCurve.Generate();
                }
            }
            if (Material != null) {
                if (((IResourceTag)Material).ResourcePath != null) {
                    obj.Material = (Godot.Material)Material.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)Material).ResourcePath));
                } else {
                    obj.Material = (Godot.Material)Material.Generate();
                }
            }

            return obj;
        }
    }
}
