// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AudioStreamWav", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AudioStreamWavTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Format")] public string _Surrogate_Attribute_Format {
            get => Format != null ? ((Godot.AudioStreamWav.FormatEnum)Format).ToString() : "";
            set { if (value != "") { Format = System.Enum.Parse<Godot.AudioStreamWav.FormatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.Format")] public string _Surrogate_Element_Format {
            get => Format != null ? ((Godot.AudioStreamWav.FormatEnum)Format).ToString() : "";
            set { if (value != "") { Format = System.Enum.Parse<Godot.AudioStreamWav.FormatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamWav.FormatEnum? Format { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LoopMode")] public string _Surrogate_Attribute_LoopMode {
            get => LoopMode != null ? ((Godot.AudioStreamWav.LoopModeEnum)LoopMode).ToString() : "";
            set { if (value != "") { LoopMode = System.Enum.Parse<Godot.AudioStreamWav.LoopModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.LoopMode")] public string _Surrogate_Element_LoopMode {
            get => LoopMode != null ? ((Godot.AudioStreamWav.LoopModeEnum)LoopMode).ToString() : "";
            set { if (value != "") { LoopMode = System.Enum.Parse<Godot.AudioStreamWav.LoopModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamWav.LoopModeEnum? LoopMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LoopBegin")] public string _Surrogate_Attribute_LoopBegin {
            get => LoopBegin != null ? ((System.Int32)LoopBegin).ToString() : "";
            set { if (value != "") { LoopBegin = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.LoopBegin")] public string _Surrogate_Element_LoopBegin {
            get => LoopBegin != null ? ((System.Int32)LoopBegin).ToString() : "";
            set { if (value != "") { LoopBegin = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LoopBegin { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LoopEnd")] public string _Surrogate_Attribute_LoopEnd {
            get => LoopEnd != null ? ((System.Int32)LoopEnd).ToString() : "";
            set { if (value != "") { LoopEnd = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.LoopEnd")] public string _Surrogate_Element_LoopEnd {
            get => LoopEnd != null ? ((System.Int32)LoopEnd).ToString() : "";
            set { if (value != "") { LoopEnd = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LoopEnd { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MixRate")] public string _Surrogate_Attribute_MixRate {
            get => MixRate != null ? ((System.Int32)MixRate).ToString() : "";
            set { if (value != "") { MixRate = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.MixRate")] public string _Surrogate_Element_MixRate {
            get => MixRate != null ? ((System.Int32)MixRate).ToString() : "";
            set { if (value != "") { MixRate = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MixRate { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Stereo")] public string _Surrogate_Attribute_Stereo {
            get => Stereo != null ? ((System.Boolean)Stereo).ToString() : "";
            set { if (value != "") { Stereo = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.Stereo")] public string _Surrogate_Element_Stereo {
            get => Stereo != null ? ((System.Boolean)Stereo).ToString() : "";
            set { if (value != "") { Stereo = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Stereo { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamWav.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AudioStreamWav) return alt;
            var obj = (Godot.AudioStreamWav)alt ?? new Godot.AudioStreamWav();

            // Attributes
            if (Format != null) obj.Format = (Godot.AudioStreamWav.FormatEnum)Format;
            if (LoopMode != null) obj.LoopMode = (Godot.AudioStreamWav.LoopModeEnum)LoopMode;
            if (LoopBegin != null) obj.LoopBegin = (System.Int32)LoopBegin;
            if (LoopEnd != null) obj.LoopEnd = (System.Int32)LoopEnd;
            if (MixRate != null) obj.MixRate = (System.Int32)MixRate;
            if (Stereo != null) obj.Stereo = (System.Boolean)Stereo;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
