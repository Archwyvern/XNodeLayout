// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "TextMesh", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class TextMeshTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "TextMesh.ElementProperty.Font")] public class Font
            {
                [System.Xml.Serialization.XmlElement(ElementName = "FontFile", Type = typeof(FontFileTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FontVariation", Type = typeof(FontVariationTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "SystemFont", Type = typeof(SystemFontTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "TextMesh.ElementProperty.Material")] public class Material
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Font => _Surrogate_Element_Font?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Font")] public TextMeshTag.ElementProperty.Font? _Surrogate_Element_Font;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Material => _Surrogate_Element_Material?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Material")] public TextMeshTag.ElementProperty.Material? _Surrogate_Element_Material;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Text")] public string _Surrogate_Attribute_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Text")] public string _Surrogate_Element_Text {
            get => Text != null ? ((System.String)Text).ToString() : "";
            set { if (value != "") { Text = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Text { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FontSize")] public string _Surrogate_Attribute_FontSize {
            get => FontSize != null ? ((System.Int32)FontSize).ToString() : "";
            set { if (value != "") { FontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.FontSize")] public string _Surrogate_Element_FontSize {
            get => FontSize != null ? ((System.Int32)FontSize).ToString() : "";
            set { if (value != "") { FontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? FontSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HorizontalAlignment")] public string _Surrogate_Attribute_HorizontalAlignment {
            get => HorizontalAlignment != null ? ((Godot.HorizontalAlignment)HorizontalAlignment).ToString() : "";
            set { if (value != "") { HorizontalAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.HorizontalAlignment")] public string _Surrogate_Element_HorizontalAlignment {
            get => HorizontalAlignment != null ? ((Godot.HorizontalAlignment)HorizontalAlignment).ToString() : "";
            set { if (value != "") { HorizontalAlignment = System.Enum.Parse<Godot.HorizontalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.HorizontalAlignment? HorizontalAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VerticalAlignment")] public string _Surrogate_Attribute_VerticalAlignment {
            get => VerticalAlignment != null ? ((Godot.VerticalAlignment)VerticalAlignment).ToString() : "";
            set { if (value != "") { VerticalAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.VerticalAlignment")] public string _Surrogate_Element_VerticalAlignment {
            get => VerticalAlignment != null ? ((Godot.VerticalAlignment)VerticalAlignment).ToString() : "";
            set { if (value != "") { VerticalAlignment = System.Enum.Parse<Godot.VerticalAlignment>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.VerticalAlignment? VerticalAlignment { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uppercase")] public string _Surrogate_Attribute_Uppercase {
            get => Uppercase != null ? ((System.Boolean)Uppercase).ToString() : "";
            set { if (value != "") { Uppercase = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Uppercase")] public string _Surrogate_Element_Uppercase {
            get => Uppercase != null ? ((System.Boolean)Uppercase).ToString() : "";
            set { if (value != "") { Uppercase = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Uppercase { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LineSpacing")] public string _Surrogate_Attribute_LineSpacing {
            get => LineSpacing != null ? ((System.Single)LineSpacing).ToString() : "";
            set { if (value != "") { LineSpacing = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.LineSpacing")] public string _Surrogate_Element_LineSpacing {
            get => LineSpacing != null ? ((System.Single)LineSpacing).ToString() : "";
            set { if (value != "") { LineSpacing = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LineSpacing { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutowrapMode")] public string _Surrogate_Attribute_AutowrapMode {
            get => AutowrapMode != null ? ((Godot.TextServer.AutowrapMode)AutowrapMode).ToString() : "";
            set { if (value != "") { AutowrapMode = System.Enum.Parse<Godot.TextServer.AutowrapMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.AutowrapMode")] public string _Surrogate_Element_AutowrapMode {
            get => AutowrapMode != null ? ((Godot.TextServer.AutowrapMode)AutowrapMode).ToString() : "";
            set { if (value != "") { AutowrapMode = System.Enum.Parse<Godot.TextServer.AutowrapMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.AutowrapMode? AutowrapMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "JustificationFlags")] public string _Surrogate_Attribute_JustificationFlags {
            get => JustificationFlags != null ? ((Godot.TextServer.JustificationFlag)JustificationFlags).ToString() : "";
            set { if (value != "") { JustificationFlags = System.Enum.Parse<Godot.TextServer.JustificationFlag>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.JustificationFlags")] public string _Surrogate_Element_JustificationFlags {
            get => JustificationFlags != null ? ((Godot.TextServer.JustificationFlag)JustificationFlags).ToString() : "";
            set { if (value != "") { JustificationFlags = System.Enum.Parse<Godot.TextServer.JustificationFlag>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.JustificationFlag? JustificationFlags { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PixelSize")] public string _Surrogate_Attribute_PixelSize {
            get => PixelSize != null ? ((System.Single)PixelSize).ToString() : "";
            set { if (value != "") { PixelSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.PixelSize")] public string _Surrogate_Element_PixelSize {
            get => PixelSize != null ? ((System.Single)PixelSize).ToString() : "";
            set { if (value != "") { PixelSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PixelSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CurveStep")] public string _Surrogate_Attribute_CurveStep {
            get => CurveStep != null ? ((System.Single)CurveStep).ToString() : "";
            set { if (value != "") { CurveStep = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.CurveStep")] public string _Surrogate_Element_CurveStep {
            get => CurveStep != null ? ((System.Single)CurveStep).ToString() : "";
            set { if (value != "") { CurveStep = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CurveStep { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Depth")] public string _Surrogate_Attribute_Depth {
            get => Depth != null ? ((System.Single)Depth).ToString() : "";
            set { if (value != "") { Depth = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Depth")] public string _Surrogate_Element_Depth {
            get => Depth != null ? ((System.Single)Depth).ToString() : "";
            set { if (value != "") { Depth = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Depth { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Width")] public string _Surrogate_Attribute_Width {
            get => Width != null ? ((System.Single)Width).ToString() : "";
            set { if (value != "") { Width = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Width")] public string _Surrogate_Element_Width {
            get => Width != null ? ((System.Single)Width).ToString() : "";
            set { if (value != "") { Width = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Width { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextDirection")] public string _Surrogate_Attribute_TextDirection {
            get => TextDirection != null ? ((Godot.TextServer.Direction)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.TextServer.Direction>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.TextDirection")] public string _Surrogate_Element_TextDirection {
            get => TextDirection != null ? ((Godot.TextServer.Direction)TextDirection).ToString() : "";
            set { if (value != "") { TextDirection = System.Enum.Parse<Godot.TextServer.Direction>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.Direction? TextDirection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Language")] public string _Surrogate_Attribute_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.Language")] public string _Surrogate_Element_Language {
            get => Language != null ? ((System.String)Language).ToString() : "";
            set { if (value != "") { Language = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Language { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StructuredTextBidiOverride")] public string _Surrogate_Attribute_StructuredTextBidiOverride {
            get => StructuredTextBidiOverride != null ? ((Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride).ToString() : "";
            set { if (value != "") { StructuredTextBidiOverride = System.Enum.Parse<Godot.TextServer.StructuredTextParser>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.StructuredTextBidiOverride")] public string _Surrogate_Element_StructuredTextBidiOverride {
            get => StructuredTextBidiOverride != null ? ((Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride).ToString() : "";
            set { if (value != "") { StructuredTextBidiOverride = System.Enum.Parse<Godot.TextServer.StructuredTextParser>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.TextServer.StructuredTextParser? StructuredTextBidiOverride { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FlipFaces")] public string _Surrogate_Attribute_FlipFaces {
            get => FlipFaces != null ? ((System.Boolean)FlipFaces).ToString() : "";
            set { if (value != "") { FlipFaces = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.FlipFaces")] public string _Surrogate_Element_FlipFaces {
            get => FlipFaces != null ? ((System.Boolean)FlipFaces).ToString() : "";
            set { if (value != "") { FlipFaces = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FlipFaces { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AddUV2")] public string _Surrogate_Attribute_AddUV2 {
            get => AddUV2 != null ? ((System.Boolean)AddUV2).ToString() : "";
            set { if (value != "") { AddUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.AddUV2")] public string _Surrogate_Element_AddUV2 {
            get => AddUV2 != null ? ((System.Boolean)AddUV2).ToString() : "";
            set { if (value != "") { AddUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AddUV2 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2Padding")] public string _Surrogate_Attribute_UV2Padding {
            get => UV2Padding != null ? ((System.Single)UV2Padding).ToString() : "";
            set { if (value != "") { UV2Padding = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.UV2Padding")] public string _Surrogate_Element_UV2Padding {
            get => UV2Padding != null ? ((System.Single)UV2Padding).ToString() : "";
            set { if (value != "") { UV2Padding = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? UV2Padding { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "TextMesh.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Offset")] public string _Surrogate_Offset {
            get => Offset != null ? ((Archwyvern.Nxml.Translators.Vector2)Offset).ToString() : "";
            set => Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Offset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightmapSizeHint")] public string _Surrogate_LightmapSizeHint {
            get => LightmapSizeHint != null ? ((Archwyvern.Nxml.Translators.Vector2)LightmapSizeHint).ToString() : "";
            set => LightmapSizeHint = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? LightmapSizeHint;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.TextMesh) return alt;
            var obj = (Godot.TextMesh)alt ?? new Godot.TextMesh();

            // Attributes
            if (Text != null) obj.Text = (System.String)Text;
            if (FontSize != null) obj.FontSize = (System.Int32)FontSize;
            if (HorizontalAlignment != null) obj.HorizontalAlignment = (Godot.HorizontalAlignment)HorizontalAlignment;
            if (VerticalAlignment != null) obj.VerticalAlignment = (Godot.VerticalAlignment)VerticalAlignment;
            if (Uppercase != null) obj.Uppercase = (System.Boolean)Uppercase;
            if (LineSpacing != null) obj.LineSpacing = (System.Single)LineSpacing;
            if (AutowrapMode != null) obj.AutowrapMode = (Godot.TextServer.AutowrapMode)AutowrapMode;
            if (JustificationFlags != null) obj.JustificationFlags = (Godot.TextServer.JustificationFlag)JustificationFlags;
            if (PixelSize != null) obj.PixelSize = (System.Single)PixelSize;
            if (CurveStep != null) obj.CurveStep = (System.Single)CurveStep;
            if (Depth != null) obj.Depth = (System.Single)Depth;
            if (Width != null) obj.Width = (System.Single)Width;
            if (TextDirection != null) obj.TextDirection = (Godot.TextServer.Direction)TextDirection;
            if (Language != null) obj.Language = (System.String)Language;
            if (StructuredTextBidiOverride != null) obj.StructuredTextBidiOverride = (Godot.TextServer.StructuredTextParser)StructuredTextBidiOverride;
            if (FlipFaces != null) obj.FlipFaces = (System.Boolean)FlipFaces;
            if (AddUV2 != null) obj.AddUV2 = (System.Boolean)AddUV2;
            if (UV2Padding != null) obj.UV2Padding = (System.Single)UV2Padding;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (Offset != null) obj.Offset = (Archwyvern.Nxml.Translators.Vector2)Offset;
            if (LightmapSizeHint != null) obj.LightmapSizeHint = (Archwyvern.Nxml.Translators.Vector2)LightmapSizeHint;
            // Elements
            if (Font != null) {
                if (((IResourceTag)Font).ResourcePath != null) {
                    obj.Font = (Godot.Font)Font.Generate(Godot.GD.Load<Godot.Font>(((IResourceTag)Font).ResourcePath));
                } else {
                    obj.Font = (Godot.Font)Font.Generate();
                }
            }
            if (Material != null) {
                if (((IResourceTag)Material).ResourcePath != null) {
                    obj.Material = (Godot.Material)Material.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)Material).ResourcePath));
                } else {
                    obj.Material = (Godot.Material)Material.Generate();
                }
            }

            return obj;
        }
    }
}
