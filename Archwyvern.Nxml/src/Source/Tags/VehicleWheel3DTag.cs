// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "VehicleWheel3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class VehicleWheel3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EngineForce")] public string _Surrogate_Attribute_EngineForce {
            get => EngineForce != null ? ((System.Single)EngineForce).ToString() : "";
            set { if (value != "") { EngineForce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.EngineForce")] public string _Surrogate_Element_EngineForce {
            get => EngineForce != null ? ((System.Single)EngineForce).ToString() : "";
            set { if (value != "") { EngineForce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EngineForce { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Brake")] public string _Surrogate_Attribute_Brake {
            get => Brake != null ? ((System.Single)Brake).ToString() : "";
            set { if (value != "") { Brake = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.Brake")] public string _Surrogate_Element_Brake {
            get => Brake != null ? ((System.Single)Brake).ToString() : "";
            set { if (value != "") { Brake = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Brake { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Steering")] public string _Surrogate_Attribute_Steering {
            get => Steering != null ? ((System.Single)Steering).ToString() : "";
            set { if (value != "") { Steering = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.Steering")] public string _Surrogate_Element_Steering {
            get => Steering != null ? ((System.Single)Steering).ToString() : "";
            set { if (value != "") { Steering = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Steering { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseAsTraction")] public string _Surrogate_Attribute_UseAsTraction {
            get => UseAsTraction != null ? ((System.Boolean)UseAsTraction).ToString() : "";
            set { if (value != "") { UseAsTraction = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.UseAsTraction")] public string _Surrogate_Element_UseAsTraction {
            get => UseAsTraction != null ? ((System.Boolean)UseAsTraction).ToString() : "";
            set { if (value != "") { UseAsTraction = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseAsTraction { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseAsSteering")] public string _Surrogate_Attribute_UseAsSteering {
            get => UseAsSteering != null ? ((System.Boolean)UseAsSteering).ToString() : "";
            set { if (value != "") { UseAsSteering = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.UseAsSteering")] public string _Surrogate_Element_UseAsSteering {
            get => UseAsSteering != null ? ((System.Boolean)UseAsSteering).ToString() : "";
            set { if (value != "") { UseAsSteering = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseAsSteering { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "WheelRollInfluence")] public string _Surrogate_Attribute_WheelRollInfluence {
            get => WheelRollInfluence != null ? ((System.Single)WheelRollInfluence).ToString() : "";
            set { if (value != "") { WheelRollInfluence = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.WheelRollInfluence")] public string _Surrogate_Element_WheelRollInfluence {
            get => WheelRollInfluence != null ? ((System.Single)WheelRollInfluence).ToString() : "";
            set { if (value != "") { WheelRollInfluence = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? WheelRollInfluence { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "WheelRadius")] public string _Surrogate_Attribute_WheelRadius {
            get => WheelRadius != null ? ((System.Single)WheelRadius).ToString() : "";
            set { if (value != "") { WheelRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.WheelRadius")] public string _Surrogate_Element_WheelRadius {
            get => WheelRadius != null ? ((System.Single)WheelRadius).ToString() : "";
            set { if (value != "") { WheelRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? WheelRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "WheelRestLength")] public string _Surrogate_Attribute_WheelRestLength {
            get => WheelRestLength != null ? ((System.Single)WheelRestLength).ToString() : "";
            set { if (value != "") { WheelRestLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.WheelRestLength")] public string _Surrogate_Element_WheelRestLength {
            get => WheelRestLength != null ? ((System.Single)WheelRestLength).ToString() : "";
            set { if (value != "") { WheelRestLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? WheelRestLength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "WheelFrictionSlip")] public string _Surrogate_Attribute_WheelFrictionSlip {
            get => WheelFrictionSlip != null ? ((System.Single)WheelFrictionSlip).ToString() : "";
            set { if (value != "") { WheelFrictionSlip = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.WheelFrictionSlip")] public string _Surrogate_Element_WheelFrictionSlip {
            get => WheelFrictionSlip != null ? ((System.Single)WheelFrictionSlip).ToString() : "";
            set { if (value != "") { WheelFrictionSlip = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? WheelFrictionSlip { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SuspensionTravel")] public string _Surrogate_Attribute_SuspensionTravel {
            get => SuspensionTravel != null ? ((System.Single)SuspensionTravel).ToString() : "";
            set { if (value != "") { SuspensionTravel = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.SuspensionTravel")] public string _Surrogate_Element_SuspensionTravel {
            get => SuspensionTravel != null ? ((System.Single)SuspensionTravel).ToString() : "";
            set { if (value != "") { SuspensionTravel = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SuspensionTravel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SuspensionStiffness")] public string _Surrogate_Attribute_SuspensionStiffness {
            get => SuspensionStiffness != null ? ((System.Single)SuspensionStiffness).ToString() : "";
            set { if (value != "") { SuspensionStiffness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.SuspensionStiffness")] public string _Surrogate_Element_SuspensionStiffness {
            get => SuspensionStiffness != null ? ((System.Single)SuspensionStiffness).ToString() : "";
            set { if (value != "") { SuspensionStiffness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SuspensionStiffness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SuspensionMaxForce")] public string _Surrogate_Attribute_SuspensionMaxForce {
            get => SuspensionMaxForce != null ? ((System.Single)SuspensionMaxForce).ToString() : "";
            set { if (value != "") { SuspensionMaxForce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.SuspensionMaxForce")] public string _Surrogate_Element_SuspensionMaxForce {
            get => SuspensionMaxForce != null ? ((System.Single)SuspensionMaxForce).ToString() : "";
            set { if (value != "") { SuspensionMaxForce = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SuspensionMaxForce { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingCompression")] public string _Surrogate_Attribute_DampingCompression {
            get => DampingCompression != null ? ((System.Single)DampingCompression).ToString() : "";
            set { if (value != "") { DampingCompression = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.DampingCompression")] public string _Surrogate_Element_DampingCompression {
            get => DampingCompression != null ? ((System.Single)DampingCompression).ToString() : "";
            set { if (value != "") { DampingCompression = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingCompression { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DampingRelaxation")] public string _Surrogate_Attribute_DampingRelaxation {
            get => DampingRelaxation != null ? ((System.Single)DampingRelaxation).ToString() : "";
            set { if (value != "") { DampingRelaxation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.DampingRelaxation")] public string _Surrogate_Element_DampingRelaxation {
            get => DampingRelaxation != null ? ((System.Single)DampingRelaxation).ToString() : "";
            set { if (value != "") { DampingRelaxation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DampingRelaxation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "VehicleWheel3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.VehicleWheel3D) return alt;
            var obj = (Godot.VehicleWheel3D)alt ?? new Godot.VehicleWheel3D();

            // Attributes
            if (EngineForce != null) obj.EngineForce = (System.Single)EngineForce;
            if (Brake != null) obj.Brake = (System.Single)Brake;
            if (Steering != null) obj.Steering = (System.Single)Steering;
            if (UseAsTraction != null) obj.UseAsTraction = (System.Boolean)UseAsTraction;
            if (UseAsSteering != null) obj.UseAsSteering = (System.Boolean)UseAsSteering;
            if (WheelRollInfluence != null) obj.WheelRollInfluence = (System.Single)WheelRollInfluence;
            if (WheelRadius != null) obj.WheelRadius = (System.Single)WheelRadius;
            if (WheelRestLength != null) obj.WheelRestLength = (System.Single)WheelRestLength;
            if (WheelFrictionSlip != null) obj.WheelFrictionSlip = (System.Single)WheelFrictionSlip;
            if (SuspensionTravel != null) obj.SuspensionTravel = (System.Single)SuspensionTravel;
            if (SuspensionStiffness != null) obj.SuspensionStiffness = (System.Single)SuspensionStiffness;
            if (SuspensionMaxForce != null) obj.SuspensionMaxForce = (System.Single)SuspensionMaxForce;
            if (DampingCompression != null) obj.DampingCompression = (System.Single)DampingCompression;
            if (DampingRelaxation != null) obj.DampingRelaxation = (System.Single)DampingRelaxation;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements

            return obj;
        }
    }
}
