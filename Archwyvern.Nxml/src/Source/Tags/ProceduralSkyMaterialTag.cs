// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "ProceduralSkyMaterial", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class ProceduralSkyMaterialTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "ProceduralSkyMaterial.ElementProperty.SkyCover")] public class SkyCover
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "ProceduralSkyMaterial.ElementProperty.NextPass")] public class NextPass
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? SkyCover => _Surrogate_Element_SkyCover?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.SkyCover")] public ProceduralSkyMaterialTag.ElementProperty.SkyCover? _Surrogate_Element_SkyCover;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? NextPass => _Surrogate_Element_NextPass?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.NextPass")] public ProceduralSkyMaterialTag.ElementProperty.NextPass? _Surrogate_Element_NextPass;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyCurve")] public string _Surrogate_Attribute_SkyCurve {
            get => SkyCurve != null ? ((System.Single)SkyCurve).ToString() : "";
            set { if (value != "") { SkyCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.SkyCurve")] public string _Surrogate_Element_SkyCurve {
            get => SkyCurve != null ? ((System.Single)SkyCurve).ToString() : "";
            set { if (value != "") { SkyCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SkyCurve { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyEnergyMultiplier")] public string _Surrogate_Attribute_SkyEnergyMultiplier {
            get => SkyEnergyMultiplier != null ? ((System.Single)SkyEnergyMultiplier).ToString() : "";
            set { if (value != "") { SkyEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.SkyEnergyMultiplier")] public string _Surrogate_Element_SkyEnergyMultiplier {
            get => SkyEnergyMultiplier != null ? ((System.Single)SkyEnergyMultiplier).ToString() : "";
            set { if (value != "") { SkyEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SkyEnergyMultiplier { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GroundCurve")] public string _Surrogate_Attribute_GroundCurve {
            get => GroundCurve != null ? ((System.Single)GroundCurve).ToString() : "";
            set { if (value != "") { GroundCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.GroundCurve")] public string _Surrogate_Element_GroundCurve {
            get => GroundCurve != null ? ((System.Single)GroundCurve).ToString() : "";
            set { if (value != "") { GroundCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GroundCurve { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GroundEnergyMultiplier")] public string _Surrogate_Attribute_GroundEnergyMultiplier {
            get => GroundEnergyMultiplier != null ? ((System.Single)GroundEnergyMultiplier).ToString() : "";
            set { if (value != "") { GroundEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.GroundEnergyMultiplier")] public string _Surrogate_Element_GroundEnergyMultiplier {
            get => GroundEnergyMultiplier != null ? ((System.Single)GroundEnergyMultiplier).ToString() : "";
            set { if (value != "") { GroundEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GroundEnergyMultiplier { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SunAngleMax")] public string _Surrogate_Attribute_SunAngleMax {
            get => SunAngleMax != null ? ((System.Single)SunAngleMax).ToString() : "";
            set { if (value != "") { SunAngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.SunAngleMax")] public string _Surrogate_Element_SunAngleMax {
            get => SunAngleMax != null ? ((System.Single)SunAngleMax).ToString() : "";
            set { if (value != "") { SunAngleMax = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SunAngleMax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SunCurve")] public string _Surrogate_Attribute_SunCurve {
            get => SunCurve != null ? ((System.Single)SunCurve).ToString() : "";
            set { if (value != "") { SunCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.SunCurve")] public string _Surrogate_Element_SunCurve {
            get => SunCurve != null ? ((System.Single)SunCurve).ToString() : "";
            set { if (value != "") { SunCurve = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SunCurve { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseDebanding")] public string _Surrogate_Attribute_UseDebanding {
            get => UseDebanding != null ? ((System.Boolean)UseDebanding).ToString() : "";
            set { if (value != "") { UseDebanding = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.UseDebanding")] public string _Surrogate_Element_UseDebanding {
            get => UseDebanding != null ? ((System.Boolean)UseDebanding).ToString() : "";
            set { if (value != "") { UseDebanding = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseDebanding { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RenderPriority")] public string _Surrogate_Attribute_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.RenderPriority")] public string _Surrogate_Element_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? RenderPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyTopColor")] public string _Surrogate_SkyTopColor {
            get => SkyTopColor != null ? ((Archwyvern.Nxml.Translators.Color)SkyTopColor).ToString() : "";
            set => SkyTopColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SkyTopColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyHorizonColor")] public string _Surrogate_SkyHorizonColor {
            get => SkyHorizonColor != null ? ((Archwyvern.Nxml.Translators.Color)SkyHorizonColor).ToString() : "";
            set => SkyHorizonColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SkyHorizonColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyCoverModulate")] public string _Surrogate_SkyCoverModulate {
            get => SkyCoverModulate != null ? ((Archwyvern.Nxml.Translators.Color)SkyCoverModulate).ToString() : "";
            set => SkyCoverModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SkyCoverModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GroundBottomColor")] public string _Surrogate_GroundBottomColor {
            get => GroundBottomColor != null ? ((Archwyvern.Nxml.Translators.Color)GroundBottomColor).ToString() : "";
            set => GroundBottomColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? GroundBottomColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GroundHorizonColor")] public string _Surrogate_GroundHorizonColor {
            get => GroundHorizonColor != null ? ((Archwyvern.Nxml.Translators.Color)GroundHorizonColor).ToString() : "";
            set => GroundHorizonColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? GroundHorizonColor;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.ProceduralSkyMaterial) return alt;
            var obj = (Godot.ProceduralSkyMaterial)alt ?? new Godot.ProceduralSkyMaterial();

            // Attributes
            if (SkyCurve != null) obj.SkyCurve = (System.Single)SkyCurve;
            if (SkyEnergyMultiplier != null) obj.SkyEnergyMultiplier = (System.Single)SkyEnergyMultiplier;
            if (GroundCurve != null) obj.GroundCurve = (System.Single)GroundCurve;
            if (GroundEnergyMultiplier != null) obj.GroundEnergyMultiplier = (System.Single)GroundEnergyMultiplier;
            if (SunAngleMax != null) obj.SunAngleMax = (System.Single)SunAngleMax;
            if (SunCurve != null) obj.SunCurve = (System.Single)SunCurve;
            if (UseDebanding != null) obj.UseDebanding = (System.Boolean)UseDebanding;
            if (RenderPriority != null) obj.RenderPriority = (System.Int32)RenderPriority;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (SkyTopColor != null) obj.SkyTopColor = (Archwyvern.Nxml.Translators.Color)SkyTopColor;
            if (SkyHorizonColor != null) obj.SkyHorizonColor = (Archwyvern.Nxml.Translators.Color)SkyHorizonColor;
            if (SkyCoverModulate != null) obj.SkyCoverModulate = (Archwyvern.Nxml.Translators.Color)SkyCoverModulate;
            if (GroundBottomColor != null) obj.GroundBottomColor = (Archwyvern.Nxml.Translators.Color)GroundBottomColor;
            if (GroundHorizonColor != null) obj.GroundHorizonColor = (Archwyvern.Nxml.Translators.Color)GroundHorizonColor;
            // Elements
            if (SkyCover != null) {
                if (((IResourceTag)SkyCover).ResourcePath != null) {
                    obj.SkyCover = (Godot.Texture2D)SkyCover.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)SkyCover).ResourcePath));
                } else {
                    obj.SkyCover = (Godot.Texture2D)SkyCover.Generate();
                }
            }
            if (NextPass != null) {
                if (((IResourceTag)NextPass).ResourcePath != null) {
                    obj.NextPass = (Godot.Material)NextPass.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)NextPass).ResourcePath));
                } else {
                    obj.NextPass = (Godot.Material)NextPass.Generate();
                }
            }

            return obj;
        }
    }
}
