// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AudioStreamRandomizer", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AudioStreamRandomizerTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StreamsCount")] public string _Surrogate_Attribute_StreamsCount {
            get => StreamsCount != null ? ((System.Int32)StreamsCount).ToString() : "";
            set { if (value != "") { StreamsCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.StreamsCount")] public string _Surrogate_Element_StreamsCount {
            get => StreamsCount != null ? ((System.Int32)StreamsCount).ToString() : "";
            set { if (value != "") { StreamsCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? StreamsCount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PlaybackMode")] public string _Surrogate_Attribute_PlaybackMode {
            get => PlaybackMode != null ? ((Godot.AudioStreamRandomizer.PlaybackModeEnum)PlaybackMode).ToString() : "";
            set { if (value != "") { PlaybackMode = System.Enum.Parse<Godot.AudioStreamRandomizer.PlaybackModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.PlaybackMode")] public string _Surrogate_Element_PlaybackMode {
            get => PlaybackMode != null ? ((Godot.AudioStreamRandomizer.PlaybackModeEnum)PlaybackMode).ToString() : "";
            set { if (value != "") { PlaybackMode = System.Enum.Parse<Godot.AudioStreamRandomizer.PlaybackModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AudioStreamRandomizer.PlaybackModeEnum? PlaybackMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RandomPitch")] public string _Surrogate_Attribute_RandomPitch {
            get => RandomPitch != null ? ((System.Single)RandomPitch).ToString() : "";
            set { if (value != "") { RandomPitch = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.RandomPitch")] public string _Surrogate_Element_RandomPitch {
            get => RandomPitch != null ? ((System.Single)RandomPitch).ToString() : "";
            set { if (value != "") { RandomPitch = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RandomPitch { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RandomVolumeOffsetDb")] public string _Surrogate_Attribute_RandomVolumeOffsetDb {
            get => RandomVolumeOffsetDb != null ? ((System.Single)RandomVolumeOffsetDb).ToString() : "";
            set { if (value != "") { RandomVolumeOffsetDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.RandomVolumeOffsetDb")] public string _Surrogate_Element_RandomVolumeOffsetDb {
            get => RandomVolumeOffsetDb != null ? ((System.Single)RandomVolumeOffsetDb).ToString() : "";
            set { if (value != "") { RandomVolumeOffsetDb = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RandomVolumeOffsetDb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AudioStreamRandomizer.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AudioStreamRandomizer) return alt;
            var obj = (Godot.AudioStreamRandomizer)alt ?? new Godot.AudioStreamRandomizer();

            // Attributes
            if (StreamsCount != null) obj.StreamsCount = (System.Int32)StreamsCount;
            if (PlaybackMode != null) obj.PlaybackMode = (Godot.AudioStreamRandomizer.PlaybackModeEnum)PlaybackMode;
            if (RandomPitch != null) obj.RandomPitch = (System.Single)RandomPitch;
            if (RandomVolumeOffsetDb != null) obj.RandomVolumeOffsetDb = (System.Single)RandomVolumeOffsetDb;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
