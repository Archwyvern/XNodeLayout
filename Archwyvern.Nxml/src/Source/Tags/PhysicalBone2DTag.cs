// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "PhysicalBone2D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class PhysicalBone2DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "PhysicalBone2D.ElementProperty.PhysicsMaterialOverride")] public class PhysicsMaterialOverride
            {
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicsMaterial", Type = typeof(PhysicsMaterialTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "PhysicalBone2D.ElementProperty.Material")] public class Material
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? PhysicsMaterialOverride => _Surrogate_Element_PhysicsMaterialOverride?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.PhysicsMaterialOverride")] public PhysicalBone2DTag.ElementProperty.PhysicsMaterialOverride? _Surrogate_Element_PhysicsMaterialOverride;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Material => _Surrogate_Element_Material?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Material")] public PhysicalBone2DTag.ElementProperty.Material? _Surrogate_Element_Material;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Bone2DIndex")] public string _Surrogate_Attribute_Bone2DIndex {
            get => Bone2DIndex != null ? ((System.Int32)Bone2DIndex).ToString() : "";
            set { if (value != "") { Bone2DIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Bone2DIndex")] public string _Surrogate_Element_Bone2DIndex {
            get => Bone2DIndex != null ? ((System.Int32)Bone2DIndex).ToString() : "";
            set { if (value != "") { Bone2DIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? Bone2DIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutoConfigureJoint")] public string _Surrogate_Attribute_AutoConfigureJoint {
            get => AutoConfigureJoint != null ? ((System.Boolean)AutoConfigureJoint).ToString() : "";
            set { if (value != "") { AutoConfigureJoint = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.AutoConfigureJoint")] public string _Surrogate_Element_AutoConfigureJoint {
            get => AutoConfigureJoint != null ? ((System.Boolean)AutoConfigureJoint).ToString() : "";
            set { if (value != "") { AutoConfigureJoint = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AutoConfigureJoint { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SimulatePhysics")] public string _Surrogate_Attribute_SimulatePhysics {
            get => SimulatePhysics != null ? ((System.Boolean)SimulatePhysics).ToString() : "";
            set { if (value != "") { SimulatePhysics = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.SimulatePhysics")] public string _Surrogate_Element_SimulatePhysics {
            get => SimulatePhysics != null ? ((System.Boolean)SimulatePhysics).ToString() : "";
            set { if (value != "") { SimulatePhysics = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SimulatePhysics { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FollowBoneWhenSimulating")] public string _Surrogate_Attribute_FollowBoneWhenSimulating {
            get => FollowBoneWhenSimulating != null ? ((System.Boolean)FollowBoneWhenSimulating).ToString() : "";
            set { if (value != "") { FollowBoneWhenSimulating = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.FollowBoneWhenSimulating")] public string _Surrogate_Element_FollowBoneWhenSimulating {
            get => FollowBoneWhenSimulating != null ? ((System.Boolean)FollowBoneWhenSimulating).ToString() : "";
            set { if (value != "") { FollowBoneWhenSimulating = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FollowBoneWhenSimulating { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Mass")] public string _Surrogate_Attribute_Mass {
            get => Mass != null ? ((System.Single)Mass).ToString() : "";
            set { if (value != "") { Mass = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Mass")] public string _Surrogate_Element_Mass {
            get => Mass != null ? ((System.Single)Mass).ToString() : "";
            set { if (value != "") { Mass = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Mass { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Inertia")] public string _Surrogate_Attribute_Inertia {
            get => Inertia != null ? ((System.Single)Inertia).ToString() : "";
            set { if (value != "") { Inertia = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Inertia")] public string _Surrogate_Element_Inertia {
            get => Inertia != null ? ((System.Single)Inertia).ToString() : "";
            set { if (value != "") { Inertia = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Inertia { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CenterOfMassMode")] public string _Surrogate_Attribute_CenterOfMassMode {
            get => CenterOfMassMode != null ? ((Godot.RigidBody2D.CenterOfMassModeEnum)CenterOfMassMode).ToString() : "";
            set { if (value != "") { CenterOfMassMode = System.Enum.Parse<Godot.RigidBody2D.CenterOfMassModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CenterOfMassMode")] public string _Surrogate_Element_CenterOfMassMode {
            get => CenterOfMassMode != null ? ((Godot.RigidBody2D.CenterOfMassModeEnum)CenterOfMassMode).ToString() : "";
            set { if (value != "") { CenterOfMassMode = System.Enum.Parse<Godot.RigidBody2D.CenterOfMassModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody2D.CenterOfMassModeEnum? CenterOfMassMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GravityScale")] public string _Surrogate_Attribute_GravityScale {
            get => GravityScale != null ? ((System.Single)GravityScale).ToString() : "";
            set { if (value != "") { GravityScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.GravityScale")] public string _Surrogate_Element_GravityScale {
            get => GravityScale != null ? ((System.Single)GravityScale).ToString() : "";
            set { if (value != "") { GravityScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GravityScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CustomIntegrator")] public string _Surrogate_Attribute_CustomIntegrator {
            get => CustomIntegrator != null ? ((System.Boolean)CustomIntegrator).ToString() : "";
            set { if (value != "") { CustomIntegrator = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CustomIntegrator")] public string _Surrogate_Element_CustomIntegrator {
            get => CustomIntegrator != null ? ((System.Boolean)CustomIntegrator).ToString() : "";
            set { if (value != "") { CustomIntegrator = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? CustomIntegrator { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContinuousCd")] public string _Surrogate_Attribute_ContinuousCd {
            get => ContinuousCd != null ? ((Godot.RigidBody2D.CcdMode)ContinuousCd).ToString() : "";
            set { if (value != "") { ContinuousCd = System.Enum.Parse<Godot.RigidBody2D.CcdMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ContinuousCd")] public string _Surrogate_Element_ContinuousCd {
            get => ContinuousCd != null ? ((Godot.RigidBody2D.CcdMode)ContinuousCd).ToString() : "";
            set { if (value != "") { ContinuousCd = System.Enum.Parse<Godot.RigidBody2D.CcdMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody2D.CcdMode? ContinuousCd { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxContactsReported")] public string _Surrogate_Attribute_MaxContactsReported {
            get => MaxContactsReported != null ? ((System.Int32)MaxContactsReported).ToString() : "";
            set { if (value != "") { MaxContactsReported = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.MaxContactsReported")] public string _Surrogate_Element_MaxContactsReported {
            get => MaxContactsReported != null ? ((System.Int32)MaxContactsReported).ToString() : "";
            set { if (value != "") { MaxContactsReported = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? MaxContactsReported { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ContactMonitor")] public string _Surrogate_Attribute_ContactMonitor {
            get => ContactMonitor != null ? ((System.Boolean)ContactMonitor).ToString() : "";
            set { if (value != "") { ContactMonitor = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ContactMonitor")] public string _Surrogate_Element_ContactMonitor {
            get => ContactMonitor != null ? ((System.Boolean)ContactMonitor).ToString() : "";
            set { if (value != "") { ContactMonitor = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ContactMonitor { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Sleeping")] public string _Surrogate_Attribute_Sleeping {
            get => Sleeping != null ? ((System.Boolean)Sleeping).ToString() : "";
            set { if (value != "") { Sleeping = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Sleeping")] public string _Surrogate_Element_Sleeping {
            get => Sleeping != null ? ((System.Boolean)Sleeping).ToString() : "";
            set { if (value != "") { Sleeping = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Sleeping { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CanSleep")] public string _Surrogate_Attribute_CanSleep {
            get => CanSleep != null ? ((System.Boolean)CanSleep).ToString() : "";
            set { if (value != "") { CanSleep = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CanSleep")] public string _Surrogate_Element_CanSleep {
            get => CanSleep != null ? ((System.Boolean)CanSleep).ToString() : "";
            set { if (value != "") { CanSleep = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? CanSleep { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LockRotation")] public string _Surrogate_Attribute_LockRotation {
            get => LockRotation != null ? ((System.Boolean)LockRotation).ToString() : "";
            set { if (value != "") { LockRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.LockRotation")] public string _Surrogate_Element_LockRotation {
            get => LockRotation != null ? ((System.Boolean)LockRotation).ToString() : "";
            set { if (value != "") { LockRotation = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? LockRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Freeze")] public string _Surrogate_Attribute_Freeze {
            get => Freeze != null ? ((System.Boolean)Freeze).ToString() : "";
            set { if (value != "") { Freeze = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Freeze")] public string _Surrogate_Element_Freeze {
            get => Freeze != null ? ((System.Boolean)Freeze).ToString() : "";
            set { if (value != "") { Freeze = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Freeze { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FreezeMode")] public string _Surrogate_Attribute_FreezeMode {
            get => FreezeMode != null ? ((Godot.RigidBody2D.FreezeModeEnum)FreezeMode).ToString() : "";
            set { if (value != "") { FreezeMode = System.Enum.Parse<Godot.RigidBody2D.FreezeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.FreezeMode")] public string _Surrogate_Element_FreezeMode {
            get => FreezeMode != null ? ((Godot.RigidBody2D.FreezeModeEnum)FreezeMode).ToString() : "";
            set { if (value != "") { FreezeMode = System.Enum.Parse<Godot.RigidBody2D.FreezeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody2D.FreezeModeEnum? FreezeMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearDampMode")] public string _Surrogate_Attribute_LinearDampMode {
            get => LinearDampMode != null ? ((Godot.RigidBody2D.DampMode)LinearDampMode).ToString() : "";
            set { if (value != "") { LinearDampMode = System.Enum.Parse<Godot.RigidBody2D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.LinearDampMode")] public string _Surrogate_Element_LinearDampMode {
            get => LinearDampMode != null ? ((Godot.RigidBody2D.DampMode)LinearDampMode).ToString() : "";
            set { if (value != "") { LinearDampMode = System.Enum.Parse<Godot.RigidBody2D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody2D.DampMode? LinearDampMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearDamp")] public string _Surrogate_Attribute_LinearDamp {
            get => LinearDamp != null ? ((System.Single)LinearDamp).ToString() : "";
            set { if (value != "") { LinearDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.LinearDamp")] public string _Surrogate_Element_LinearDamp {
            get => LinearDamp != null ? ((System.Single)LinearDamp).ToString() : "";
            set { if (value != "") { LinearDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? LinearDamp { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularVelocity")] public string _Surrogate_Attribute_AngularVelocity {
            get => AngularVelocity != null ? ((System.Single)AngularVelocity).ToString() : "";
            set { if (value != "") { AngularVelocity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.AngularVelocity")] public string _Surrogate_Element_AngularVelocity {
            get => AngularVelocity != null ? ((System.Single)AngularVelocity).ToString() : "";
            set { if (value != "") { AngularVelocity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularVelocity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularDampMode")] public string _Surrogate_Attribute_AngularDampMode {
            get => AngularDampMode != null ? ((Godot.RigidBody2D.DampMode)AngularDampMode).ToString() : "";
            set { if (value != "") { AngularDampMode = System.Enum.Parse<Godot.RigidBody2D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.AngularDampMode")] public string _Surrogate_Element_AngularDampMode {
            get => AngularDampMode != null ? ((Godot.RigidBody2D.DampMode)AngularDampMode).ToString() : "";
            set { if (value != "") { AngularDampMode = System.Enum.Parse<Godot.RigidBody2D.DampMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.RigidBody2D.DampMode? AngularDampMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AngularDamp")] public string _Surrogate_Attribute_AngularDamp {
            get => AngularDamp != null ? ((System.Single)AngularDamp).ToString() : "";
            set { if (value != "") { AngularDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.AngularDamp")] public string _Surrogate_Element_AngularDamp {
            get => AngularDamp != null ? ((System.Single)AngularDamp).ToString() : "";
            set { if (value != "") { AngularDamp = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AngularDamp { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ConstantTorque")] public string _Surrogate_Attribute_ConstantTorque {
            get => ConstantTorque != null ? ((System.Single)ConstantTorque).ToString() : "";
            set { if (value != "") { ConstantTorque = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ConstantTorque")] public string _Surrogate_Element_ConstantTorque {
            get => ConstantTorque != null ? ((System.Single)ConstantTorque).ToString() : "";
            set { if (value != "") { ConstantTorque = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ConstantTorque { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DisableMode")] public string _Surrogate_Attribute_DisableMode {
            get => DisableMode != null ? ((Godot.CollisionObject2D.DisableModeEnum)DisableMode).ToString() : "";
            set { if (value != "") { DisableMode = System.Enum.Parse<Godot.CollisionObject2D.DisableModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.DisableMode")] public string _Surrogate_Element_DisableMode {
            get => DisableMode != null ? ((Godot.CollisionObject2D.DisableModeEnum)DisableMode).ToString() : "";
            set { if (value != "") { DisableMode = System.Enum.Parse<Godot.CollisionObject2D.DisableModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CollisionObject2D.DisableModeEnum? DisableMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionLayer")] public string _Surrogate_Attribute_CollisionLayer {
            get => CollisionLayer != null ? ((System.UInt32)CollisionLayer).ToString() : "";
            set { if (value != "") { CollisionLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CollisionLayer")] public string _Surrogate_Element_CollisionLayer {
            get => CollisionLayer != null ? ((System.UInt32)CollisionLayer).ToString() : "";
            set { if (value != "") { CollisionLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CollisionLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionMask")] public string _Surrogate_Attribute_CollisionMask {
            get => CollisionMask != null ? ((System.UInt32)CollisionMask).ToString() : "";
            set { if (value != "") { CollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CollisionMask")] public string _Surrogate_Element_CollisionMask {
            get => CollisionMask != null ? ((System.UInt32)CollisionMask).ToString() : "";
            set { if (value != "") { CollisionMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CollisionMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CollisionPriority")] public string _Surrogate_Attribute_CollisionPriority {
            get => CollisionPriority != null ? ((System.Single)CollisionPriority).ToString() : "";
            set { if (value != "") { CollisionPriority = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.CollisionPriority")] public string _Surrogate_Element_CollisionPriority {
            get => CollisionPriority != null ? ((System.Single)CollisionPriority).ToString() : "";
            set { if (value != "") { CollisionPriority = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? CollisionPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InputPickable")] public string _Surrogate_Attribute_InputPickable {
            get => InputPickable != null ? ((System.Boolean)InputPickable).ToString() : "";
            set { if (value != "") { InputPickable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.InputPickable")] public string _Surrogate_Element_InputPickable {
            get => InputPickable != null ? ((System.Boolean)InputPickable).ToString() : "";
            set { if (value != "") { InputPickable = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? InputPickable { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Attribute_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Rotation")] public string _Surrogate_Element_Rotation {
            get => Rotation != null ? ((System.Single)Rotation).ToString() : "";
            set { if (value != "") { Rotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Rotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_Attribute_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.RotationDegrees")] public string _Surrogate_Element_RotationDegrees {
            get => RotationDegrees != null ? ((System.Single)RotationDegrees).ToString() : "";
            set { if (value != "") { RotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Skew")] public string _Surrogate_Attribute_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Skew")] public string _Surrogate_Element_Skew {
            get => Skew != null ? ((System.Single)Skew).ToString() : "";
            set { if (value != "") { Skew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Skew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_Attribute_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.GlobalRotation")] public string _Surrogate_Element_GlobalRotation {
            get => GlobalRotation != null ? ((System.Single)GlobalRotation).ToString() : "";
            set { if (value != "") { GlobalRotation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_Attribute_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.GlobalRotationDegrees")] public string _Surrogate_Element_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((System.Single)GlobalRotationDegrees).ToString() : "";
            set { if (value != "") { GlobalRotationDegrees = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalRotationDegrees { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalSkew")] public string _Surrogate_Attribute_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.GlobalSkew")] public string _Surrogate_Element_GlobalSkew {
            get => GlobalSkew != null ? ((System.Single)GlobalSkew).ToString() : "";
            set { if (value != "") { GlobalSkew = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlobalSkew { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShowBehindParent")] public string _Surrogate_Attribute_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ShowBehindParent")] public string _Surrogate_Element_ShowBehindParent {
            get => ShowBehindParent != null ? ((System.Boolean)ShowBehindParent).ToString() : "";
            set { if (value != "") { ShowBehindParent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShowBehindParent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClipChildren")] public string _Surrogate_Attribute_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ClipChildren")] public string _Surrogate_Element_ClipChildren {
            get => ClipChildren != null ? ((Godot.CanvasItem.ClipChildrenMode)ClipChildren).ToString() : "";
            set { if (value != "") { ClipChildren = System.Enum.Parse<Godot.CanvasItem.ClipChildrenMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.ClipChildrenMode? ClipChildren { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LightMask")] public string _Surrogate_Attribute_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.LightMask")] public string _Surrogate_Element_LightMask {
            get => LightMask != null ? ((System.Int32)LightMask).ToString() : "";
            set { if (value != "") { LightMask = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? LightMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityLayer")] public string _Surrogate_Attribute_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.VisibilityLayer")] public string _Surrogate_Element_VisibilityLayer {
            get => VisibilityLayer != null ? ((System.UInt32)VisibilityLayer).ToString() : "";
            set { if (value != "") { VisibilityLayer = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? VisibilityLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZIndex")] public string _Surrogate_Attribute_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ZIndex")] public string _Surrogate_Element_ZIndex {
            get => ZIndex != null ? ((System.Int32)ZIndex).ToString() : "";
            set { if (value != "") { ZIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ZIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ZAsRelative")] public string _Surrogate_Attribute_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ZAsRelative")] public string _Surrogate_Element_ZAsRelative {
            get => ZAsRelative != null ? ((System.Boolean)ZAsRelative).ToString() : "";
            set { if (value != "") { ZAsRelative = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ZAsRelative { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "YSortEnabled")] public string _Surrogate_Attribute_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.YSortEnabled")] public string _Surrogate_Element_YSortEnabled {
            get => YSortEnabled != null ? ((System.Boolean)YSortEnabled).ToString() : "";
            set { if (value != "") { YSortEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? YSortEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.CanvasItem.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.CanvasItem.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureRepeat")] public string _Surrogate_Attribute_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.TextureRepeat")] public string _Surrogate_Element_TextureRepeat {
            get => TextureRepeat != null ? ((Godot.CanvasItem.TextureRepeatEnum)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Enum.Parse<Godot.CanvasItem.TextureRepeatEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.CanvasItem.TextureRepeatEnum? TextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseParentMaterial")] public string _Surrogate_Attribute_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.UseParentMaterial")] public string _Surrogate_Element_UseParentMaterial {
            get => UseParentMaterial != null ? ((System.Boolean)UseParentMaterial).ToString() : "";
            set { if (value != "") { UseParentMaterial = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseParentMaterial { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "PhysicalBone2D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CenterOfMass")] public string _Surrogate_CenterOfMass {
            get => CenterOfMass != null ? ((Archwyvern.Nxml.Translators.Vector2)CenterOfMass).ToString() : "";
            set => CenterOfMass = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? CenterOfMass;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "LinearVelocity")] public string _Surrogate_LinearVelocity {
            get => LinearVelocity != null ? ((Archwyvern.Nxml.Translators.Vector2)LinearVelocity).ToString() : "";
            set => LinearVelocity = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? LinearVelocity;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ConstantForce")] public string _Surrogate_ConstantForce {
            get => ConstantForce != null ? ((Archwyvern.Nxml.Translators.Vector2)ConstantForce).ToString() : "";
            set => ConstantForce = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? ConstantForce;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector2)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector2)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalScale")] public string _Surrogate_GlobalScale {
            get => GlobalScale != null ? ((Archwyvern.Nxml.Translators.Vector2)GlobalScale).ToString() : "";
            set => GlobalScale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? GlobalScale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Modulate")] public string _Surrogate_Modulate {
            get => Modulate != null ? ((Archwyvern.Nxml.Translators.Color)Modulate).ToString() : "";
            set => Modulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Modulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SelfModulate")] public string _Surrogate_SelfModulate {
            get => SelfModulate != null ? ((Archwyvern.Nxml.Translators.Color)SelfModulate).ToString() : "";
            set => SelfModulate = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SelfModulate;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.PhysicalBone2D) return alt;
            var obj = (Godot.PhysicalBone2D)alt ?? new Godot.PhysicalBone2D();

            // Attributes
            if (Bone2DIndex != null) obj.Bone2DIndex = (System.Int32)Bone2DIndex;
            if (AutoConfigureJoint != null) obj.AutoConfigureJoint = (System.Boolean)AutoConfigureJoint;
            if (SimulatePhysics != null) obj.SimulatePhysics = (System.Boolean)SimulatePhysics;
            if (FollowBoneWhenSimulating != null) obj.FollowBoneWhenSimulating = (System.Boolean)FollowBoneWhenSimulating;
            if (Mass != null) obj.Mass = (System.Single)Mass;
            if (Inertia != null) obj.Inertia = (System.Single)Inertia;
            if (CenterOfMassMode != null) obj.CenterOfMassMode = (Godot.RigidBody2D.CenterOfMassModeEnum)CenterOfMassMode;
            if (GravityScale != null) obj.GravityScale = (System.Single)GravityScale;
            if (CustomIntegrator != null) obj.CustomIntegrator = (System.Boolean)CustomIntegrator;
            if (ContinuousCd != null) obj.ContinuousCd = (Godot.RigidBody2D.CcdMode)ContinuousCd;
            if (MaxContactsReported != null) obj.MaxContactsReported = (System.Int32)MaxContactsReported;
            if (ContactMonitor != null) obj.ContactMonitor = (System.Boolean)ContactMonitor;
            if (Sleeping != null) obj.Sleeping = (System.Boolean)Sleeping;
            if (CanSleep != null) obj.CanSleep = (System.Boolean)CanSleep;
            if (LockRotation != null) obj.LockRotation = (System.Boolean)LockRotation;
            if (Freeze != null) obj.Freeze = (System.Boolean)Freeze;
            if (FreezeMode != null) obj.FreezeMode = (Godot.RigidBody2D.FreezeModeEnum)FreezeMode;
            if (LinearDampMode != null) obj.LinearDampMode = (Godot.RigidBody2D.DampMode)LinearDampMode;
            if (LinearDamp != null) obj.LinearDamp = (System.Single)LinearDamp;
            if (AngularVelocity != null) obj.AngularVelocity = (System.Single)AngularVelocity;
            if (AngularDampMode != null) obj.AngularDampMode = (Godot.RigidBody2D.DampMode)AngularDampMode;
            if (AngularDamp != null) obj.AngularDamp = (System.Single)AngularDamp;
            if (ConstantTorque != null) obj.ConstantTorque = (System.Single)ConstantTorque;
            if (DisableMode != null) obj.DisableMode = (Godot.CollisionObject2D.DisableModeEnum)DisableMode;
            if (CollisionLayer != null) obj.CollisionLayer = (System.UInt32)CollisionLayer;
            if (CollisionMask != null) obj.CollisionMask = (System.UInt32)CollisionMask;
            if (CollisionPriority != null) obj.CollisionPriority = (System.Single)CollisionPriority;
            if (InputPickable != null) obj.InputPickable = (System.Boolean)InputPickable;
            if (Rotation != null) obj.Rotation = (System.Single)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (System.Single)RotationDegrees;
            if (Skew != null) obj.Skew = (System.Single)Skew;
            if (GlobalRotation != null) obj.GlobalRotation = (System.Single)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (System.Single)GlobalRotationDegrees;
            if (GlobalSkew != null) obj.GlobalSkew = (System.Single)GlobalSkew;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (ShowBehindParent != null) obj.ShowBehindParent = (System.Boolean)ShowBehindParent;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (ClipChildren != null) obj.ClipChildren = (Godot.CanvasItem.ClipChildrenMode)ClipChildren;
            if (LightMask != null) obj.LightMask = (System.Int32)LightMask;
            if (VisibilityLayer != null) obj.VisibilityLayer = (System.UInt32)VisibilityLayer;
            if (ZIndex != null) obj.ZIndex = (System.Int32)ZIndex;
            if (ZAsRelative != null) obj.ZAsRelative = (System.Boolean)ZAsRelative;
            if (YSortEnabled != null) obj.YSortEnabled = (System.Boolean)YSortEnabled;
            if (TextureFilter != null) obj.TextureFilter = (Godot.CanvasItem.TextureFilterEnum)TextureFilter;
            if (TextureRepeat != null) obj.TextureRepeat = (Godot.CanvasItem.TextureRepeatEnum)TextureRepeat;
            if (UseParentMaterial != null) obj.UseParentMaterial = (System.Boolean)UseParentMaterial;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (CenterOfMass != null) obj.CenterOfMass = (Archwyvern.Nxml.Translators.Vector2)CenterOfMass;
            if (LinearVelocity != null) obj.LinearVelocity = (Archwyvern.Nxml.Translators.Vector2)LinearVelocity;
            if (ConstantForce != null) obj.ConstantForce = (Archwyvern.Nxml.Translators.Vector2)ConstantForce;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector2)Position;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector2)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector2)GlobalPosition;
            if (GlobalScale != null) obj.GlobalScale = (Archwyvern.Nxml.Translators.Vector2)GlobalScale;
            if (Modulate != null) obj.Modulate = (Archwyvern.Nxml.Translators.Color)Modulate;
            if (SelfModulate != null) obj.SelfModulate = (Archwyvern.Nxml.Translators.Color)SelfModulate;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (PhysicsMaterialOverride != null) {
                if (((IResourceTag)PhysicsMaterialOverride).ResourcePath != null) {
                    obj.PhysicsMaterialOverride = (Godot.PhysicsMaterial)PhysicsMaterialOverride.Generate(Godot.GD.Load<Godot.PhysicsMaterial>(((IResourceTag)PhysicsMaterialOverride).ResourcePath));
                } else {
                    obj.PhysicsMaterialOverride = (Godot.PhysicsMaterial)PhysicsMaterialOverride.Generate();
                }
            }
            if (Material != null) {
                if (((IResourceTag)Material).ResourcePath != null) {
                    obj.Material = (Godot.Material)Material.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)Material).ResourcePath));
                } else {
                    obj.Material = (Godot.Material)Material.Generate();
                }
            }

            return obj;
        }
    }
}
