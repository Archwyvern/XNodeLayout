// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "OrmMaterial3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class OrmMaterial3DTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.AlbedoTexture")] public class AlbedoTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.OrmTexture")] public class OrmTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.MetallicTexture")] public class MetallicTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.RoughnessTexture")] public class RoughnessTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.EmissionTexture")] public class EmissionTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.NormalTexture")] public class NormalTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.RimTexture")] public class RimTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.ClearcoatTexture")] public class ClearcoatTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.AnisotropyFlowmap")] public class AnisotropyFlowmap
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.AOTexture")] public class AOTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.HeightmapTexture")] public class HeightmapTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.SubsurfScatterTexture")] public class SubsurfScatterTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.SubsurfScatterTransmittanceTexture")] public class SubsurfScatterTransmittanceTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.BacklightTexture")] public class BacklightTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.RefractionTexture")] public class RefractionTexture
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.DetailMask")] public class DetailMask
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.DetailAlbedo")] public class DetailAlbedo
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.DetailNormal")] public class DetailNormal
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "OrmMaterial3D.ElementProperty.NextPass")] public class NextPass
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasItemMaterial", Type = typeof(CanvasItemMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FogMaterial", Type = typeof(FogMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Material", Type = typeof(MaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D", Type = typeof(OrmMaterial3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PanoramaSkyMaterial", Type = typeof(PanoramaSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ParticleProcessMaterial", Type = typeof(ParticleProcessMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PhysicalSkyMaterial", Type = typeof(PhysicalSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderMaterial", Type = typeof(PlaceholderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ProceduralSkyMaterial", Type = typeof(ProceduralSkyMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ShaderMaterial", Type = typeof(ShaderMaterialTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "StandardMaterial3D", Type = typeof(StandardMaterial3DTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AlbedoTexture => _Surrogate_Element_AlbedoTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlbedoTexture")] public OrmMaterial3DTag.ElementProperty.AlbedoTexture? _Surrogate_Element_AlbedoTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? OrmTexture => _Surrogate_Element_OrmTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.OrmTexture")] public OrmMaterial3DTag.ElementProperty.OrmTexture? _Surrogate_Element_OrmTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? MetallicTexture => _Surrogate_Element_MetallicTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.MetallicTexture")] public OrmMaterial3DTag.ElementProperty.MetallicTexture? _Surrogate_Element_MetallicTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? RoughnessTexture => _Surrogate_Element_RoughnessTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RoughnessTexture")] public OrmMaterial3DTag.ElementProperty.RoughnessTexture? _Surrogate_Element_RoughnessTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? EmissionTexture => _Surrogate_Element_EmissionTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionTexture")] public OrmMaterial3DTag.ElementProperty.EmissionTexture? _Surrogate_Element_EmissionTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? NormalTexture => _Surrogate_Element_NormalTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.NormalTexture")] public OrmMaterial3DTag.ElementProperty.NormalTexture? _Surrogate_Element_NormalTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? RimTexture => _Surrogate_Element_RimTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RimTexture")] public OrmMaterial3DTag.ElementProperty.RimTexture? _Surrogate_Element_RimTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ClearcoatTexture => _Surrogate_Element_ClearcoatTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ClearcoatTexture")] public OrmMaterial3DTag.ElementProperty.ClearcoatTexture? _Surrogate_Element_ClearcoatTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AnisotropyFlowmap => _Surrogate_Element_AnisotropyFlowmap?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AnisotropyFlowmap")] public OrmMaterial3DTag.ElementProperty.AnisotropyFlowmap? _Surrogate_Element_AnisotropyFlowmap;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AOTexture => _Surrogate_Element_AOTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AOTexture")] public OrmMaterial3DTag.ElementProperty.AOTexture? _Surrogate_Element_AOTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? HeightmapTexture => _Surrogate_Element_HeightmapTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapTexture")] public OrmMaterial3DTag.ElementProperty.HeightmapTexture? _Surrogate_Element_HeightmapTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? SubsurfScatterTexture => _Surrogate_Element_SubsurfScatterTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterTexture")] public OrmMaterial3DTag.ElementProperty.SubsurfScatterTexture? _Surrogate_Element_SubsurfScatterTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? SubsurfScatterTransmittanceTexture => _Surrogate_Element_SubsurfScatterTransmittanceTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterTransmittanceTexture")] public OrmMaterial3DTag.ElementProperty.SubsurfScatterTransmittanceTexture? _Surrogate_Element_SubsurfScatterTransmittanceTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? BacklightTexture => _Surrogate_Element_BacklightTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.BacklightTexture")] public OrmMaterial3DTag.ElementProperty.BacklightTexture? _Surrogate_Element_BacklightTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? RefractionTexture => _Surrogate_Element_RefractionTexture?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RefractionTexture")] public OrmMaterial3DTag.ElementProperty.RefractionTexture? _Surrogate_Element_RefractionTexture;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DetailMask => _Surrogate_Element_DetailMask?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailMask")] public OrmMaterial3DTag.ElementProperty.DetailMask? _Surrogate_Element_DetailMask;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DetailAlbedo => _Surrogate_Element_DetailAlbedo?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailAlbedo")] public OrmMaterial3DTag.ElementProperty.DetailAlbedo? _Surrogate_Element_DetailAlbedo;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DetailNormal => _Surrogate_Element_DetailNormal?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailNormal")] public OrmMaterial3DTag.ElementProperty.DetailNormal? _Surrogate_Element_DetailNormal;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? NextPass => _Surrogate_Element_NextPass?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.NextPass")] public OrmMaterial3DTag.ElementProperty.NextPass? _Surrogate_Element_NextPass;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Transparency")] public string _Surrogate_Attribute_Transparency {
            get => Transparency != null ? ((Godot.BaseMaterial3D.TransparencyEnum)Transparency).ToString() : "";
            set { if (value != "") { Transparency = System.Enum.Parse<Godot.BaseMaterial3D.TransparencyEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Transparency")] public string _Surrogate_Element_Transparency {
            get => Transparency != null ? ((Godot.BaseMaterial3D.TransparencyEnum)Transparency).ToString() : "";
            set { if (value != "") { Transparency = System.Enum.Parse<Godot.BaseMaterial3D.TransparencyEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TransparencyEnum? Transparency { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaScissorThreshold")] public string _Surrogate_Attribute_AlphaScissorThreshold {
            get => AlphaScissorThreshold != null ? ((System.Single)AlphaScissorThreshold).ToString() : "";
            set { if (value != "") { AlphaScissorThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlphaScissorThreshold")] public string _Surrogate_Element_AlphaScissorThreshold {
            get => AlphaScissorThreshold != null ? ((System.Single)AlphaScissorThreshold).ToString() : "";
            set { if (value != "") { AlphaScissorThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaScissorThreshold { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaHashScale")] public string _Surrogate_Attribute_AlphaHashScale {
            get => AlphaHashScale != null ? ((System.Single)AlphaHashScale).ToString() : "";
            set { if (value != "") { AlphaHashScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlphaHashScale")] public string _Surrogate_Element_AlphaHashScale {
            get => AlphaHashScale != null ? ((System.Single)AlphaHashScale).ToString() : "";
            set { if (value != "") { AlphaHashScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaHashScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaAntialiasingMode")] public string _Surrogate_Attribute_AlphaAntialiasingMode {
            get => AlphaAntialiasingMode != null ? ((Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode).ToString() : "";
            set { if (value != "") { AlphaAntialiasingMode = System.Enum.Parse<Godot.BaseMaterial3D.AlphaAntiAliasing>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlphaAntialiasingMode")] public string _Surrogate_Element_AlphaAntialiasingMode {
            get => AlphaAntialiasingMode != null ? ((Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode).ToString() : "";
            set { if (value != "") { AlphaAntialiasingMode = System.Enum.Parse<Godot.BaseMaterial3D.AlphaAntiAliasing>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.AlphaAntiAliasing? AlphaAntialiasingMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlphaAntialiasingEdge")] public string _Surrogate_Attribute_AlphaAntialiasingEdge {
            get => AlphaAntialiasingEdge != null ? ((System.Single)AlphaAntialiasingEdge).ToString() : "";
            set { if (value != "") { AlphaAntialiasingEdge = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlphaAntialiasingEdge")] public string _Surrogate_Element_AlphaAntialiasingEdge {
            get => AlphaAntialiasingEdge != null ? ((System.Single)AlphaAntialiasingEdge).ToString() : "";
            set { if (value != "") { AlphaAntialiasingEdge = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AlphaAntialiasingEdge { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BlendMode")] public string _Surrogate_Attribute_BlendMode {
            get => BlendMode != null ? ((Godot.BaseMaterial3D.BlendModeEnum)BlendMode).ToString() : "";
            set { if (value != "") { BlendMode = System.Enum.Parse<Godot.BaseMaterial3D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.BlendMode")] public string _Surrogate_Element_BlendMode {
            get => BlendMode != null ? ((Godot.BaseMaterial3D.BlendModeEnum)BlendMode).ToString() : "";
            set { if (value != "") { BlendMode = System.Enum.Parse<Godot.BaseMaterial3D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.BlendModeEnum? BlendMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CullMode")] public string _Surrogate_Attribute_CullMode {
            get => CullMode != null ? ((Godot.BaseMaterial3D.CullModeEnum)CullMode).ToString() : "";
            set { if (value != "") { CullMode = System.Enum.Parse<Godot.BaseMaterial3D.CullModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.CullMode")] public string _Surrogate_Element_CullMode {
            get => CullMode != null ? ((Godot.BaseMaterial3D.CullModeEnum)CullMode).ToString() : "";
            set { if (value != "") { CullMode = System.Enum.Parse<Godot.BaseMaterial3D.CullModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.CullModeEnum? CullMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DepthDrawMode")] public string _Surrogate_Attribute_DepthDrawMode {
            get => DepthDrawMode != null ? ((Godot.BaseMaterial3D.DepthDrawModeEnum)DepthDrawMode).ToString() : "";
            set { if (value != "") { DepthDrawMode = System.Enum.Parse<Godot.BaseMaterial3D.DepthDrawModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DepthDrawMode")] public string _Surrogate_Element_DepthDrawMode {
            get => DepthDrawMode != null ? ((Godot.BaseMaterial3D.DepthDrawModeEnum)DepthDrawMode).ToString() : "";
            set { if (value != "") { DepthDrawMode = System.Enum.Parse<Godot.BaseMaterial3D.DepthDrawModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.DepthDrawModeEnum? DepthDrawMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "NoDepthTest")] public string _Surrogate_Attribute_NoDepthTest {
            get => NoDepthTest != null ? ((System.Boolean)NoDepthTest).ToString() : "";
            set { if (value != "") { NoDepthTest = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.NoDepthTest")] public string _Surrogate_Element_NoDepthTest {
            get => NoDepthTest != null ? ((System.Boolean)NoDepthTest).ToString() : "";
            set { if (value != "") { NoDepthTest = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? NoDepthTest { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadingMode")] public string _Surrogate_Attribute_ShadingMode {
            get => ShadingMode != null ? ((Godot.BaseMaterial3D.ShadingModeEnum)ShadingMode).ToString() : "";
            set { if (value != "") { ShadingMode = System.Enum.Parse<Godot.BaseMaterial3D.ShadingModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ShadingMode")] public string _Surrogate_Element_ShadingMode {
            get => ShadingMode != null ? ((Godot.BaseMaterial3D.ShadingModeEnum)ShadingMode).ToString() : "";
            set { if (value != "") { ShadingMode = System.Enum.Parse<Godot.BaseMaterial3D.ShadingModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.ShadingModeEnum? ShadingMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DiffuseMode")] public string _Surrogate_Attribute_DiffuseMode {
            get => DiffuseMode != null ? ((Godot.BaseMaterial3D.DiffuseModeEnum)DiffuseMode).ToString() : "";
            set { if (value != "") { DiffuseMode = System.Enum.Parse<Godot.BaseMaterial3D.DiffuseModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DiffuseMode")] public string _Surrogate_Element_DiffuseMode {
            get => DiffuseMode != null ? ((Godot.BaseMaterial3D.DiffuseModeEnum)DiffuseMode).ToString() : "";
            set { if (value != "") { DiffuseMode = System.Enum.Parse<Godot.BaseMaterial3D.DiffuseModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.DiffuseModeEnum? DiffuseMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpecularMode")] public string _Surrogate_Attribute_SpecularMode {
            get => SpecularMode != null ? ((Godot.BaseMaterial3D.SpecularModeEnum)SpecularMode).ToString() : "";
            set { if (value != "") { SpecularMode = System.Enum.Parse<Godot.BaseMaterial3D.SpecularModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SpecularMode")] public string _Surrogate_Element_SpecularMode {
            get => SpecularMode != null ? ((Godot.BaseMaterial3D.SpecularModeEnum)SpecularMode).ToString() : "";
            set { if (value != "") { SpecularMode = System.Enum.Parse<Godot.BaseMaterial3D.SpecularModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.SpecularModeEnum? SpecularMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DisableAmbientLight")] public string _Surrogate_Attribute_DisableAmbientLight {
            get => DisableAmbientLight != null ? ((System.Boolean)DisableAmbientLight).ToString() : "";
            set { if (value != "") { DisableAmbientLight = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DisableAmbientLight")] public string _Surrogate_Element_DisableAmbientLight {
            get => DisableAmbientLight != null ? ((System.Boolean)DisableAmbientLight).ToString() : "";
            set { if (value != "") { DisableAmbientLight = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DisableAmbientLight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VertexColorUseAsAlbedo")] public string _Surrogate_Attribute_VertexColorUseAsAlbedo {
            get => VertexColorUseAsAlbedo != null ? ((System.Boolean)VertexColorUseAsAlbedo).ToString() : "";
            set { if (value != "") { VertexColorUseAsAlbedo = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.VertexColorUseAsAlbedo")] public string _Surrogate_Element_VertexColorUseAsAlbedo {
            get => VertexColorUseAsAlbedo != null ? ((System.Boolean)VertexColorUseAsAlbedo).ToString() : "";
            set { if (value != "") { VertexColorUseAsAlbedo = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? VertexColorUseAsAlbedo { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VertexColorIsSrgb")] public string _Surrogate_Attribute_VertexColorIsSrgb {
            get => VertexColorIsSrgb != null ? ((System.Boolean)VertexColorIsSrgb).ToString() : "";
            set { if (value != "") { VertexColorIsSrgb = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.VertexColorIsSrgb")] public string _Surrogate_Element_VertexColorIsSrgb {
            get => VertexColorIsSrgb != null ? ((System.Boolean)VertexColorIsSrgb).ToString() : "";
            set { if (value != "") { VertexColorIsSrgb = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? VertexColorIsSrgb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlbedoTextureForceSrgb")] public string _Surrogate_Attribute_AlbedoTextureForceSrgb {
            get => AlbedoTextureForceSrgb != null ? ((System.Boolean)AlbedoTextureForceSrgb).ToString() : "";
            set { if (value != "") { AlbedoTextureForceSrgb = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlbedoTextureForceSrgb")] public string _Surrogate_Element_AlbedoTextureForceSrgb {
            get => AlbedoTextureForceSrgb != null ? ((System.Boolean)AlbedoTextureForceSrgb).ToString() : "";
            set { if (value != "") { AlbedoTextureForceSrgb = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AlbedoTextureForceSrgb { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlbedoTextureMsdf")] public string _Surrogate_Attribute_AlbedoTextureMsdf {
            get => AlbedoTextureMsdf != null ? ((System.Boolean)AlbedoTextureMsdf).ToString() : "";
            set { if (value != "") { AlbedoTextureMsdf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AlbedoTextureMsdf")] public string _Surrogate_Element_AlbedoTextureMsdf {
            get => AlbedoTextureMsdf != null ? ((System.Boolean)AlbedoTextureMsdf).ToString() : "";
            set { if (value != "") { AlbedoTextureMsdf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AlbedoTextureMsdf { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Metallic")] public string _Surrogate_Attribute_Metallic {
            get => Metallic != null ? ((System.Single)Metallic).ToString() : "";
            set { if (value != "") { Metallic = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Metallic")] public string _Surrogate_Element_Metallic {
            get => Metallic != null ? ((System.Single)Metallic).ToString() : "";
            set { if (value != "") { Metallic = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Metallic { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MetallicSpecular")] public string _Surrogate_Attribute_MetallicSpecular {
            get => MetallicSpecular != null ? ((System.Single)MetallicSpecular).ToString() : "";
            set { if (value != "") { MetallicSpecular = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.MetallicSpecular")] public string _Surrogate_Element_MetallicSpecular {
            get => MetallicSpecular != null ? ((System.Single)MetallicSpecular).ToString() : "";
            set { if (value != "") { MetallicSpecular = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MetallicSpecular { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MetallicTextureChannel")] public string _Surrogate_Attribute_MetallicTextureChannel {
            get => MetallicTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)MetallicTextureChannel).ToString() : "";
            set { if (value != "") { MetallicTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.MetallicTextureChannel")] public string _Surrogate_Element_MetallicTextureChannel {
            get => MetallicTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)MetallicTextureChannel).ToString() : "";
            set { if (value != "") { MetallicTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureChannel? MetallicTextureChannel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Roughness")] public string _Surrogate_Attribute_Roughness {
            get => Roughness != null ? ((System.Single)Roughness).ToString() : "";
            set { if (value != "") { Roughness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Roughness")] public string _Surrogate_Element_Roughness {
            get => Roughness != null ? ((System.Single)Roughness).ToString() : "";
            set { if (value != "") { Roughness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Roughness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RoughnessTextureChannel")] public string _Surrogate_Attribute_RoughnessTextureChannel {
            get => RoughnessTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)RoughnessTextureChannel).ToString() : "";
            set { if (value != "") { RoughnessTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RoughnessTextureChannel")] public string _Surrogate_Element_RoughnessTextureChannel {
            get => RoughnessTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)RoughnessTextureChannel).ToString() : "";
            set { if (value != "") { RoughnessTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureChannel? RoughnessTextureChannel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionEnabled")] public string _Surrogate_Attribute_EmissionEnabled {
            get => EmissionEnabled != null ? ((System.Boolean)EmissionEnabled).ToString() : "";
            set { if (value != "") { EmissionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionEnabled")] public string _Surrogate_Element_EmissionEnabled {
            get => EmissionEnabled != null ? ((System.Boolean)EmissionEnabled).ToString() : "";
            set { if (value != "") { EmissionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EmissionEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionEnergyMultiplier")] public string _Surrogate_Attribute_EmissionEnergyMultiplier {
            get => EmissionEnergyMultiplier != null ? ((System.Single)EmissionEnergyMultiplier).ToString() : "";
            set { if (value != "") { EmissionEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionEnergyMultiplier")] public string _Surrogate_Element_EmissionEnergyMultiplier {
            get => EmissionEnergyMultiplier != null ? ((System.Single)EmissionEnergyMultiplier).ToString() : "";
            set { if (value != "") { EmissionEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionEnergyMultiplier { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionIntensity")] public string _Surrogate_Attribute_EmissionIntensity {
            get => EmissionIntensity != null ? ((System.Single)EmissionIntensity).ToString() : "";
            set { if (value != "") { EmissionIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionIntensity")] public string _Surrogate_Element_EmissionIntensity {
            get => EmissionIntensity != null ? ((System.Single)EmissionIntensity).ToString() : "";
            set { if (value != "") { EmissionIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? EmissionIntensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionOperator")] public string _Surrogate_Attribute_EmissionOperator {
            get => EmissionOperator != null ? ((Godot.BaseMaterial3D.EmissionOperatorEnum)EmissionOperator).ToString() : "";
            set { if (value != "") { EmissionOperator = System.Enum.Parse<Godot.BaseMaterial3D.EmissionOperatorEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionOperator")] public string _Surrogate_Element_EmissionOperator {
            get => EmissionOperator != null ? ((Godot.BaseMaterial3D.EmissionOperatorEnum)EmissionOperator).ToString() : "";
            set { if (value != "") { EmissionOperator = System.Enum.Parse<Godot.BaseMaterial3D.EmissionOperatorEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.EmissionOperatorEnum? EmissionOperator { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EmissionOnUV2")] public string _Surrogate_Attribute_EmissionOnUV2 {
            get => EmissionOnUV2 != null ? ((System.Boolean)EmissionOnUV2).ToString() : "";
            set { if (value != "") { EmissionOnUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.EmissionOnUV2")] public string _Surrogate_Element_EmissionOnUV2 {
            get => EmissionOnUV2 != null ? ((System.Boolean)EmissionOnUV2).ToString() : "";
            set { if (value != "") { EmissionOnUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? EmissionOnUV2 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "NormalEnabled")] public string _Surrogate_Attribute_NormalEnabled {
            get => NormalEnabled != null ? ((System.Boolean)NormalEnabled).ToString() : "";
            set { if (value != "") { NormalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.NormalEnabled")] public string _Surrogate_Element_NormalEnabled {
            get => NormalEnabled != null ? ((System.Boolean)NormalEnabled).ToString() : "";
            set { if (value != "") { NormalEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? NormalEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "NormalScale")] public string _Surrogate_Attribute_NormalScale {
            get => NormalScale != null ? ((System.Single)NormalScale).ToString() : "";
            set { if (value != "") { NormalScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.NormalScale")] public string _Surrogate_Element_NormalScale {
            get => NormalScale != null ? ((System.Single)NormalScale).ToString() : "";
            set { if (value != "") { NormalScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? NormalScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RimEnabled")] public string _Surrogate_Attribute_RimEnabled {
            get => RimEnabled != null ? ((System.Boolean)RimEnabled).ToString() : "";
            set { if (value != "") { RimEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RimEnabled")] public string _Surrogate_Element_RimEnabled {
            get => RimEnabled != null ? ((System.Boolean)RimEnabled).ToString() : "";
            set { if (value != "") { RimEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? RimEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rim")] public string _Surrogate_Attribute_Rim {
            get => Rim != null ? ((System.Single)Rim).ToString() : "";
            set { if (value != "") { Rim = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Rim")] public string _Surrogate_Element_Rim {
            get => Rim != null ? ((System.Single)Rim).ToString() : "";
            set { if (value != "") { Rim = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Rim { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RimTint")] public string _Surrogate_Attribute_RimTint {
            get => RimTint != null ? ((System.Single)RimTint).ToString() : "";
            set { if (value != "") { RimTint = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RimTint")] public string _Surrogate_Element_RimTint {
            get => RimTint != null ? ((System.Single)RimTint).ToString() : "";
            set { if (value != "") { RimTint = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RimTint { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClearcoatEnabled")] public string _Surrogate_Attribute_ClearcoatEnabled {
            get => ClearcoatEnabled != null ? ((System.Boolean)ClearcoatEnabled).ToString() : "";
            set { if (value != "") { ClearcoatEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ClearcoatEnabled")] public string _Surrogate_Element_ClearcoatEnabled {
            get => ClearcoatEnabled != null ? ((System.Boolean)ClearcoatEnabled).ToString() : "";
            set { if (value != "") { ClearcoatEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ClearcoatEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Clearcoat")] public string _Surrogate_Attribute_Clearcoat {
            get => Clearcoat != null ? ((System.Single)Clearcoat).ToString() : "";
            set { if (value != "") { Clearcoat = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Clearcoat")] public string _Surrogate_Element_Clearcoat {
            get => Clearcoat != null ? ((System.Single)Clearcoat).ToString() : "";
            set { if (value != "") { Clearcoat = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Clearcoat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ClearcoatRoughness")] public string _Surrogate_Attribute_ClearcoatRoughness {
            get => ClearcoatRoughness != null ? ((System.Single)ClearcoatRoughness).ToString() : "";
            set { if (value != "") { ClearcoatRoughness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ClearcoatRoughness")] public string _Surrogate_Element_ClearcoatRoughness {
            get => ClearcoatRoughness != null ? ((System.Single)ClearcoatRoughness).ToString() : "";
            set { if (value != "") { ClearcoatRoughness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ClearcoatRoughness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AnisotropyEnabled")] public string _Surrogate_Attribute_AnisotropyEnabled {
            get => AnisotropyEnabled != null ? ((System.Boolean)AnisotropyEnabled).ToString() : "";
            set { if (value != "") { AnisotropyEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AnisotropyEnabled")] public string _Surrogate_Element_AnisotropyEnabled {
            get => AnisotropyEnabled != null ? ((System.Boolean)AnisotropyEnabled).ToString() : "";
            set { if (value != "") { AnisotropyEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AnisotropyEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Anisotropy")] public string _Surrogate_Attribute_Anisotropy {
            get => Anisotropy != null ? ((System.Single)Anisotropy).ToString() : "";
            set { if (value != "") { Anisotropy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Anisotropy")] public string _Surrogate_Element_Anisotropy {
            get => Anisotropy != null ? ((System.Single)Anisotropy).ToString() : "";
            set { if (value != "") { Anisotropy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Anisotropy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AOEnabled")] public string _Surrogate_Attribute_AOEnabled {
            get => AOEnabled != null ? ((System.Boolean)AOEnabled).ToString() : "";
            set { if (value != "") { AOEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AOEnabled")] public string _Surrogate_Element_AOEnabled {
            get => AOEnabled != null ? ((System.Boolean)AOEnabled).ToString() : "";
            set { if (value != "") { AOEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AOEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AOLightAffect")] public string _Surrogate_Attribute_AOLightAffect {
            get => AOLightAffect != null ? ((System.Single)AOLightAffect).ToString() : "";
            set { if (value != "") { AOLightAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AOLightAffect")] public string _Surrogate_Element_AOLightAffect {
            get => AOLightAffect != null ? ((System.Single)AOLightAffect).ToString() : "";
            set { if (value != "") { AOLightAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AOLightAffect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AOOnUV2")] public string _Surrogate_Attribute_AOOnUV2 {
            get => AOOnUV2 != null ? ((System.Boolean)AOOnUV2).ToString() : "";
            set { if (value != "") { AOOnUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AOOnUV2")] public string _Surrogate_Element_AOOnUV2 {
            get => AOOnUV2 != null ? ((System.Boolean)AOOnUV2).ToString() : "";
            set { if (value != "") { AOOnUV2 = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AOOnUV2 { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AOTextureChannel")] public string _Surrogate_Attribute_AOTextureChannel {
            get => AOTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)AOTextureChannel).ToString() : "";
            set { if (value != "") { AOTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.AOTextureChannel")] public string _Surrogate_Element_AOTextureChannel {
            get => AOTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)AOTextureChannel).ToString() : "";
            set { if (value != "") { AOTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureChannel? AOTextureChannel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapEnabled")] public string _Surrogate_Attribute_HeightmapEnabled {
            get => HeightmapEnabled != null ? ((System.Boolean)HeightmapEnabled).ToString() : "";
            set { if (value != "") { HeightmapEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapEnabled")] public string _Surrogate_Element_HeightmapEnabled {
            get => HeightmapEnabled != null ? ((System.Boolean)HeightmapEnabled).ToString() : "";
            set { if (value != "") { HeightmapEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HeightmapEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapScale")] public string _Surrogate_Attribute_HeightmapScale {
            get => HeightmapScale != null ? ((System.Single)HeightmapScale).ToString() : "";
            set { if (value != "") { HeightmapScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapScale")] public string _Surrogate_Element_HeightmapScale {
            get => HeightmapScale != null ? ((System.Single)HeightmapScale).ToString() : "";
            set { if (value != "") { HeightmapScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HeightmapScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapDeepParallax")] public string _Surrogate_Attribute_HeightmapDeepParallax {
            get => HeightmapDeepParallax != null ? ((System.Boolean)HeightmapDeepParallax).ToString() : "";
            set { if (value != "") { HeightmapDeepParallax = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapDeepParallax")] public string _Surrogate_Element_HeightmapDeepParallax {
            get => HeightmapDeepParallax != null ? ((System.Boolean)HeightmapDeepParallax).ToString() : "";
            set { if (value != "") { HeightmapDeepParallax = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HeightmapDeepParallax { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapMinLayers")] public string _Surrogate_Attribute_HeightmapMinLayers {
            get => HeightmapMinLayers != null ? ((System.Int32)HeightmapMinLayers).ToString() : "";
            set { if (value != "") { HeightmapMinLayers = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapMinLayers")] public string _Surrogate_Element_HeightmapMinLayers {
            get => HeightmapMinLayers != null ? ((System.Int32)HeightmapMinLayers).ToString() : "";
            set { if (value != "") { HeightmapMinLayers = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? HeightmapMinLayers { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapMaxLayers")] public string _Surrogate_Attribute_HeightmapMaxLayers {
            get => HeightmapMaxLayers != null ? ((System.Int32)HeightmapMaxLayers).ToString() : "";
            set { if (value != "") { HeightmapMaxLayers = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapMaxLayers")] public string _Surrogate_Element_HeightmapMaxLayers {
            get => HeightmapMaxLayers != null ? ((System.Int32)HeightmapMaxLayers).ToString() : "";
            set { if (value != "") { HeightmapMaxLayers = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? HeightmapMaxLayers { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapFlipTangent")] public string _Surrogate_Attribute_HeightmapFlipTangent {
            get => HeightmapFlipTangent != null ? ((System.Boolean)HeightmapFlipTangent).ToString() : "";
            set { if (value != "") { HeightmapFlipTangent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapFlipTangent")] public string _Surrogate_Element_HeightmapFlipTangent {
            get => HeightmapFlipTangent != null ? ((System.Boolean)HeightmapFlipTangent).ToString() : "";
            set { if (value != "") { HeightmapFlipTangent = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HeightmapFlipTangent { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapFlipBinormal")] public string _Surrogate_Attribute_HeightmapFlipBinormal {
            get => HeightmapFlipBinormal != null ? ((System.Boolean)HeightmapFlipBinormal).ToString() : "";
            set { if (value != "") { HeightmapFlipBinormal = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapFlipBinormal")] public string _Surrogate_Element_HeightmapFlipBinormal {
            get => HeightmapFlipBinormal != null ? ((System.Boolean)HeightmapFlipBinormal).ToString() : "";
            set { if (value != "") { HeightmapFlipBinormal = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HeightmapFlipBinormal { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HeightmapFlipTexture")] public string _Surrogate_Attribute_HeightmapFlipTexture {
            get => HeightmapFlipTexture != null ? ((System.Boolean)HeightmapFlipTexture).ToString() : "";
            set { if (value != "") { HeightmapFlipTexture = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.HeightmapFlipTexture")] public string _Surrogate_Element_HeightmapFlipTexture {
            get => HeightmapFlipTexture != null ? ((System.Boolean)HeightmapFlipTexture).ToString() : "";
            set { if (value != "") { HeightmapFlipTexture = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? HeightmapFlipTexture { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterEnabled")] public string _Surrogate_Attribute_SubsurfScatterEnabled {
            get => SubsurfScatterEnabled != null ? ((System.Boolean)SubsurfScatterEnabled).ToString() : "";
            set { if (value != "") { SubsurfScatterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterEnabled")] public string _Surrogate_Element_SubsurfScatterEnabled {
            get => SubsurfScatterEnabled != null ? ((System.Boolean)SubsurfScatterEnabled).ToString() : "";
            set { if (value != "") { SubsurfScatterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SubsurfScatterEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterStrength")] public string _Surrogate_Attribute_SubsurfScatterStrength {
            get => SubsurfScatterStrength != null ? ((System.Single)SubsurfScatterStrength).ToString() : "";
            set { if (value != "") { SubsurfScatterStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterStrength")] public string _Surrogate_Element_SubsurfScatterStrength {
            get => SubsurfScatterStrength != null ? ((System.Single)SubsurfScatterStrength).ToString() : "";
            set { if (value != "") { SubsurfScatterStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SubsurfScatterStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterSkinMode")] public string _Surrogate_Attribute_SubsurfScatterSkinMode {
            get => SubsurfScatterSkinMode != null ? ((System.Boolean)SubsurfScatterSkinMode).ToString() : "";
            set { if (value != "") { SubsurfScatterSkinMode = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterSkinMode")] public string _Surrogate_Element_SubsurfScatterSkinMode {
            get => SubsurfScatterSkinMode != null ? ((System.Boolean)SubsurfScatterSkinMode).ToString() : "";
            set { if (value != "") { SubsurfScatterSkinMode = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SubsurfScatterSkinMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterTransmittanceEnabled")] public string _Surrogate_Attribute_SubsurfScatterTransmittanceEnabled {
            get => SubsurfScatterTransmittanceEnabled != null ? ((System.Boolean)SubsurfScatterTransmittanceEnabled).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterTransmittanceEnabled")] public string _Surrogate_Element_SubsurfScatterTransmittanceEnabled {
            get => SubsurfScatterTransmittanceEnabled != null ? ((System.Boolean)SubsurfScatterTransmittanceEnabled).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SubsurfScatterTransmittanceEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterTransmittanceDepth")] public string _Surrogate_Attribute_SubsurfScatterTransmittanceDepth {
            get => SubsurfScatterTransmittanceDepth != null ? ((System.Single)SubsurfScatterTransmittanceDepth).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceDepth = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterTransmittanceDepth")] public string _Surrogate_Element_SubsurfScatterTransmittanceDepth {
            get => SubsurfScatterTransmittanceDepth != null ? ((System.Single)SubsurfScatterTransmittanceDepth).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceDepth = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SubsurfScatterTransmittanceDepth { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterTransmittanceBoost")] public string _Surrogate_Attribute_SubsurfScatterTransmittanceBoost {
            get => SubsurfScatterTransmittanceBoost != null ? ((System.Single)SubsurfScatterTransmittanceBoost).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceBoost = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.SubsurfScatterTransmittanceBoost")] public string _Surrogate_Element_SubsurfScatterTransmittanceBoost {
            get => SubsurfScatterTransmittanceBoost != null ? ((System.Single)SubsurfScatterTransmittanceBoost).ToString() : "";
            set { if (value != "") { SubsurfScatterTransmittanceBoost = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SubsurfScatterTransmittanceBoost { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BacklightEnabled")] public string _Surrogate_Attribute_BacklightEnabled {
            get => BacklightEnabled != null ? ((System.Boolean)BacklightEnabled).ToString() : "";
            set { if (value != "") { BacklightEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.BacklightEnabled")] public string _Surrogate_Element_BacklightEnabled {
            get => BacklightEnabled != null ? ((System.Boolean)BacklightEnabled).ToString() : "";
            set { if (value != "") { BacklightEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? BacklightEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RefractionEnabled")] public string _Surrogate_Attribute_RefractionEnabled {
            get => RefractionEnabled != null ? ((System.Boolean)RefractionEnabled).ToString() : "";
            set { if (value != "") { RefractionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RefractionEnabled")] public string _Surrogate_Element_RefractionEnabled {
            get => RefractionEnabled != null ? ((System.Boolean)RefractionEnabled).ToString() : "";
            set { if (value != "") { RefractionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? RefractionEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RefractionScale")] public string _Surrogate_Attribute_RefractionScale {
            get => RefractionScale != null ? ((System.Single)RefractionScale).ToString() : "";
            set { if (value != "") { RefractionScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RefractionScale")] public string _Surrogate_Element_RefractionScale {
            get => RefractionScale != null ? ((System.Single)RefractionScale).ToString() : "";
            set { if (value != "") { RefractionScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? RefractionScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RefractionTextureChannel")] public string _Surrogate_Attribute_RefractionTextureChannel {
            get => RefractionTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)RefractionTextureChannel).ToString() : "";
            set { if (value != "") { RefractionTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RefractionTextureChannel")] public string _Surrogate_Element_RefractionTextureChannel {
            get => RefractionTextureChannel != null ? ((Godot.BaseMaterial3D.TextureChannel)RefractionTextureChannel).ToString() : "";
            set { if (value != "") { RefractionTextureChannel = System.Enum.Parse<Godot.BaseMaterial3D.TextureChannel>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureChannel? RefractionTextureChannel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DetailEnabled")] public string _Surrogate_Attribute_DetailEnabled {
            get => DetailEnabled != null ? ((System.Boolean)DetailEnabled).ToString() : "";
            set { if (value != "") { DetailEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailEnabled")] public string _Surrogate_Element_DetailEnabled {
            get => DetailEnabled != null ? ((System.Boolean)DetailEnabled).ToString() : "";
            set { if (value != "") { DetailEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DetailEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DetailBlendMode")] public string _Surrogate_Attribute_DetailBlendMode {
            get => DetailBlendMode != null ? ((Godot.BaseMaterial3D.BlendModeEnum)DetailBlendMode).ToString() : "";
            set { if (value != "") { DetailBlendMode = System.Enum.Parse<Godot.BaseMaterial3D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailBlendMode")] public string _Surrogate_Element_DetailBlendMode {
            get => DetailBlendMode != null ? ((Godot.BaseMaterial3D.BlendModeEnum)DetailBlendMode).ToString() : "";
            set { if (value != "") { DetailBlendMode = System.Enum.Parse<Godot.BaseMaterial3D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.BlendModeEnum? DetailBlendMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DetailUVLayer")] public string _Surrogate_Attribute_DetailUVLayer {
            get => DetailUVLayer != null ? ((Godot.BaseMaterial3D.DetailUV)DetailUVLayer).ToString() : "";
            set { if (value != "") { DetailUVLayer = System.Enum.Parse<Godot.BaseMaterial3D.DetailUV>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DetailUVLayer")] public string _Surrogate_Element_DetailUVLayer {
            get => DetailUVLayer != null ? ((Godot.BaseMaterial3D.DetailUV)DetailUVLayer).ToString() : "";
            set { if (value != "") { DetailUVLayer = System.Enum.Parse<Godot.BaseMaterial3D.DetailUV>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.DetailUV? DetailUVLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uv1Triplanar")] public string _Surrogate_Attribute_Uv1Triplanar {
            get => Uv1Triplanar != null ? ((System.Boolean)Uv1Triplanar).ToString() : "";
            set { if (value != "") { Uv1Triplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Uv1Triplanar")] public string _Surrogate_Element_Uv1Triplanar {
            get => Uv1Triplanar != null ? ((System.Boolean)Uv1Triplanar).ToString() : "";
            set { if (value != "") { Uv1Triplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Uv1Triplanar { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uv1TriplanarSharpness")] public string _Surrogate_Attribute_Uv1TriplanarSharpness {
            get => Uv1TriplanarSharpness != null ? ((System.Single)Uv1TriplanarSharpness).ToString() : "";
            set { if (value != "") { Uv1TriplanarSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Uv1TriplanarSharpness")] public string _Surrogate_Element_Uv1TriplanarSharpness {
            get => Uv1TriplanarSharpness != null ? ((System.Single)Uv1TriplanarSharpness).ToString() : "";
            set { if (value != "") { Uv1TriplanarSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Uv1TriplanarSharpness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uv1WorldTriplanar")] public string _Surrogate_Attribute_Uv1WorldTriplanar {
            get => Uv1WorldTriplanar != null ? ((System.Boolean)Uv1WorldTriplanar).ToString() : "";
            set { if (value != "") { Uv1WorldTriplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Uv1WorldTriplanar")] public string _Surrogate_Element_Uv1WorldTriplanar {
            get => Uv1WorldTriplanar != null ? ((System.Boolean)Uv1WorldTriplanar).ToString() : "";
            set { if (value != "") { Uv1WorldTriplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Uv1WorldTriplanar { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2Triplanar")] public string _Surrogate_Attribute_UV2Triplanar {
            get => UV2Triplanar != null ? ((System.Boolean)UV2Triplanar).ToString() : "";
            set { if (value != "") { UV2Triplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.UV2Triplanar")] public string _Surrogate_Element_UV2Triplanar {
            get => UV2Triplanar != null ? ((System.Boolean)UV2Triplanar).ToString() : "";
            set { if (value != "") { UV2Triplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UV2Triplanar { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2TriplanarSharpness")] public string _Surrogate_Attribute_UV2TriplanarSharpness {
            get => UV2TriplanarSharpness != null ? ((System.Single)UV2TriplanarSharpness).ToString() : "";
            set { if (value != "") { UV2TriplanarSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.UV2TriplanarSharpness")] public string _Surrogate_Element_UV2TriplanarSharpness {
            get => UV2TriplanarSharpness != null ? ((System.Single)UV2TriplanarSharpness).ToString() : "";
            set { if (value != "") { UV2TriplanarSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? UV2TriplanarSharpness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2WorldTriplanar")] public string _Surrogate_Attribute_UV2WorldTriplanar {
            get => UV2WorldTriplanar != null ? ((System.Boolean)UV2WorldTriplanar).ToString() : "";
            set { if (value != "") { UV2WorldTriplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.UV2WorldTriplanar")] public string _Surrogate_Element_UV2WorldTriplanar {
            get => UV2WorldTriplanar != null ? ((System.Boolean)UV2WorldTriplanar).ToString() : "";
            set { if (value != "") { UV2WorldTriplanar = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UV2WorldTriplanar { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureFilter")] public string _Surrogate_Attribute_TextureFilter {
            get => TextureFilter != null ? ((Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.BaseMaterial3D.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.TextureFilter")] public string _Surrogate_Element_TextureFilter {
            get => TextureFilter != null ? ((Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter).ToString() : "";
            set { if (value != "") { TextureFilter = System.Enum.Parse<Godot.BaseMaterial3D.TextureFilterEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.TextureFilterEnum? TextureFilter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TextureRepeat")] public string _Surrogate_Attribute_TextureRepeat {
            get => TextureRepeat != null ? ((System.Boolean)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.TextureRepeat")] public string _Surrogate_Element_TextureRepeat {
            get => TextureRepeat != null ? ((System.Boolean)TextureRepeat).ToString() : "";
            set { if (value != "") { TextureRepeat = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TextureRepeat { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DisableReceiveShadows")] public string _Surrogate_Attribute_DisableReceiveShadows {
            get => DisableReceiveShadows != null ? ((System.Boolean)DisableReceiveShadows).ToString() : "";
            set { if (value != "") { DisableReceiveShadows = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DisableReceiveShadows")] public string _Surrogate_Element_DisableReceiveShadows {
            get => DisableReceiveShadows != null ? ((System.Boolean)DisableReceiveShadows).ToString() : "";
            set { if (value != "") { DisableReceiveShadows = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? DisableReceiveShadows { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ShadowToOpacity")] public string _Surrogate_Attribute_ShadowToOpacity {
            get => ShadowToOpacity != null ? ((System.Boolean)ShadowToOpacity).ToString() : "";
            set { if (value != "") { ShadowToOpacity = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ShadowToOpacity")] public string _Surrogate_Element_ShadowToOpacity {
            get => ShadowToOpacity != null ? ((System.Boolean)ShadowToOpacity).ToString() : "";
            set { if (value != "") { ShadowToOpacity = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ShadowToOpacity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BillboardMode")] public string _Surrogate_Attribute_BillboardMode {
            get => BillboardMode != null ? ((Godot.BaseMaterial3D.BillboardModeEnum)BillboardMode).ToString() : "";
            set { if (value != "") { BillboardMode = System.Enum.Parse<Godot.BaseMaterial3D.BillboardModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.BillboardMode")] public string _Surrogate_Element_BillboardMode {
            get => BillboardMode != null ? ((Godot.BaseMaterial3D.BillboardModeEnum)BillboardMode).ToString() : "";
            set { if (value != "") { BillboardMode = System.Enum.Parse<Godot.BaseMaterial3D.BillboardModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.BillboardModeEnum? BillboardMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BillboardKeepScale")] public string _Surrogate_Attribute_BillboardKeepScale {
            get => BillboardKeepScale != null ? ((System.Boolean)BillboardKeepScale).ToString() : "";
            set { if (value != "") { BillboardKeepScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.BillboardKeepScale")] public string _Surrogate_Element_BillboardKeepScale {
            get => BillboardKeepScale != null ? ((System.Boolean)BillboardKeepScale).ToString() : "";
            set { if (value != "") { BillboardKeepScale = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? BillboardKeepScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticlesAnimHFrames")] public string _Surrogate_Attribute_ParticlesAnimHFrames {
            get => ParticlesAnimHFrames != null ? ((System.Int32)ParticlesAnimHFrames).ToString() : "";
            set { if (value != "") { ParticlesAnimHFrames = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ParticlesAnimHFrames")] public string _Surrogate_Element_ParticlesAnimHFrames {
            get => ParticlesAnimHFrames != null ? ((System.Int32)ParticlesAnimHFrames).ToString() : "";
            set { if (value != "") { ParticlesAnimHFrames = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ParticlesAnimHFrames { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticlesAnimVFrames")] public string _Surrogate_Attribute_ParticlesAnimVFrames {
            get => ParticlesAnimVFrames != null ? ((System.Int32)ParticlesAnimVFrames).ToString() : "";
            set { if (value != "") { ParticlesAnimVFrames = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ParticlesAnimVFrames")] public string _Surrogate_Element_ParticlesAnimVFrames {
            get => ParticlesAnimVFrames != null ? ((System.Int32)ParticlesAnimVFrames).ToString() : "";
            set { if (value != "") { ParticlesAnimVFrames = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ParticlesAnimVFrames { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ParticlesAnimLoop")] public string _Surrogate_Attribute_ParticlesAnimLoop {
            get => ParticlesAnimLoop != null ? ((System.Boolean)ParticlesAnimLoop).ToString() : "";
            set { if (value != "") { ParticlesAnimLoop = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ParticlesAnimLoop")] public string _Surrogate_Element_ParticlesAnimLoop {
            get => ParticlesAnimLoop != null ? ((System.Boolean)ParticlesAnimLoop).ToString() : "";
            set { if (value != "") { ParticlesAnimLoop = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ParticlesAnimLoop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Grow")] public string _Surrogate_Attribute_Grow {
            get => Grow != null ? ((System.Boolean)Grow).ToString() : "";
            set { if (value != "") { Grow = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.Grow")] public string _Surrogate_Element_Grow {
            get => Grow != null ? ((System.Boolean)Grow).ToString() : "";
            set { if (value != "") { Grow = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Grow { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GrowAmount")] public string _Surrogate_Attribute_GrowAmount {
            get => GrowAmount != null ? ((System.Single)GrowAmount).ToString() : "";
            set { if (value != "") { GrowAmount = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.GrowAmount")] public string _Surrogate_Element_GrowAmount {
            get => GrowAmount != null ? ((System.Single)GrowAmount).ToString() : "";
            set { if (value != "") { GrowAmount = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GrowAmount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FixedSize")] public string _Surrogate_Attribute_FixedSize {
            get => FixedSize != null ? ((System.Boolean)FixedSize).ToString() : "";
            set { if (value != "") { FixedSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.FixedSize")] public string _Surrogate_Element_FixedSize {
            get => FixedSize != null ? ((System.Boolean)FixedSize).ToString() : "";
            set { if (value != "") { FixedSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FixedSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UsePointSize")] public string _Surrogate_Attribute_UsePointSize {
            get => UsePointSize != null ? ((System.Boolean)UsePointSize).ToString() : "";
            set { if (value != "") { UsePointSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.UsePointSize")] public string _Surrogate_Element_UsePointSize {
            get => UsePointSize != null ? ((System.Boolean)UsePointSize).ToString() : "";
            set { if (value != "") { UsePointSize = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UsePointSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PointSize")] public string _Surrogate_Attribute_PointSize {
            get => PointSize != null ? ((System.Single)PointSize).ToString() : "";
            set { if (value != "") { PointSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.PointSize")] public string _Surrogate_Element_PointSize {
            get => PointSize != null ? ((System.Single)PointSize).ToString() : "";
            set { if (value != "") { PointSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? PointSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UseParticleTrails")] public string _Surrogate_Attribute_UseParticleTrails {
            get => UseParticleTrails != null ? ((System.Boolean)UseParticleTrails).ToString() : "";
            set { if (value != "") { UseParticleTrails = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.UseParticleTrails")] public string _Surrogate_Element_UseParticleTrails {
            get => UseParticleTrails != null ? ((System.Boolean)UseParticleTrails).ToString() : "";
            set { if (value != "") { UseParticleTrails = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UseParticleTrails { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProximityFadeEnabled")] public string _Surrogate_Attribute_ProximityFadeEnabled {
            get => ProximityFadeEnabled != null ? ((System.Boolean)ProximityFadeEnabled).ToString() : "";
            set { if (value != "") { ProximityFadeEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ProximityFadeEnabled")] public string _Surrogate_Element_ProximityFadeEnabled {
            get => ProximityFadeEnabled != null ? ((System.Boolean)ProximityFadeEnabled).ToString() : "";
            set { if (value != "") { ProximityFadeEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ProximityFadeEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProximityFadeDistance")] public string _Surrogate_Attribute_ProximityFadeDistance {
            get => ProximityFadeDistance != null ? ((System.Single)ProximityFadeDistance).ToString() : "";
            set { if (value != "") { ProximityFadeDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ProximityFadeDistance")] public string _Surrogate_Element_ProximityFadeDistance {
            get => ProximityFadeDistance != null ? ((System.Single)ProximityFadeDistance).ToString() : "";
            set { if (value != "") { ProximityFadeDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? ProximityFadeDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MsdfPixelRange")] public string _Surrogate_Attribute_MsdfPixelRange {
            get => MsdfPixelRange != null ? ((System.Single)MsdfPixelRange).ToString() : "";
            set { if (value != "") { MsdfPixelRange = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.MsdfPixelRange")] public string _Surrogate_Element_MsdfPixelRange {
            get => MsdfPixelRange != null ? ((System.Single)MsdfPixelRange).ToString() : "";
            set { if (value != "") { MsdfPixelRange = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MsdfPixelRange { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MsdfOutlineSize")] public string _Surrogate_Attribute_MsdfOutlineSize {
            get => MsdfOutlineSize != null ? ((System.Single)MsdfOutlineSize).ToString() : "";
            set { if (value != "") { MsdfOutlineSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.MsdfOutlineSize")] public string _Surrogate_Element_MsdfOutlineSize {
            get => MsdfOutlineSize != null ? ((System.Single)MsdfOutlineSize).ToString() : "";
            set { if (value != "") { MsdfOutlineSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MsdfOutlineSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeMode")] public string _Surrogate_Attribute_DistanceFadeMode {
            get => DistanceFadeMode != null ? ((Godot.BaseMaterial3D.DistanceFadeModeEnum)DistanceFadeMode).ToString() : "";
            set { if (value != "") { DistanceFadeMode = System.Enum.Parse<Godot.BaseMaterial3D.DistanceFadeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DistanceFadeMode")] public string _Surrogate_Element_DistanceFadeMode {
            get => DistanceFadeMode != null ? ((Godot.BaseMaterial3D.DistanceFadeModeEnum)DistanceFadeMode).ToString() : "";
            set { if (value != "") { DistanceFadeMode = System.Enum.Parse<Godot.BaseMaterial3D.DistanceFadeModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.BaseMaterial3D.DistanceFadeModeEnum? DistanceFadeMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeMinDistance")] public string _Surrogate_Attribute_DistanceFadeMinDistance {
            get => DistanceFadeMinDistance != null ? ((System.Single)DistanceFadeMinDistance).ToString() : "";
            set { if (value != "") { DistanceFadeMinDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DistanceFadeMinDistance")] public string _Surrogate_Element_DistanceFadeMinDistance {
            get => DistanceFadeMinDistance != null ? ((System.Single)DistanceFadeMinDistance).ToString() : "";
            set { if (value != "") { DistanceFadeMinDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DistanceFadeMinDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DistanceFadeMaxDistance")] public string _Surrogate_Attribute_DistanceFadeMaxDistance {
            get => DistanceFadeMaxDistance != null ? ((System.Single)DistanceFadeMaxDistance).ToString() : "";
            set { if (value != "") { DistanceFadeMaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.DistanceFadeMaxDistance")] public string _Surrogate_Element_DistanceFadeMaxDistance {
            get => DistanceFadeMaxDistance != null ? ((System.Single)DistanceFadeMaxDistance).ToString() : "";
            set { if (value != "") { DistanceFadeMaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DistanceFadeMaxDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RenderPriority")] public string _Surrogate_Attribute_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.RenderPriority")] public string _Surrogate_Element_RenderPriority {
            get => RenderPriority != null ? ((System.Int32)RenderPriority).ToString() : "";
            set { if (value != "") { RenderPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? RenderPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "OrmMaterial3D.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AlbedoColor")] public string _Surrogate_AlbedoColor {
            get => AlbedoColor != null ? ((Archwyvern.Nxml.Translators.Color)AlbedoColor).ToString() : "";
            set => AlbedoColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? AlbedoColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Emission")] public string _Surrogate_Emission {
            get => Emission != null ? ((Archwyvern.Nxml.Translators.Color)Emission).ToString() : "";
            set => Emission = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Emission;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SubsurfScatterTransmittanceColor")] public string _Surrogate_SubsurfScatterTransmittanceColor {
            get => SubsurfScatterTransmittanceColor != null ? ((Archwyvern.Nxml.Translators.Color)SubsurfScatterTransmittanceColor).ToString() : "";
            set => SubsurfScatterTransmittanceColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? SubsurfScatterTransmittanceColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Backlight")] public string _Surrogate_Backlight {
            get => Backlight != null ? ((Archwyvern.Nxml.Translators.Color)Backlight).ToString() : "";
            set => Backlight = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? Backlight;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uv1Scale")] public string _Surrogate_Uv1Scale {
            get => Uv1Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Uv1Scale).ToString() : "";
            set => Uv1Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Uv1Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Uv1Offset")] public string _Surrogate_Uv1Offset {
            get => Uv1Offset != null ? ((Archwyvern.Nxml.Translators.Vector3)Uv1Offset).ToString() : "";
            set => Uv1Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Uv1Offset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2Scale")] public string _Surrogate_UV2Scale {
            get => UV2Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)UV2Scale).ToString() : "";
            set => UV2Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? UV2Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UV2Offset")] public string _Surrogate_UV2Offset {
            get => UV2Offset != null ? ((Archwyvern.Nxml.Translators.Vector3)UV2Offset).ToString() : "";
            set => UV2Offset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? UV2Offset;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.OrmMaterial3D) return alt;
            var obj = (Godot.OrmMaterial3D)alt ?? new Godot.OrmMaterial3D();

            // Attributes
            if (Transparency != null) obj.Transparency = (Godot.BaseMaterial3D.TransparencyEnum)Transparency;
            if (AlphaScissorThreshold != null) obj.AlphaScissorThreshold = (System.Single)AlphaScissorThreshold;
            if (AlphaHashScale != null) obj.AlphaHashScale = (System.Single)AlphaHashScale;
            if (AlphaAntialiasingMode != null) obj.AlphaAntialiasingMode = (Godot.BaseMaterial3D.AlphaAntiAliasing)AlphaAntialiasingMode;
            if (AlphaAntialiasingEdge != null) obj.AlphaAntialiasingEdge = (System.Single)AlphaAntialiasingEdge;
            if (BlendMode != null) obj.BlendMode = (Godot.BaseMaterial3D.BlendModeEnum)BlendMode;
            if (CullMode != null) obj.CullMode = (Godot.BaseMaterial3D.CullModeEnum)CullMode;
            if (DepthDrawMode != null) obj.DepthDrawMode = (Godot.BaseMaterial3D.DepthDrawModeEnum)DepthDrawMode;
            if (NoDepthTest != null) obj.NoDepthTest = (System.Boolean)NoDepthTest;
            if (ShadingMode != null) obj.ShadingMode = (Godot.BaseMaterial3D.ShadingModeEnum)ShadingMode;
            if (DiffuseMode != null) obj.DiffuseMode = (Godot.BaseMaterial3D.DiffuseModeEnum)DiffuseMode;
            if (SpecularMode != null) obj.SpecularMode = (Godot.BaseMaterial3D.SpecularModeEnum)SpecularMode;
            if (DisableAmbientLight != null) obj.DisableAmbientLight = (System.Boolean)DisableAmbientLight;
            if (VertexColorUseAsAlbedo != null) obj.VertexColorUseAsAlbedo = (System.Boolean)VertexColorUseAsAlbedo;
            if (VertexColorIsSrgb != null) obj.VertexColorIsSrgb = (System.Boolean)VertexColorIsSrgb;
            if (AlbedoTextureForceSrgb != null) obj.AlbedoTextureForceSrgb = (System.Boolean)AlbedoTextureForceSrgb;
            if (AlbedoTextureMsdf != null) obj.AlbedoTextureMsdf = (System.Boolean)AlbedoTextureMsdf;
            if (Metallic != null) obj.Metallic = (System.Single)Metallic;
            if (MetallicSpecular != null) obj.MetallicSpecular = (System.Single)MetallicSpecular;
            if (MetallicTextureChannel != null) obj.MetallicTextureChannel = (Godot.BaseMaterial3D.TextureChannel)MetallicTextureChannel;
            if (Roughness != null) obj.Roughness = (System.Single)Roughness;
            if (RoughnessTextureChannel != null) obj.RoughnessTextureChannel = (Godot.BaseMaterial3D.TextureChannel)RoughnessTextureChannel;
            if (EmissionEnabled != null) obj.EmissionEnabled = (System.Boolean)EmissionEnabled;
            if (EmissionEnergyMultiplier != null) obj.EmissionEnergyMultiplier = (System.Single)EmissionEnergyMultiplier;
            if (EmissionIntensity != null) obj.EmissionIntensity = (System.Single)EmissionIntensity;
            if (EmissionOperator != null) obj.EmissionOperator = (Godot.BaseMaterial3D.EmissionOperatorEnum)EmissionOperator;
            if (EmissionOnUV2 != null) obj.EmissionOnUV2 = (System.Boolean)EmissionOnUV2;
            if (NormalEnabled != null) obj.NormalEnabled = (System.Boolean)NormalEnabled;
            if (NormalScale != null) obj.NormalScale = (System.Single)NormalScale;
            if (RimEnabled != null) obj.RimEnabled = (System.Boolean)RimEnabled;
            if (Rim != null) obj.Rim = (System.Single)Rim;
            if (RimTint != null) obj.RimTint = (System.Single)RimTint;
            if (ClearcoatEnabled != null) obj.ClearcoatEnabled = (System.Boolean)ClearcoatEnabled;
            if (Clearcoat != null) obj.Clearcoat = (System.Single)Clearcoat;
            if (ClearcoatRoughness != null) obj.ClearcoatRoughness = (System.Single)ClearcoatRoughness;
            if (AnisotropyEnabled != null) obj.AnisotropyEnabled = (System.Boolean)AnisotropyEnabled;
            if (Anisotropy != null) obj.Anisotropy = (System.Single)Anisotropy;
            if (AOEnabled != null) obj.AOEnabled = (System.Boolean)AOEnabled;
            if (AOLightAffect != null) obj.AOLightAffect = (System.Single)AOLightAffect;
            if (AOOnUV2 != null) obj.AOOnUV2 = (System.Boolean)AOOnUV2;
            if (AOTextureChannel != null) obj.AOTextureChannel = (Godot.BaseMaterial3D.TextureChannel)AOTextureChannel;
            if (HeightmapEnabled != null) obj.HeightmapEnabled = (System.Boolean)HeightmapEnabled;
            if (HeightmapScale != null) obj.HeightmapScale = (System.Single)HeightmapScale;
            if (HeightmapDeepParallax != null) obj.HeightmapDeepParallax = (System.Boolean)HeightmapDeepParallax;
            if (HeightmapMinLayers != null) obj.HeightmapMinLayers = (System.Int32)HeightmapMinLayers;
            if (HeightmapMaxLayers != null) obj.HeightmapMaxLayers = (System.Int32)HeightmapMaxLayers;
            if (HeightmapFlipTangent != null) obj.HeightmapFlipTangent = (System.Boolean)HeightmapFlipTangent;
            if (HeightmapFlipBinormal != null) obj.HeightmapFlipBinormal = (System.Boolean)HeightmapFlipBinormal;
            if (HeightmapFlipTexture != null) obj.HeightmapFlipTexture = (System.Boolean)HeightmapFlipTexture;
            if (SubsurfScatterEnabled != null) obj.SubsurfScatterEnabled = (System.Boolean)SubsurfScatterEnabled;
            if (SubsurfScatterStrength != null) obj.SubsurfScatterStrength = (System.Single)SubsurfScatterStrength;
            if (SubsurfScatterSkinMode != null) obj.SubsurfScatterSkinMode = (System.Boolean)SubsurfScatterSkinMode;
            if (SubsurfScatterTransmittanceEnabled != null) obj.SubsurfScatterTransmittanceEnabled = (System.Boolean)SubsurfScatterTransmittanceEnabled;
            if (SubsurfScatterTransmittanceDepth != null) obj.SubsurfScatterTransmittanceDepth = (System.Single)SubsurfScatterTransmittanceDepth;
            if (SubsurfScatterTransmittanceBoost != null) obj.SubsurfScatterTransmittanceBoost = (System.Single)SubsurfScatterTransmittanceBoost;
            if (BacklightEnabled != null) obj.BacklightEnabled = (System.Boolean)BacklightEnabled;
            if (RefractionEnabled != null) obj.RefractionEnabled = (System.Boolean)RefractionEnabled;
            if (RefractionScale != null) obj.RefractionScale = (System.Single)RefractionScale;
            if (RefractionTextureChannel != null) obj.RefractionTextureChannel = (Godot.BaseMaterial3D.TextureChannel)RefractionTextureChannel;
            if (DetailEnabled != null) obj.DetailEnabled = (System.Boolean)DetailEnabled;
            if (DetailBlendMode != null) obj.DetailBlendMode = (Godot.BaseMaterial3D.BlendModeEnum)DetailBlendMode;
            if (DetailUVLayer != null) obj.DetailUVLayer = (Godot.BaseMaterial3D.DetailUV)DetailUVLayer;
            if (Uv1Triplanar != null) obj.Uv1Triplanar = (System.Boolean)Uv1Triplanar;
            if (Uv1TriplanarSharpness != null) obj.Uv1TriplanarSharpness = (System.Single)Uv1TriplanarSharpness;
            if (Uv1WorldTriplanar != null) obj.Uv1WorldTriplanar = (System.Boolean)Uv1WorldTriplanar;
            if (UV2Triplanar != null) obj.UV2Triplanar = (System.Boolean)UV2Triplanar;
            if (UV2TriplanarSharpness != null) obj.UV2TriplanarSharpness = (System.Single)UV2TriplanarSharpness;
            if (UV2WorldTriplanar != null) obj.UV2WorldTriplanar = (System.Boolean)UV2WorldTriplanar;
            if (TextureFilter != null) obj.TextureFilter = (Godot.BaseMaterial3D.TextureFilterEnum)TextureFilter;
            if (TextureRepeat != null) obj.TextureRepeat = (System.Boolean)TextureRepeat;
            if (DisableReceiveShadows != null) obj.DisableReceiveShadows = (System.Boolean)DisableReceiveShadows;
            if (ShadowToOpacity != null) obj.ShadowToOpacity = (System.Boolean)ShadowToOpacity;
            if (BillboardMode != null) obj.BillboardMode = (Godot.BaseMaterial3D.BillboardModeEnum)BillboardMode;
            if (BillboardKeepScale != null) obj.BillboardKeepScale = (System.Boolean)BillboardKeepScale;
            if (ParticlesAnimHFrames != null) obj.ParticlesAnimHFrames = (System.Int32)ParticlesAnimHFrames;
            if (ParticlesAnimVFrames != null) obj.ParticlesAnimVFrames = (System.Int32)ParticlesAnimVFrames;
            if (ParticlesAnimLoop != null) obj.ParticlesAnimLoop = (System.Boolean)ParticlesAnimLoop;
            if (Grow != null) obj.Grow = (System.Boolean)Grow;
            if (GrowAmount != null) obj.GrowAmount = (System.Single)GrowAmount;
            if (FixedSize != null) obj.FixedSize = (System.Boolean)FixedSize;
            if (UsePointSize != null) obj.UsePointSize = (System.Boolean)UsePointSize;
            if (PointSize != null) obj.PointSize = (System.Single)PointSize;
            if (UseParticleTrails != null) obj.UseParticleTrails = (System.Boolean)UseParticleTrails;
            if (ProximityFadeEnabled != null) obj.ProximityFadeEnabled = (System.Boolean)ProximityFadeEnabled;
            if (ProximityFadeDistance != null) obj.ProximityFadeDistance = (System.Single)ProximityFadeDistance;
            if (MsdfPixelRange != null) obj.MsdfPixelRange = (System.Single)MsdfPixelRange;
            if (MsdfOutlineSize != null) obj.MsdfOutlineSize = (System.Single)MsdfOutlineSize;
            if (DistanceFadeMode != null) obj.DistanceFadeMode = (Godot.BaseMaterial3D.DistanceFadeModeEnum)DistanceFadeMode;
            if (DistanceFadeMinDistance != null) obj.DistanceFadeMinDistance = (System.Single)DistanceFadeMinDistance;
            if (DistanceFadeMaxDistance != null) obj.DistanceFadeMaxDistance = (System.Single)DistanceFadeMaxDistance;
            if (RenderPriority != null) obj.RenderPriority = (System.Int32)RenderPriority;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (AlbedoColor != null) obj.AlbedoColor = (Archwyvern.Nxml.Translators.Color)AlbedoColor;
            if (Emission != null) obj.Emission = (Archwyvern.Nxml.Translators.Color)Emission;
            if (SubsurfScatterTransmittanceColor != null) obj.SubsurfScatterTransmittanceColor = (Archwyvern.Nxml.Translators.Color)SubsurfScatterTransmittanceColor;
            if (Backlight != null) obj.Backlight = (Archwyvern.Nxml.Translators.Color)Backlight;
            if (Uv1Scale != null) obj.Uv1Scale = (Archwyvern.Nxml.Translators.Vector3)Uv1Scale;
            if (Uv1Offset != null) obj.Uv1Offset = (Archwyvern.Nxml.Translators.Vector3)Uv1Offset;
            if (UV2Scale != null) obj.UV2Scale = (Archwyvern.Nxml.Translators.Vector3)UV2Scale;
            if (UV2Offset != null) obj.UV2Offset = (Archwyvern.Nxml.Translators.Vector3)UV2Offset;
            // Elements
            if (AlbedoTexture != null) {
                if (((IResourceTag)AlbedoTexture).ResourcePath != null) {
                    obj.AlbedoTexture = (Godot.Texture2D)AlbedoTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AlbedoTexture).ResourcePath));
                } else {
                    obj.AlbedoTexture = (Godot.Texture2D)AlbedoTexture.Generate();
                }
            }
            if (OrmTexture != null) {
                if (((IResourceTag)OrmTexture).ResourcePath != null) {
                    obj.OrmTexture = (Godot.Texture2D)OrmTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)OrmTexture).ResourcePath));
                } else {
                    obj.OrmTexture = (Godot.Texture2D)OrmTexture.Generate();
                }
            }
            if (MetallicTexture != null) {
                if (((IResourceTag)MetallicTexture).ResourcePath != null) {
                    obj.MetallicTexture = (Godot.Texture2D)MetallicTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)MetallicTexture).ResourcePath));
                } else {
                    obj.MetallicTexture = (Godot.Texture2D)MetallicTexture.Generate();
                }
            }
            if (RoughnessTexture != null) {
                if (((IResourceTag)RoughnessTexture).ResourcePath != null) {
                    obj.RoughnessTexture = (Godot.Texture2D)RoughnessTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)RoughnessTexture).ResourcePath));
                } else {
                    obj.RoughnessTexture = (Godot.Texture2D)RoughnessTexture.Generate();
                }
            }
            if (EmissionTexture != null) {
                if (((IResourceTag)EmissionTexture).ResourcePath != null) {
                    obj.EmissionTexture = (Godot.Texture2D)EmissionTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)EmissionTexture).ResourcePath));
                } else {
                    obj.EmissionTexture = (Godot.Texture2D)EmissionTexture.Generate();
                }
            }
            if (NormalTexture != null) {
                if (((IResourceTag)NormalTexture).ResourcePath != null) {
                    obj.NormalTexture = (Godot.Texture2D)NormalTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)NormalTexture).ResourcePath));
                } else {
                    obj.NormalTexture = (Godot.Texture2D)NormalTexture.Generate();
                }
            }
            if (RimTexture != null) {
                if (((IResourceTag)RimTexture).ResourcePath != null) {
                    obj.RimTexture = (Godot.Texture2D)RimTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)RimTexture).ResourcePath));
                } else {
                    obj.RimTexture = (Godot.Texture2D)RimTexture.Generate();
                }
            }
            if (ClearcoatTexture != null) {
                if (((IResourceTag)ClearcoatTexture).ResourcePath != null) {
                    obj.ClearcoatTexture = (Godot.Texture2D)ClearcoatTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)ClearcoatTexture).ResourcePath));
                } else {
                    obj.ClearcoatTexture = (Godot.Texture2D)ClearcoatTexture.Generate();
                }
            }
            if (AnisotropyFlowmap != null) {
                if (((IResourceTag)AnisotropyFlowmap).ResourcePath != null) {
                    obj.AnisotropyFlowmap = (Godot.Texture2D)AnisotropyFlowmap.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AnisotropyFlowmap).ResourcePath));
                } else {
                    obj.AnisotropyFlowmap = (Godot.Texture2D)AnisotropyFlowmap.Generate();
                }
            }
            if (AOTexture != null) {
                if (((IResourceTag)AOTexture).ResourcePath != null) {
                    obj.AOTexture = (Godot.Texture2D)AOTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)AOTexture).ResourcePath));
                } else {
                    obj.AOTexture = (Godot.Texture2D)AOTexture.Generate();
                }
            }
            if (HeightmapTexture != null) {
                if (((IResourceTag)HeightmapTexture).ResourcePath != null) {
                    obj.HeightmapTexture = (Godot.Texture2D)HeightmapTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)HeightmapTexture).ResourcePath));
                } else {
                    obj.HeightmapTexture = (Godot.Texture2D)HeightmapTexture.Generate();
                }
            }
            if (SubsurfScatterTexture != null) {
                if (((IResourceTag)SubsurfScatterTexture).ResourcePath != null) {
                    obj.SubsurfScatterTexture = (Godot.Texture2D)SubsurfScatterTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)SubsurfScatterTexture).ResourcePath));
                } else {
                    obj.SubsurfScatterTexture = (Godot.Texture2D)SubsurfScatterTexture.Generate();
                }
            }
            if (SubsurfScatterTransmittanceTexture != null) {
                if (((IResourceTag)SubsurfScatterTransmittanceTexture).ResourcePath != null) {
                    obj.SubsurfScatterTransmittanceTexture = (Godot.Texture2D)SubsurfScatterTransmittanceTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)SubsurfScatterTransmittanceTexture).ResourcePath));
                } else {
                    obj.SubsurfScatterTransmittanceTexture = (Godot.Texture2D)SubsurfScatterTransmittanceTexture.Generate();
                }
            }
            if (BacklightTexture != null) {
                if (((IResourceTag)BacklightTexture).ResourcePath != null) {
                    obj.BacklightTexture = (Godot.Texture2D)BacklightTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)BacklightTexture).ResourcePath));
                } else {
                    obj.BacklightTexture = (Godot.Texture2D)BacklightTexture.Generate();
                }
            }
            if (RefractionTexture != null) {
                if (((IResourceTag)RefractionTexture).ResourcePath != null) {
                    obj.RefractionTexture = (Godot.Texture2D)RefractionTexture.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)RefractionTexture).ResourcePath));
                } else {
                    obj.RefractionTexture = (Godot.Texture2D)RefractionTexture.Generate();
                }
            }
            if (DetailMask != null) {
                if (((IResourceTag)DetailMask).ResourcePath != null) {
                    obj.DetailMask = (Godot.Texture2D)DetailMask.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)DetailMask).ResourcePath));
                } else {
                    obj.DetailMask = (Godot.Texture2D)DetailMask.Generate();
                }
            }
            if (DetailAlbedo != null) {
                if (((IResourceTag)DetailAlbedo).ResourcePath != null) {
                    obj.DetailAlbedo = (Godot.Texture2D)DetailAlbedo.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)DetailAlbedo).ResourcePath));
                } else {
                    obj.DetailAlbedo = (Godot.Texture2D)DetailAlbedo.Generate();
                }
            }
            if (DetailNormal != null) {
                if (((IResourceTag)DetailNormal).ResourcePath != null) {
                    obj.DetailNormal = (Godot.Texture2D)DetailNormal.Generate(Godot.GD.Load<Godot.Texture2D>(((IResourceTag)DetailNormal).ResourcePath));
                } else {
                    obj.DetailNormal = (Godot.Texture2D)DetailNormal.Generate();
                }
            }
            if (NextPass != null) {
                if (((IResourceTag)NextPass).ResourcePath != null) {
                    obj.NextPass = (Godot.Material)NextPass.Generate(Godot.GD.Load<Godot.Material>(((IResourceTag)NextPass).ResourcePath));
                } else {
                    obj.NextPass = (Godot.Material)NextPass.Generate();
                }
            }

            return obj;
        }
    }
}
