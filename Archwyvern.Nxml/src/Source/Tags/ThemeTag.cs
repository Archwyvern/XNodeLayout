// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Theme", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class ThemeTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Theme.ElementProperty.DefaultFont")] public class DefaultFont
            {
                [System.Xml.Serialization.XmlElement(ElementName = "FontFile", Type = typeof(FontFileTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FontVariation", Type = typeof(FontVariationTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "SystemFont", Type = typeof(SystemFontTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? DefaultFont => _Surrogate_Element_DefaultFont?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.DefaultFont")] public ThemeTag.ElementProperty.DefaultFont? _Surrogate_Element_DefaultFont;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DefaultBaseScale")] public string _Surrogate_Attribute_DefaultBaseScale {
            get => DefaultBaseScale != null ? ((System.Single)DefaultBaseScale).ToString() : "";
            set { if (value != "") { DefaultBaseScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.DefaultBaseScale")] public string _Surrogate_Element_DefaultBaseScale {
            get => DefaultBaseScale != null ? ((System.Single)DefaultBaseScale).ToString() : "";
            set { if (value != "") { DefaultBaseScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? DefaultBaseScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DefaultFontSize")] public string _Surrogate_Attribute_DefaultFontSize {
            get => DefaultFontSize != null ? ((System.Int32)DefaultFontSize).ToString() : "";
            set { if (value != "") { DefaultFontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.DefaultFontSize")] public string _Surrogate_Element_DefaultFontSize {
            get => DefaultFontSize != null ? ((System.Int32)DefaultFontSize).ToString() : "";
            set { if (value != "") { DefaultFontSize = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? DefaultFontSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Theme.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Theme) return alt;
            var obj = (Godot.Theme)alt ?? new Godot.Theme();

            // Attributes
            if (DefaultBaseScale != null) obj.DefaultBaseScale = (System.Single)DefaultBaseScale;
            if (DefaultFontSize != null) obj.DefaultFontSize = (System.Int32)DefaultFontSize;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (DefaultFont != null) {
                if (((IResourceTag)DefaultFont).ResourcePath != null) {
                    obj.DefaultFont = (Godot.Font)DefaultFont.Generate(Godot.GD.Load<Godot.Font>(((IResourceTag)DefaultFont).ResourcePath));
                } else {
                    obj.DefaultFont = (Godot.Font)DefaultFont.Generate();
                }
            }

            return obj;
        }
    }
}
