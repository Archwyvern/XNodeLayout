// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "FontVariation", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class FontVariationTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "FontVariation.ElementProperty.BaseFont")] public class BaseFont
            {
                [System.Xml.Serialization.XmlElement(ElementName = "FontFile", Type = typeof(FontFileTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "FontVariation", Type = typeof(FontVariationTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "SystemFont", Type = typeof(SystemFontTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? BaseFont => _Surrogate_Element_BaseFont?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.BaseFont")] public FontVariationTag.ElementProperty.BaseFont? _Surrogate_Element_BaseFont;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VariationFaceIndex")] public string _Surrogate_Attribute_VariationFaceIndex {
            get => VariationFaceIndex != null ? ((System.Int32)VariationFaceIndex).ToString() : "";
            set { if (value != "") { VariationFaceIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.VariationFaceIndex")] public string _Surrogate_Element_VariationFaceIndex {
            get => VariationFaceIndex != null ? ((System.Int32)VariationFaceIndex).ToString() : "";
            set { if (value != "") { VariationFaceIndex = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? VariationFaceIndex { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VariationEmbolden")] public string _Surrogate_Attribute_VariationEmbolden {
            get => VariationEmbolden != null ? ((System.Single)VariationEmbolden).ToString() : "";
            set { if (value != "") { VariationEmbolden = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.VariationEmbolden")] public string _Surrogate_Element_VariationEmbolden {
            get => VariationEmbolden != null ? ((System.Single)VariationEmbolden).ToString() : "";
            set { if (value != "") { VariationEmbolden = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VariationEmbolden { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpacingGlyph")] public string _Surrogate_Attribute_SpacingGlyph {
            get => SpacingGlyph != null ? ((System.Int32)SpacingGlyph).ToString() : "";
            set { if (value != "") { SpacingGlyph = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.SpacingGlyph")] public string _Surrogate_Element_SpacingGlyph {
            get => SpacingGlyph != null ? ((System.Int32)SpacingGlyph).ToString() : "";
            set { if (value != "") { SpacingGlyph = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SpacingGlyph { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpacingSpace")] public string _Surrogate_Attribute_SpacingSpace {
            get => SpacingSpace != null ? ((System.Int32)SpacingSpace).ToString() : "";
            set { if (value != "") { SpacingSpace = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.SpacingSpace")] public string _Surrogate_Element_SpacingSpace {
            get => SpacingSpace != null ? ((System.Int32)SpacingSpace).ToString() : "";
            set { if (value != "") { SpacingSpace = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SpacingSpace { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpacingTop")] public string _Surrogate_Attribute_SpacingTop {
            get => SpacingTop != null ? ((System.Int32)SpacingTop).ToString() : "";
            set { if (value != "") { SpacingTop = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.SpacingTop")] public string _Surrogate_Element_SpacingTop {
            get => SpacingTop != null ? ((System.Int32)SpacingTop).ToString() : "";
            set { if (value != "") { SpacingTop = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SpacingTop { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpacingBottom")] public string _Surrogate_Attribute_SpacingBottom {
            get => SpacingBottom != null ? ((System.Int32)SpacingBottom).ToString() : "";
            set { if (value != "") { SpacingBottom = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.SpacingBottom")] public string _Surrogate_Element_SpacingBottom {
            get => SpacingBottom != null ? ((System.Int32)SpacingBottom).ToString() : "";
            set { if (value != "") { SpacingBottom = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SpacingBottom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "FontVariation.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.FontVariation) return alt;
            var obj = (Godot.FontVariation)alt ?? new Godot.FontVariation();

            // Attributes
            if (VariationFaceIndex != null) obj.VariationFaceIndex = (System.Int32)VariationFaceIndex;
            if (VariationEmbolden != null) obj.VariationEmbolden = (System.Single)VariationEmbolden;
            if (SpacingGlyph != null) obj.SpacingGlyph = (System.Int32)SpacingGlyph;
            if (SpacingSpace != null) obj.SpacingSpace = (System.Int32)SpacingSpace;
            if (SpacingTop != null) obj.SpacingTop = (System.Int32)SpacingTop;
            if (SpacingBottom != null) obj.SpacingBottom = (System.Int32)SpacingBottom;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (BaseFont != null) {
                if (((IResourceTag)BaseFont).ResourcePath != null) {
                    obj.BaseFont = (Godot.Font)BaseFont.Generate(Godot.GD.Load<Godot.Font>(((IResourceTag)BaseFont).ResourcePath));
                } else {
                    obj.BaseFont = (Godot.Font)BaseFont.Generate();
                }
            }

            return obj;
        }
    }
}
