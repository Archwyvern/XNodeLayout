// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationNodeTransition", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationNodeTransitionTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "AnimationNodeTransition.ElementProperty.XfadeCurve")] public class XfadeCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? XfadeCurve => _Surrogate_Element_XfadeCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.XfadeCurve")] public AnimationNodeTransitionTag.ElementProperty.XfadeCurve? _Surrogate_Element_XfadeCurve;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "XfadeTime")] public string _Surrogate_Attribute_XfadeTime {
            get => XfadeTime != null ? ((System.Double)XfadeTime).ToString() : "";
            set { if (value != "") { XfadeTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.XfadeTime")] public string _Surrogate_Element_XfadeTime {
            get => XfadeTime != null ? ((System.Double)XfadeTime).ToString() : "";
            set { if (value != "") { XfadeTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? XfadeTime { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AllowTransitionToSelf")] public string _Surrogate_Attribute_AllowTransitionToSelf {
            get => AllowTransitionToSelf != null ? ((System.Boolean)AllowTransitionToSelf).ToString() : "";
            set { if (value != "") { AllowTransitionToSelf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.AllowTransitionToSelf")] public string _Surrogate_Element_AllowTransitionToSelf {
            get => AllowTransitionToSelf != null ? ((System.Boolean)AllowTransitionToSelf).ToString() : "";
            set { if (value != "") { AllowTransitionToSelf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AllowTransitionToSelf { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InputCount")] public string _Surrogate_Attribute_InputCount {
            get => InputCount != null ? ((System.Int32)InputCount).ToString() : "";
            set { if (value != "") { InputCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.InputCount")] public string _Surrogate_Element_InputCount {
            get => InputCount != null ? ((System.Int32)InputCount).ToString() : "";
            set { if (value != "") { InputCount = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? InputCount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Sync")] public string _Surrogate_Attribute_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.Sync")] public string _Surrogate_Element_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Sync { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterEnabled")] public string _Surrogate_Attribute_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.FilterEnabled")] public string _Surrogate_Element_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeTransition.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationNodeTransition) return alt;
            var obj = (Godot.AnimationNodeTransition)alt ?? new Godot.AnimationNodeTransition();

            // Attributes
            if (XfadeTime != null) obj.XfadeTime = (System.Double)XfadeTime;
            if (AllowTransitionToSelf != null) obj.AllowTransitionToSelf = (System.Boolean)AllowTransitionToSelf;
            if (InputCount != null) obj.InputCount = (System.Int32)InputCount;
            if (Sync != null) obj.Sync = (System.Boolean)Sync;
            if (FilterEnabled != null) obj.FilterEnabled = (System.Boolean)FilterEnabled;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (XfadeCurve != null) {
                if (((IResourceTag)XfadeCurve).ResourcePath != null) {
                    obj.XfadeCurve = (Godot.Curve)XfadeCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)XfadeCurve).ResourcePath));
                } else {
                    obj.XfadeCurve = (Godot.Curve)XfadeCurve.Generate();
                }
            }

            return obj;
        }
    }
}
