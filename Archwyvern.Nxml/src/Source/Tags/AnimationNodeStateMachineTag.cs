// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationNodeStateMachine", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationNodeStateMachineTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "StateMachineType")] public string _Surrogate_Attribute_StateMachineType {
            get => StateMachineType != null ? ((Godot.AnimationNodeStateMachine.StateMachineTypeEnum)StateMachineType).ToString() : "";
            set { if (value != "") { StateMachineType = System.Enum.Parse<Godot.AnimationNodeStateMachine.StateMachineTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.StateMachineType")] public string _Surrogate_Element_StateMachineType {
            get => StateMachineType != null ? ((Godot.AnimationNodeStateMachine.StateMachineTypeEnum)StateMachineType).ToString() : "";
            set { if (value != "") { StateMachineType = System.Enum.Parse<Godot.AnimationNodeStateMachine.StateMachineTypeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationNodeStateMachine.StateMachineTypeEnum? StateMachineType { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AllowTransitionToSelf")] public string _Surrogate_Attribute_AllowTransitionToSelf {
            get => AllowTransitionToSelf != null ? ((System.Boolean)AllowTransitionToSelf).ToString() : "";
            set { if (value != "") { AllowTransitionToSelf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.AllowTransitionToSelf")] public string _Surrogate_Element_AllowTransitionToSelf {
            get => AllowTransitionToSelf != null ? ((System.Boolean)AllowTransitionToSelf).ToString() : "";
            set { if (value != "") { AllowTransitionToSelf = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AllowTransitionToSelf { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResetEnds")] public string _Surrogate_Attribute_ResetEnds {
            get => ResetEnds != null ? ((System.Boolean)ResetEnds).ToString() : "";
            set { if (value != "") { ResetEnds = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.ResetEnds")] public string _Surrogate_Element_ResetEnds {
            get => ResetEnds != null ? ((System.Boolean)ResetEnds).ToString() : "";
            set { if (value != "") { ResetEnds = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResetEnds { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterEnabled")] public string _Surrogate_Attribute_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.FilterEnabled")] public string _Surrogate_Element_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeStateMachine.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationNodeStateMachine) return alt;
            var obj = (Godot.AnimationNodeStateMachine)alt ?? new Godot.AnimationNodeStateMachine();

            // Attributes
            if (StateMachineType != null) obj.StateMachineType = (Godot.AnimationNodeStateMachine.StateMachineTypeEnum)StateMachineType;
            if (AllowTransitionToSelf != null) obj.AllowTransitionToSelf = (System.Boolean)AllowTransitionToSelf;
            if (ResetEnds != null) obj.ResetEnds = (System.Boolean)ResetEnds;
            if (FilterEnabled != null) obj.FilterEnabled = (System.Boolean)FilterEnabled;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
