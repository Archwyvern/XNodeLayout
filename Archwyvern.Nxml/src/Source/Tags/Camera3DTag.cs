// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Camera3D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class Camera3DTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Camera3D.ElementProperty.Environment")] public class Environment
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Environment", Type = typeof(EnvironmentTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Camera3D.ElementProperty.Attributes")] public class Attributes
            {
                [System.Xml.Serialization.XmlElement(ElementName = "CameraAttributes", Type = typeof(CameraAttributesTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraAttributesPhysical", Type = typeof(CameraAttributesPhysicalTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraAttributesPractical", Type = typeof(CameraAttributesPracticalTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Environment => _Surrogate_Element_Environment?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Environment")] public Camera3DTag.ElementProperty.Environment? _Surrogate_Element_Environment;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Attributes => _Surrogate_Element_Attributes?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Attributes")] public Camera3DTag.ElementProperty.Attributes? _Surrogate_Element_Attributes;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "KeepAspect")] public string _Surrogate_Attribute_KeepAspect {
            get => KeepAspect != null ? ((Godot.Camera3D.KeepAspectEnum)KeepAspect).ToString() : "";
            set { if (value != "") { KeepAspect = System.Enum.Parse<Godot.Camera3D.KeepAspectEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.KeepAspect")] public string _Surrogate_Element_KeepAspect {
            get => KeepAspect != null ? ((Godot.Camera3D.KeepAspectEnum)KeepAspect).ToString() : "";
            set { if (value != "") { KeepAspect = System.Enum.Parse<Godot.Camera3D.KeepAspectEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Camera3D.KeepAspectEnum? KeepAspect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CullMask")] public string _Surrogate_Attribute_CullMask {
            get => CullMask != null ? ((System.UInt32)CullMask).ToString() : "";
            set { if (value != "") { CullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.CullMask")] public string _Surrogate_Element_CullMask {
            get => CullMask != null ? ((System.UInt32)CullMask).ToString() : "";
            set { if (value != "") { CullMask = System.UInt32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.UInt32? CullMask { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "HOffset")] public string _Surrogate_Attribute_HOffset {
            get => HOffset != null ? ((System.Single)HOffset).ToString() : "";
            set { if (value != "") { HOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.HOffset")] public string _Surrogate_Element_HOffset {
            get => HOffset != null ? ((System.Single)HOffset).ToString() : "";
            set { if (value != "") { HOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? HOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VOffset")] public string _Surrogate_Attribute_VOffset {
            get => VOffset != null ? ((System.Single)VOffset).ToString() : "";
            set { if (value != "") { VOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.VOffset")] public string _Surrogate_Element_VOffset {
            get => VOffset != null ? ((System.Single)VOffset).ToString() : "";
            set { if (value != "") { VOffset = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VOffset { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DopplerTracking")] public string _Surrogate_Attribute_DopplerTracking {
            get => DopplerTracking != null ? ((Godot.Camera3D.DopplerTrackingEnum)DopplerTracking).ToString() : "";
            set { if (value != "") { DopplerTracking = System.Enum.Parse<Godot.Camera3D.DopplerTrackingEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.DopplerTracking")] public string _Surrogate_Element_DopplerTracking {
            get => DopplerTracking != null ? ((Godot.Camera3D.DopplerTrackingEnum)DopplerTracking).ToString() : "";
            set { if (value != "") { DopplerTracking = System.Enum.Parse<Godot.Camera3D.DopplerTrackingEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Camera3D.DopplerTrackingEnum? DopplerTracking { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Projection")] public string _Surrogate_Attribute_Projection {
            get => Projection != null ? ((Godot.Camera3D.ProjectionType)Projection).ToString() : "";
            set { if (value != "") { Projection = System.Enum.Parse<Godot.Camera3D.ProjectionType>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Projection")] public string _Surrogate_Element_Projection {
            get => Projection != null ? ((Godot.Camera3D.ProjectionType)Projection).ToString() : "";
            set { if (value != "") { Projection = System.Enum.Parse<Godot.Camera3D.ProjectionType>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Camera3D.ProjectionType? Projection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Current")] public string _Surrogate_Attribute_Current {
            get => Current != null ? ((System.Boolean)Current).ToString() : "";
            set { if (value != "") { Current = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Current")] public string _Surrogate_Element_Current {
            get => Current != null ? ((System.Boolean)Current).ToString() : "";
            set { if (value != "") { Current = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Current { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Fov")] public string _Surrogate_Attribute_Fov {
            get => Fov != null ? ((System.Single)Fov).ToString() : "";
            set { if (value != "") { Fov = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Fov")] public string _Surrogate_Element_Fov {
            get => Fov != null ? ((System.Single)Fov).ToString() : "";
            set { if (value != "") { Fov = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Fov { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Size")] public string _Surrogate_Attribute_Size {
            get => Size != null ? ((System.Single)Size).ToString() : "";
            set { if (value != "") { Size = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Size")] public string _Surrogate_Element_Size {
            get => Size != null ? ((System.Single)Size).ToString() : "";
            set { if (value != "") { Size = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Size { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Near")] public string _Surrogate_Attribute_Near {
            get => Near != null ? ((System.Single)Near).ToString() : "";
            set { if (value != "") { Near = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Near")] public string _Surrogate_Element_Near {
            get => Near != null ? ((System.Single)Near).ToString() : "";
            set { if (value != "") { Near = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Near { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Far")] public string _Surrogate_Attribute_Far {
            get => Far != null ? ((System.Single)Far).ToString() : "";
            set { if (value != "") { Far = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Far")] public string _Surrogate_Element_Far {
            get => Far != null ? ((System.Single)Far).ToString() : "";
            set { if (value != "") { Far = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Far { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationEditMode")] public string _Surrogate_Attribute_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.RotationEditMode")] public string _Surrogate_Element_RotationEditMode {
            get => RotationEditMode != null ? ((Godot.Node3D.RotationEditModeEnum)RotationEditMode).ToString() : "";
            set { if (value != "") { RotationEditMode = System.Enum.Parse<Godot.Node3D.RotationEditModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node3D.RotationEditModeEnum? RotationEditMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationOrder")] public string _Surrogate_Attribute_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.RotationOrder")] public string _Surrogate_Element_RotationOrder {
            get => RotationOrder != null ? ((Godot.EulerOrder)RotationOrder).ToString() : "";
            set { if (value != "") { RotationOrder = System.Enum.Parse<Godot.EulerOrder>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.EulerOrder? RotationOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TopLevel")] public string _Surrogate_Attribute_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.TopLevel")] public string _Surrogate_Element_TopLevel {
            get => TopLevel != null ? ((System.Boolean)TopLevel).ToString() : "";
            set { if (value != "") { TopLevel = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? TopLevel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Visible")] public string _Surrogate_Attribute_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.Visible")] public string _Surrogate_Element_Visible {
            get => Visible != null ? ((System.Boolean)Visible).ToString() : "";
            set { if (value != "") { Visible = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Visible { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Camera3D.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FrustumOffset")] public string _Surrogate_FrustumOffset {
            get => FrustumOffset != null ? ((Archwyvern.Nxml.Translators.Vector2)FrustumOffset).ToString() : "";
            set => FrustumOffset = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector2? FrustumOffset;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Position")] public string _Surrogate_Position {
            get => Position != null ? ((Archwyvern.Nxml.Translators.Vector3)Position).ToString() : "";
            set => Position = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Position;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Rotation")] public string _Surrogate_Rotation {
            get => Rotation != null ? ((Archwyvern.Nxml.Translators.Vector3)Rotation).ToString() : "";
            set => Rotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Rotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "RotationDegrees")] public string _Surrogate_RotationDegrees {
            get => RotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)RotationDegrees).ToString() : "";
            set => RotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? RotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Scale")] public string _Surrogate_Scale {
            get => Scale != null ? ((Archwyvern.Nxml.Translators.Vector3)Scale).ToString() : "";
            set => Scale = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? Scale;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalPosition")] public string _Surrogate_GlobalPosition {
            get => GlobalPosition != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalPosition).ToString() : "";
            set => GlobalPosition = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalPosition;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotation")] public string _Surrogate_GlobalRotation {
            get => GlobalRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotation).ToString() : "";
            set => GlobalRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlobalRotationDegrees")] public string _Surrogate_GlobalRotationDegrees {
            get => GlobalRotationDegrees != null ? ((Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees).ToString() : "";
            set => GlobalRotationDegrees = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? GlobalRotationDegrees;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Camera3D) return alt;
            var obj = (Godot.Camera3D)alt ?? new Godot.Camera3D();

            // Attributes
            if (KeepAspect != null) obj.KeepAspect = (Godot.Camera3D.KeepAspectEnum)KeepAspect;
            if (CullMask != null) obj.CullMask = (System.UInt32)CullMask;
            if (HOffset != null) obj.HOffset = (System.Single)HOffset;
            if (VOffset != null) obj.VOffset = (System.Single)VOffset;
            if (DopplerTracking != null) obj.DopplerTracking = (Godot.Camera3D.DopplerTrackingEnum)DopplerTracking;
            if (Projection != null) obj.Projection = (Godot.Camera3D.ProjectionType)Projection;
            if (Current != null) obj.Current = (System.Boolean)Current;
            if (Fov != null) obj.Fov = (System.Single)Fov;
            if (Size != null) obj.Size = (System.Single)Size;
            if (Near != null) obj.Near = (System.Single)Near;
            if (Far != null) obj.Far = (System.Single)Far;
            if (RotationEditMode != null) obj.RotationEditMode = (Godot.Node3D.RotationEditModeEnum)RotationEditMode;
            if (RotationOrder != null) obj.RotationOrder = (Godot.EulerOrder)RotationOrder;
            if (TopLevel != null) obj.TopLevel = (System.Boolean)TopLevel;
            if (Visible != null) obj.Visible = (System.Boolean)Visible;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (FrustumOffset != null) obj.FrustumOffset = (Archwyvern.Nxml.Translators.Vector2)FrustumOffset;
            if (Position != null) obj.Position = (Archwyvern.Nxml.Translators.Vector3)Position;
            if (Rotation != null) obj.Rotation = (Archwyvern.Nxml.Translators.Vector3)Rotation;
            if (RotationDegrees != null) obj.RotationDegrees = (Archwyvern.Nxml.Translators.Vector3)RotationDegrees;
            if (Scale != null) obj.Scale = (Archwyvern.Nxml.Translators.Vector3)Scale;
            if (GlobalPosition != null) obj.GlobalPosition = (Archwyvern.Nxml.Translators.Vector3)GlobalPosition;
            if (GlobalRotation != null) obj.GlobalRotation = (Archwyvern.Nxml.Translators.Vector3)GlobalRotation;
            if (GlobalRotationDegrees != null) obj.GlobalRotationDegrees = (Archwyvern.Nxml.Translators.Vector3)GlobalRotationDegrees;
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (Environment != null) {
                if (((IResourceTag)Environment).ResourcePath != null) {
                    obj.Environment = (Godot.Environment)Environment.Generate(Godot.GD.Load<Godot.Environment>(((IResourceTag)Environment).ResourcePath));
                } else {
                    obj.Environment = (Godot.Environment)Environment.Generate();
                }
            }
            if (Attributes != null) {
                if (((IResourceTag)Attributes).ResourcePath != null) {
                    obj.Attributes = (Godot.CameraAttributes)Attributes.Generate(Godot.GD.Load<Godot.CameraAttributes>(((IResourceTag)Attributes).ResourcePath));
                } else {
                    obj.Attributes = (Godot.CameraAttributes)Attributes.Generate();
                }
            }

            return obj;
        }
    }
}
