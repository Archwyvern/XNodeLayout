// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Gradient", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class GradientTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InterpolationMode")] public string _Surrogate_Attribute_InterpolationMode {
            get => InterpolationMode != null ? ((Godot.Gradient.InterpolationModeEnum)InterpolationMode).ToString() : "";
            set { if (value != "") { InterpolationMode = System.Enum.Parse<Godot.Gradient.InterpolationModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Gradient.InterpolationMode")] public string _Surrogate_Element_InterpolationMode {
            get => InterpolationMode != null ? ((Godot.Gradient.InterpolationModeEnum)InterpolationMode).ToString() : "";
            set { if (value != "") { InterpolationMode = System.Enum.Parse<Godot.Gradient.InterpolationModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Gradient.InterpolationModeEnum? InterpolationMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "InterpolationColorSpace")] public string _Surrogate_Attribute_InterpolationColorSpace {
            get => InterpolationColorSpace != null ? ((Godot.Gradient.ColorSpace)InterpolationColorSpace).ToString() : "";
            set { if (value != "") { InterpolationColorSpace = System.Enum.Parse<Godot.Gradient.ColorSpace>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Gradient.InterpolationColorSpace")] public string _Surrogate_Element_InterpolationColorSpace {
            get => InterpolationColorSpace != null ? ((Godot.Gradient.ColorSpace)InterpolationColorSpace).ToString() : "";
            set { if (value != "") { InterpolationColorSpace = System.Enum.Parse<Godot.Gradient.ColorSpace>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Gradient.ColorSpace? InterpolationColorSpace { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Gradient.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Gradient.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Gradient.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Gradient) return alt;
            var obj = (Godot.Gradient)alt ?? new Godot.Gradient();

            // Attributes
            if (InterpolationMode != null) obj.InterpolationMode = (Godot.Gradient.InterpolationModeEnum)InterpolationMode;
            if (InterpolationColorSpace != null) obj.InterpolationColorSpace = (Godot.Gradient.ColorSpace)InterpolationColorSpace;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
