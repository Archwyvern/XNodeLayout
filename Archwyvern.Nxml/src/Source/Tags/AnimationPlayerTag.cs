// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationPlayer", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationPlayerTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "CurrentAnimation")] public string _Surrogate_Attribute_CurrentAnimation {
            get => CurrentAnimation != null ? ((System.String)CurrentAnimation).ToString() : "";
            set { if (value != "") { CurrentAnimation = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.CurrentAnimation")] public string _Surrogate_Element_CurrentAnimation {
            get => CurrentAnimation != null ? ((System.String)CurrentAnimation).ToString() : "";
            set { if (value != "") { CurrentAnimation = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? CurrentAnimation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AssignedAnimation")] public string _Surrogate_Attribute_AssignedAnimation {
            get => AssignedAnimation != null ? ((System.String)AssignedAnimation).ToString() : "";
            set { if (value != "") { AssignedAnimation = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.AssignedAnimation")] public string _Surrogate_Element_AssignedAnimation {
            get => AssignedAnimation != null ? ((System.String)AssignedAnimation).ToString() : "";
            set { if (value != "") { AssignedAnimation = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? AssignedAnimation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Autoplay")] public string _Surrogate_Attribute_Autoplay {
            get => Autoplay != null ? ((System.String)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.Autoplay")] public string _Surrogate_Element_Autoplay {
            get => Autoplay != null ? ((System.String)Autoplay).ToString() : "";
            set { if (value != "") { Autoplay = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? Autoplay { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResetOnSave")] public string _Surrogate_Attribute_ResetOnSave {
            get => ResetOnSave != null ? ((System.Boolean)ResetOnSave).ToString() : "";
            set { if (value != "") { ResetOnSave = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ResetOnSave")] public string _Surrogate_Element_ResetOnSave {
            get => ResetOnSave != null ? ((System.Boolean)ResetOnSave).ToString() : "";
            set { if (value != "") { ResetOnSave = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResetOnSave { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PlaybackProcessMode")] public string _Surrogate_Attribute_PlaybackProcessMode {
            get => PlaybackProcessMode != null ? ((Godot.AnimationPlayer.AnimationProcessCallback)PlaybackProcessMode).ToString() : "";
            set { if (value != "") { PlaybackProcessMode = System.Enum.Parse<Godot.AnimationPlayer.AnimationProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.PlaybackProcessMode")] public string _Surrogate_Element_PlaybackProcessMode {
            get => PlaybackProcessMode != null ? ((Godot.AnimationPlayer.AnimationProcessCallback)PlaybackProcessMode).ToString() : "";
            set { if (value != "") { PlaybackProcessMode = System.Enum.Parse<Godot.AnimationPlayer.AnimationProcessCallback>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationPlayer.AnimationProcessCallback? PlaybackProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PlaybackDefaultBlendTime")] public string _Surrogate_Attribute_PlaybackDefaultBlendTime {
            get => PlaybackDefaultBlendTime != null ? ((System.Double)PlaybackDefaultBlendTime).ToString() : "";
            set { if (value != "") { PlaybackDefaultBlendTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.PlaybackDefaultBlendTime")] public string _Surrogate_Element_PlaybackDefaultBlendTime {
            get => PlaybackDefaultBlendTime != null ? ((System.Double)PlaybackDefaultBlendTime).ToString() : "";
            set { if (value != "") { PlaybackDefaultBlendTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? PlaybackDefaultBlendTime { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PlaybackActive")] public string _Surrogate_Attribute_PlaybackActive {
            get => PlaybackActive != null ? ((System.Boolean)PlaybackActive).ToString() : "";
            set { if (value != "") { PlaybackActive = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.PlaybackActive")] public string _Surrogate_Element_PlaybackActive {
            get => PlaybackActive != null ? ((System.Boolean)PlaybackActive).ToString() : "";
            set { if (value != "") { PlaybackActive = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PlaybackActive { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SpeedScale")] public string _Surrogate_Attribute_SpeedScale {
            get => SpeedScale != null ? ((System.Single)SpeedScale).ToString() : "";
            set { if (value != "") { SpeedScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.SpeedScale")] public string _Surrogate_Element_SpeedScale {
            get => SpeedScale != null ? ((System.Single)SpeedScale).ToString() : "";
            set { if (value != "") { SpeedScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SpeedScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MethodCallMode")] public string _Surrogate_Attribute_MethodCallMode {
            get => MethodCallMode != null ? ((Godot.AnimationPlayer.AnimationMethodCallMode)MethodCallMode).ToString() : "";
            set { if (value != "") { MethodCallMode = System.Enum.Parse<Godot.AnimationPlayer.AnimationMethodCallMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.MethodCallMode")] public string _Surrogate_Element_MethodCallMode {
            get => MethodCallMode != null ? ((Godot.AnimationPlayer.AnimationMethodCallMode)MethodCallMode).ToString() : "";
            set { if (value != "") { MethodCallMode = System.Enum.Parse<Godot.AnimationPlayer.AnimationMethodCallMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationPlayer.AnimationMethodCallMode? MethodCallMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AudioMaxPolyphony")] public string _Surrogate_Attribute_AudioMaxPolyphony {
            get => AudioMaxPolyphony != null ? ((System.Int32)AudioMaxPolyphony).ToString() : "";
            set { if (value != "") { AudioMaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.AudioMaxPolyphony")] public string _Surrogate_Element_AudioMaxPolyphony {
            get => AudioMaxPolyphony != null ? ((System.Int32)AudioMaxPolyphony).ToString() : "";
            set { if (value != "") { AudioMaxPolyphony = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? AudioMaxPolyphony { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MovieQuitOnFinish")] public string _Surrogate_Attribute_MovieQuitOnFinish {
            get => MovieQuitOnFinish != null ? ((System.Boolean)MovieQuitOnFinish).ToString() : "";
            set { if (value != "") { MovieQuitOnFinish = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.MovieQuitOnFinish")] public string _Surrogate_Element_MovieQuitOnFinish {
            get => MovieQuitOnFinish != null ? ((System.Boolean)MovieQuitOnFinish).ToString() : "";
            set { if (value != "") { MovieQuitOnFinish = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? MovieQuitOnFinish { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationPlayer.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationPlayer) return alt;
            var obj = (Godot.AnimationPlayer)alt ?? new Godot.AnimationPlayer();

            // Attributes
            if (CurrentAnimation != null) obj.CurrentAnimation = (System.String)CurrentAnimation;
            if (AssignedAnimation != null) obj.AssignedAnimation = (System.String)AssignedAnimation;
            if (Autoplay != null) obj.Autoplay = (System.String)Autoplay;
            if (ResetOnSave != null) obj.ResetOnSave = (System.Boolean)ResetOnSave;
            if (PlaybackProcessMode != null) obj.PlaybackProcessMode = (Godot.AnimationPlayer.AnimationProcessCallback)PlaybackProcessMode;
            if (PlaybackDefaultBlendTime != null) obj.PlaybackDefaultBlendTime = (System.Double)PlaybackDefaultBlendTime;
            if (PlaybackActive != null) obj.PlaybackActive = (System.Boolean)PlaybackActive;
            if (SpeedScale != null) obj.SpeedScale = (System.Single)SpeedScale;
            if (MethodCallMode != null) obj.MethodCallMode = (Godot.AnimationPlayer.AnimationMethodCallMode)MethodCallMode;
            if (AudioMaxPolyphony != null) obj.AudioMaxPolyphony = (System.Int32)AudioMaxPolyphony;
            if (MovieQuitOnFinish != null) obj.MovieQuitOnFinish = (System.Boolean)MovieQuitOnFinish;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements

            return obj;
        }
    }
}
