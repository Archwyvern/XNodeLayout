// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationNodeBlendSpace1D", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationNodeBlendSpace1DTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
        }

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MinSpace")] public string _Surrogate_Attribute_MinSpace {
            get => MinSpace != null ? ((System.Single)MinSpace).ToString() : "";
            set { if (value != "") { MinSpace = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.MinSpace")] public string _Surrogate_Element_MinSpace {
            get => MinSpace != null ? ((System.Single)MinSpace).ToString() : "";
            set { if (value != "") { MinSpace = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MinSpace { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MaxSpace")] public string _Surrogate_Attribute_MaxSpace {
            get => MaxSpace != null ? ((System.Single)MaxSpace).ToString() : "";
            set { if (value != "") { MaxSpace = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.MaxSpace")] public string _Surrogate_Element_MaxSpace {
            get => MaxSpace != null ? ((System.Single)MaxSpace).ToString() : "";
            set { if (value != "") { MaxSpace = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? MaxSpace { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Snap")] public string _Surrogate_Attribute_Snap {
            get => Snap != null ? ((System.Single)Snap).ToString() : "";
            set { if (value != "") { Snap = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.Snap")] public string _Surrogate_Element_Snap {
            get => Snap != null ? ((System.Single)Snap).ToString() : "";
            set { if (value != "") { Snap = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? Snap { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ValueLabel")] public string _Surrogate_Attribute_ValueLabel {
            get => ValueLabel != null ? ((System.String)ValueLabel).ToString() : "";
            set { if (value != "") { ValueLabel = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.ValueLabel")] public string _Surrogate_Element_ValueLabel {
            get => ValueLabel != null ? ((System.String)ValueLabel).ToString() : "";
            set { if (value != "") { ValueLabel = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ValueLabel { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BlendMode")] public string _Surrogate_Attribute_BlendMode {
            get => BlendMode != null ? ((Godot.AnimationNodeBlendSpace1D.BlendModeEnum)BlendMode).ToString() : "";
            set { if (value != "") { BlendMode = System.Enum.Parse<Godot.AnimationNodeBlendSpace1D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.BlendMode")] public string _Surrogate_Element_BlendMode {
            get => BlendMode != null ? ((Godot.AnimationNodeBlendSpace1D.BlendModeEnum)BlendMode).ToString() : "";
            set { if (value != "") { BlendMode = System.Enum.Parse<Godot.AnimationNodeBlendSpace1D.BlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationNodeBlendSpace1D.BlendModeEnum? BlendMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Sync")] public string _Surrogate_Attribute_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.Sync")] public string _Surrogate_Element_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Sync { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterEnabled")] public string _Surrogate_Attribute_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.FilterEnabled")] public string _Surrogate_Element_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeBlendSpace1D.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationNodeBlendSpace1D) return alt;
            var obj = (Godot.AnimationNodeBlendSpace1D)alt ?? new Godot.AnimationNodeBlendSpace1D();

            // Attributes
            if (MinSpace != null) obj.MinSpace = (System.Single)MinSpace;
            if (MaxSpace != null) obj.MaxSpace = (System.Single)MaxSpace;
            if (Snap != null) obj.Snap = (System.Single)Snap;
            if (ValueLabel != null) obj.ValueLabel = (System.String)ValueLabel;
            if (BlendMode != null) obj.BlendMode = (Godot.AnimationNodeBlendSpace1D.BlendModeEnum)BlendMode;
            if (Sync != null) obj.Sync = (System.Boolean)Sync;
            if (FilterEnabled != null) obj.FilterEnabled = (System.Boolean)FilterEnabled;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements

            return obj;
        }
    }
}
