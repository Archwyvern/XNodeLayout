// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "AnimationNodeOneShot", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class AnimationNodeOneShotTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "AnimationNodeOneShot.ElementProperty.FadeInCurve")] public class FadeInCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "AnimationNodeOneShot.ElementProperty.FadeOutCurve")] public class FadeOutCurve
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Curve", Type = typeof(CurveTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? FadeInCurve => _Surrogate_Element_FadeInCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.FadeInCurve")] public AnimationNodeOneShotTag.ElementProperty.FadeInCurve? _Surrogate_Element_FadeInCurve;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? FadeOutCurve => _Surrogate_Element_FadeOutCurve?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.FadeOutCurve")] public AnimationNodeOneShotTag.ElementProperty.FadeOutCurve? _Surrogate_Element_FadeOutCurve;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "MixMode")] public string _Surrogate_Attribute_MixMode {
            get => MixMode != null ? ((Godot.AnimationNodeOneShot.MixModeEnum)MixMode).ToString() : "";
            set { if (value != "") { MixMode = System.Enum.Parse<Godot.AnimationNodeOneShot.MixModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.MixMode")] public string _Surrogate_Element_MixMode {
            get => MixMode != null ? ((Godot.AnimationNodeOneShot.MixModeEnum)MixMode).ToString() : "";
            set { if (value != "") { MixMode = System.Enum.Parse<Godot.AnimationNodeOneShot.MixModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.AnimationNodeOneShot.MixModeEnum? MixMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FadeInTime")] public string _Surrogate_Attribute_FadeInTime {
            get => FadeInTime != null ? ((System.Double)FadeInTime).ToString() : "";
            set { if (value != "") { FadeInTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.FadeInTime")] public string _Surrogate_Element_FadeInTime {
            get => FadeInTime != null ? ((System.Double)FadeInTime).ToString() : "";
            set { if (value != "") { FadeInTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? FadeInTime { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FadeOutTime")] public string _Surrogate_Attribute_FadeOutTime {
            get => FadeOutTime != null ? ((System.Double)FadeOutTime).ToString() : "";
            set { if (value != "") { FadeOutTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.FadeOutTime")] public string _Surrogate_Element_FadeOutTime {
            get => FadeOutTime != null ? ((System.Double)FadeOutTime).ToString() : "";
            set { if (value != "") { FadeOutTime = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? FadeOutTime { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Autorestart")] public string _Surrogate_Attribute_Autorestart {
            get => Autorestart != null ? ((System.Boolean)Autorestart).ToString() : "";
            set { if (value != "") { Autorestart = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.Autorestart")] public string _Surrogate_Element_Autorestart {
            get => Autorestart != null ? ((System.Boolean)Autorestart).ToString() : "";
            set { if (value != "") { Autorestart = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Autorestart { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutorestartDelay")] public string _Surrogate_Attribute_AutorestartDelay {
            get => AutorestartDelay != null ? ((System.Double)AutorestartDelay).ToString() : "";
            set { if (value != "") { AutorestartDelay = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.AutorestartDelay")] public string _Surrogate_Element_AutorestartDelay {
            get => AutorestartDelay != null ? ((System.Double)AutorestartDelay).ToString() : "";
            set { if (value != "") { AutorestartDelay = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? AutorestartDelay { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AutorestartRandomDelay")] public string _Surrogate_Attribute_AutorestartRandomDelay {
            get => AutorestartRandomDelay != null ? ((System.Double)AutorestartRandomDelay).ToString() : "";
            set { if (value != "") { AutorestartRandomDelay = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.AutorestartRandomDelay")] public string _Surrogate_Element_AutorestartRandomDelay {
            get => AutorestartRandomDelay != null ? ((System.Double)AutorestartRandomDelay).ToString() : "";
            set { if (value != "") { AutorestartRandomDelay = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? AutorestartRandomDelay { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Sync")] public string _Surrogate_Attribute_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.Sync")] public string _Surrogate_Element_Sync {
            get => Sync != null ? ((System.Boolean)Sync).ToString() : "";
            set { if (value != "") { Sync = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? Sync { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FilterEnabled")] public string _Surrogate_Attribute_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.FilterEnabled")] public string _Surrogate_Element_FilterEnabled {
            get => FilterEnabled != null ? ((System.Boolean)FilterEnabled).ToString() : "";
            set { if (value != "") { FilterEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FilterEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "AnimationNodeOneShot.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.AnimationNodeOneShot) return alt;
            var obj = (Godot.AnimationNodeOneShot)alt ?? new Godot.AnimationNodeOneShot();

            // Attributes
            if (MixMode != null) obj.MixMode = (Godot.AnimationNodeOneShot.MixModeEnum)MixMode;
            if (FadeInTime != null) obj.FadeInTime = (System.Double)FadeInTime;
            if (FadeOutTime != null) obj.FadeOutTime = (System.Double)FadeOutTime;
            if (Autorestart != null) obj.Autorestart = (System.Boolean)Autorestart;
            if (AutorestartDelay != null) obj.AutorestartDelay = (System.Double)AutorestartDelay;
            if (AutorestartRandomDelay != null) obj.AutorestartRandomDelay = (System.Double)AutorestartRandomDelay;
            if (Sync != null) obj.Sync = (System.Boolean)Sync;
            if (FilterEnabled != null) obj.FilterEnabled = (System.Boolean)FilterEnabled;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            // Elements
            if (FadeInCurve != null) {
                if (((IResourceTag)FadeInCurve).ResourcePath != null) {
                    obj.FadeInCurve = (Godot.Curve)FadeInCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)FadeInCurve).ResourcePath));
                } else {
                    obj.FadeInCurve = (Godot.Curve)FadeInCurve.Generate();
                }
            }
            if (FadeOutCurve != null) {
                if (((IResourceTag)FadeOutCurve).ResourcePath != null) {
                    obj.FadeOutCurve = (Godot.Curve)FadeOutCurve.Generate(Godot.GD.Load<Godot.Curve>(((IResourceTag)FadeOutCurve).ResourcePath));
                } else {
                    obj.FadeOutCurve = (Godot.Curve)FadeOutCurve.Generate();
                }
            }

            return obj;
        }
    }
}
