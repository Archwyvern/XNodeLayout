// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "MultiplayerSynchronizer", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class MultiplayerSynchronizerTag : Archwyvern.Nxml.BaseNodeTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "MultiplayerSynchronizer.ElementProperty.ReplicationConfig")] public class ReplicationConfig
            {
                [System.Xml.Serialization.XmlElement(ElementName = "SceneReplicationConfig", Type = typeof(SceneReplicationConfigTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? ReplicationConfig => _Surrogate_Element_ReplicationConfig?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ReplicationConfig")] public MultiplayerSynchronizerTag.ElementProperty.ReplicationConfig? _Surrogate_Element_ReplicationConfig;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ReplicationInterval")] public string _Surrogate_Attribute_ReplicationInterval {
            get => ReplicationInterval != null ? ((System.Double)ReplicationInterval).ToString() : "";
            set { if (value != "") { ReplicationInterval = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ReplicationInterval")] public string _Surrogate_Element_ReplicationInterval {
            get => ReplicationInterval != null ? ((System.Double)ReplicationInterval).ToString() : "";
            set { if (value != "") { ReplicationInterval = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? ReplicationInterval { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "DeltaInterval")] public string _Surrogate_Attribute_DeltaInterval {
            get => DeltaInterval != null ? ((System.Double)DeltaInterval).ToString() : "";
            set { if (value != "") { DeltaInterval = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.DeltaInterval")] public string _Surrogate_Element_DeltaInterval {
            get => DeltaInterval != null ? ((System.Double)DeltaInterval).ToString() : "";
            set { if (value != "") { DeltaInterval = System.Double.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Double? DeltaInterval { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VisibilityUpdateMode")] public string _Surrogate_Attribute_VisibilityUpdateMode {
            get => VisibilityUpdateMode != null ? ((Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum)VisibilityUpdateMode).ToString() : "";
            set { if (value != "") { VisibilityUpdateMode = System.Enum.Parse<Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.VisibilityUpdateMode")] public string _Surrogate_Element_VisibilityUpdateMode {
            get => VisibilityUpdateMode != null ? ((Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum)VisibilityUpdateMode).ToString() : "";
            set { if (value != "") { VisibilityUpdateMode = System.Enum.Parse<Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum? VisibilityUpdateMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "PublicVisibility")] public string _Surrogate_Attribute_PublicVisibility {
            get => PublicVisibility != null ? ((System.Boolean)PublicVisibility).ToString() : "";
            set { if (value != "") { PublicVisibility = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.PublicVisibility")] public string _Surrogate_Element_PublicVisibility {
            get => PublicVisibility != null ? ((System.Boolean)PublicVisibility).ToString() : "";
            set { if (value != "") { PublicVisibility = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? PublicVisibility { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "UniqueNameInOwner")] public string _Surrogate_Attribute_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.UniqueNameInOwner")] public string _Surrogate_Element_UniqueNameInOwner {
            get => UniqueNameInOwner != null ? ((System.Boolean)UniqueNameInOwner).ToString() : "";
            set { if (value != "") { UniqueNameInOwner = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? UniqueNameInOwner { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SceneFilePath")] public string _Surrogate_Attribute_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.SceneFilePath")] public string _Surrogate_Element_SceneFilePath {
            get => SceneFilePath != null ? ((System.String)SceneFilePath).ToString() : "";
            set { if (value != "") { SceneFilePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? SceneFilePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessMode")] public string _Surrogate_Attribute_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessMode")] public string _Surrogate_Element_ProcessMode {
            get => ProcessMode != null ? ((Godot.Node.ProcessModeEnum)ProcessMode).ToString() : "";
            set { if (value != "") { ProcessMode = System.Enum.Parse<Godot.Node.ProcessModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessModeEnum? ProcessMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPriority")] public string _Surrogate_Attribute_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessPriority")] public string _Surrogate_Element_ProcessPriority {
            get => ProcessPriority != null ? ((System.Int32)ProcessPriority).ToString() : "";
            set { if (value != "") { ProcessPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessPhysicsPriority")] public string _Surrogate_Attribute_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessPhysicsPriority")] public string _Surrogate_Element_ProcessPhysicsPriority {
            get => ProcessPhysicsPriority != null ? ((System.Int32)ProcessPhysicsPriority).ToString() : "";
            set { if (value != "") { ProcessPhysicsPriority = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessPhysicsPriority { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroup")] public string _Surrogate_Attribute_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessThreadGroup")] public string _Surrogate_Element_ProcessThreadGroup {
            get => ProcessThreadGroup != null ? ((Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup).ToString() : "";
            set { if (value != "") { ProcessThreadGroup = System.Enum.Parse<Godot.Node.ProcessThreadGroupEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadGroupEnum? ProcessThreadGroup { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadGroupOrder")] public string _Surrogate_Attribute_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessThreadGroupOrder")] public string _Surrogate_Element_ProcessThreadGroupOrder {
            get => ProcessThreadGroupOrder != null ? ((System.Int32)ProcessThreadGroupOrder).ToString() : "";
            set { if (value != "") { ProcessThreadGroupOrder = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? ProcessThreadGroupOrder { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ProcessThreadMessages")] public string _Surrogate_Attribute_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.ProcessThreadMessages")] public string _Surrogate_Element_ProcessThreadMessages {
            get => ProcessThreadMessages != null ? ((Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages).ToString() : "";
            set { if (value != "") { ProcessThreadMessages = System.Enum.Parse<Godot.Node.ProcessThreadMessagesEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Node.ProcessThreadMessagesEnum? ProcessThreadMessages { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "EditorDescription")] public string _Surrogate_Attribute_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "MultiplayerSynchronizer.EditorDescription")] public string _Surrogate_Element_EditorDescription {
            get => EditorDescription != null ? ((System.String)EditorDescription).ToString() : "";
            set { if (value != "") { EditorDescription = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? EditorDescription { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "Name")] public string _Surrogate_Name {
            get => Name != null ? ((Archwyvern.Nxml.Translators.StringName)Name).ToString() : "";
            set => Name = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.StringName? Name;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.MultiplayerSynchronizer) return alt;
            var obj = (Godot.MultiplayerSynchronizer)alt ?? new Godot.MultiplayerSynchronizer();

            // Attributes
            if (ReplicationInterval != null) obj.ReplicationInterval = (System.Double)ReplicationInterval;
            if (DeltaInterval != null) obj.DeltaInterval = (System.Double)DeltaInterval;
            if (VisibilityUpdateMode != null) obj.VisibilityUpdateMode = (Godot.MultiplayerSynchronizer.VisibilityUpdateModeEnum)VisibilityUpdateMode;
            if (PublicVisibility != null) obj.PublicVisibility = (System.Boolean)PublicVisibility;
            if (UniqueNameInOwner != null) obj.UniqueNameInOwner = (System.Boolean)UniqueNameInOwner;
            if (SceneFilePath != null) obj.SceneFilePath = (System.String)SceneFilePath;
            if (ProcessMode != null) obj.ProcessMode = (Godot.Node.ProcessModeEnum)ProcessMode;
            if (ProcessPriority != null) obj.ProcessPriority = (System.Int32)ProcessPriority;
            if (ProcessPhysicsPriority != null) obj.ProcessPhysicsPriority = (System.Int32)ProcessPhysicsPriority;
            if (ProcessThreadGroup != null) obj.ProcessThreadGroup = (Godot.Node.ProcessThreadGroupEnum)ProcessThreadGroup;
            if (ProcessThreadGroupOrder != null) obj.ProcessThreadGroupOrder = (System.Int32)ProcessThreadGroupOrder;
            if (ProcessThreadMessages != null) obj.ProcessThreadMessages = (Godot.Node.ProcessThreadMessagesEnum)ProcessThreadMessages;
            if (EditorDescription != null) obj.EditorDescription = (System.String)EditorDescription;
            // Overloaded Attributes
            if (Name != null) obj.Name = (Archwyvern.Nxml.Translators.StringName)Name;
            // Elements
            if (ReplicationConfig != null) {
                if (((IResourceTag)ReplicationConfig).ResourcePath != null) {
                    obj.ReplicationConfig = (Godot.SceneReplicationConfig)ReplicationConfig.Generate(Godot.GD.Load<Godot.SceneReplicationConfig>(((IResourceTag)ReplicationConfig).ResourcePath));
                } else {
                    obj.ReplicationConfig = (Godot.SceneReplicationConfig)ReplicationConfig.Generate();
                }
            }

            return obj;
        }
    }
}
