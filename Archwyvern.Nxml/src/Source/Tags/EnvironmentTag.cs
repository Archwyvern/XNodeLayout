// <auto-generated />
namespace Archwyvern.Nxml.Tags
{
    [System.Xml.Serialization.XmlRoot(ElementName = "Environment", Namespace = "http://archwyvern.com/xsd/nxml")]
    public class EnvironmentTag : Archwyvern.Nxml.BaseTag, Archwyvern.Nxml.IResourceTag
    {
#nullable enable
        public static class ElementProperty
        {
            [System.Xml.Serialization.XmlType(TypeName = "Environment.ElementProperty.Sky")] public class Sky
            {
                [System.Xml.Serialization.XmlElement(ElementName = "Sky", Type = typeof(SkyTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Environment.ElementProperty.GlowMap")] public class GlowMap
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemap", Type = typeof(CompressedCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemapArray", Type = typeof(CompressedCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2DArray", Type = typeof(CompressedTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture3D", Type = typeof(CompressedTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Cubemap", Type = typeof(CubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CubemapArray", Type = typeof(CubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture3D", Type = typeof(ImageTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture3D", Type = typeof(NoiseTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemap", Type = typeof(PlaceholderCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemapArray", Type = typeof(PlaceholderCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2DArray", Type = typeof(PlaceholderTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture3D", Type = typeof(PlaceholderTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture", Type = typeof(TextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2DArray", Type = typeof(Texture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture3D", Type = typeof(Texture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TextureLayered", Type = typeof(TextureLayeredTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

            [System.Xml.Serialization.XmlType(TypeName = "Environment.ElementProperty.AdjustmentColorCorrection")] public class AdjustmentColorCorrection
            {
                [System.Xml.Serialization.XmlElement(ElementName = "AnimatedTexture", Type = typeof(AnimatedTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "AtlasTexture", Type = typeof(AtlasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CameraTexture", Type = typeof(CameraTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CanvasTexture", Type = typeof(CanvasTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemap", Type = typeof(CompressedCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedCubemapArray", Type = typeof(CompressedCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2D", Type = typeof(CompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture2DArray", Type = typeof(CompressedTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CompressedTexture3D", Type = typeof(CompressedTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Cubemap", Type = typeof(CubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CubemapArray", Type = typeof(CubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveTexture", Type = typeof(CurveTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "CurveXyzTexture", Type = typeof(CurveXyzTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture1D", Type = typeof(GradientTexture1DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "GradientTexture2D", Type = typeof(GradientTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture", Type = typeof(ImageTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ImageTexture3D", Type = typeof(ImageTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "MeshTexture", Type = typeof(MeshTextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture2D", Type = typeof(NoiseTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "NoiseTexture3D", Type = typeof(NoiseTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemap", Type = typeof(PlaceholderCubemapTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderCubemapArray", Type = typeof(PlaceholderCubemapArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2D", Type = typeof(PlaceholderTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture2DArray", Type = typeof(PlaceholderTexture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PlaceholderTexture3D", Type = typeof(PlaceholderTexture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "PortableCompressedTexture2D", Type = typeof(PortableCompressedTexture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture", Type = typeof(TextureTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2D", Type = typeof(Texture2DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture2DArray", Type = typeof(Texture2DArrayTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "Texture3D", Type = typeof(Texture3DTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "TextureLayered", Type = typeof(TextureLayeredTag))]
                [System.Xml.Serialization.XmlElement(ElementName = "ViewportTexture", Type = typeof(ViewportTextureTag))]
                public Archwyvern.Nxml.BaseTag? Value;
            }

        }

        [System.Xml.Serialization.XmlIgnore] public BaseTag? Sky => _Surrogate_Element_Sky?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.Sky")] public EnvironmentTag.ElementProperty.Sky? _Surrogate_Element_Sky;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? GlowMap => _Surrogate_Element_GlowMap?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowMap")] public EnvironmentTag.ElementProperty.GlowMap? _Surrogate_Element_GlowMap;

        [System.Xml.Serialization.XmlIgnore] public BaseTag? AdjustmentColorCorrection => _Surrogate_Element_AdjustmentColorCorrection?.Value;
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AdjustmentColorCorrection")] public EnvironmentTag.ElementProperty.AdjustmentColorCorrection? _Surrogate_Element_AdjustmentColorCorrection;

        // Simple Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundMode")] public string _Surrogate_Attribute_BackgroundMode {
            get => BackgroundMode != null ? ((Godot.Environment.BGMode)BackgroundMode).ToString() : "";
            set { if (value != "") { BackgroundMode = System.Enum.Parse<Godot.Environment.BGMode>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.BackgroundMode")] public string _Surrogate_Element_BackgroundMode {
            get => BackgroundMode != null ? ((Godot.Environment.BGMode)BackgroundMode).ToString() : "";
            set { if (value != "") { BackgroundMode = System.Enum.Parse<Godot.Environment.BGMode>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.BGMode? BackgroundMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundEnergyMultiplier")] public string _Surrogate_Attribute_BackgroundEnergyMultiplier {
            get => BackgroundEnergyMultiplier != null ? ((System.Single)BackgroundEnergyMultiplier).ToString() : "";
            set { if (value != "") { BackgroundEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.BackgroundEnergyMultiplier")] public string _Surrogate_Element_BackgroundEnergyMultiplier {
            get => BackgroundEnergyMultiplier != null ? ((System.Single)BackgroundEnergyMultiplier).ToString() : "";
            set { if (value != "") { BackgroundEnergyMultiplier = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? BackgroundEnergyMultiplier { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundIntensity")] public string _Surrogate_Attribute_BackgroundIntensity {
            get => BackgroundIntensity != null ? ((System.Single)BackgroundIntensity).ToString() : "";
            set { if (value != "") { BackgroundIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.BackgroundIntensity")] public string _Surrogate_Element_BackgroundIntensity {
            get => BackgroundIntensity != null ? ((System.Single)BackgroundIntensity).ToString() : "";
            set { if (value != "") { BackgroundIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? BackgroundIntensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundCanvasMaxLayer")] public string _Surrogate_Attribute_BackgroundCanvasMaxLayer {
            get => BackgroundCanvasMaxLayer != null ? ((System.Int32)BackgroundCanvasMaxLayer).ToString() : "";
            set { if (value != "") { BackgroundCanvasMaxLayer = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.BackgroundCanvasMaxLayer")] public string _Surrogate_Element_BackgroundCanvasMaxLayer {
            get => BackgroundCanvasMaxLayer != null ? ((System.Int32)BackgroundCanvasMaxLayer).ToString() : "";
            set { if (value != "") { BackgroundCanvasMaxLayer = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? BackgroundCanvasMaxLayer { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundCameraFeedId")] public string _Surrogate_Attribute_BackgroundCameraFeedId {
            get => BackgroundCameraFeedId != null ? ((System.Int32)BackgroundCameraFeedId).ToString() : "";
            set { if (value != "") { BackgroundCameraFeedId = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.BackgroundCameraFeedId")] public string _Surrogate_Element_BackgroundCameraFeedId {
            get => BackgroundCameraFeedId != null ? ((System.Int32)BackgroundCameraFeedId).ToString() : "";
            set { if (value != "") { BackgroundCameraFeedId = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? BackgroundCameraFeedId { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyCustomFov")] public string _Surrogate_Attribute_SkyCustomFov {
            get => SkyCustomFov != null ? ((System.Single)SkyCustomFov).ToString() : "";
            set { if (value != "") { SkyCustomFov = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SkyCustomFov")] public string _Surrogate_Element_SkyCustomFov {
            get => SkyCustomFov != null ? ((System.Single)SkyCustomFov).ToString() : "";
            set { if (value != "") { SkyCustomFov = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SkyCustomFov { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AmbientLightSource")] public string _Surrogate_Attribute_AmbientLightSource {
            get => AmbientLightSource != null ? ((Godot.Environment.AmbientSource)AmbientLightSource).ToString() : "";
            set { if (value != "") { AmbientLightSource = System.Enum.Parse<Godot.Environment.AmbientSource>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AmbientLightSource")] public string _Surrogate_Element_AmbientLightSource {
            get => AmbientLightSource != null ? ((Godot.Environment.AmbientSource)AmbientLightSource).ToString() : "";
            set { if (value != "") { AmbientLightSource = System.Enum.Parse<Godot.Environment.AmbientSource>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.AmbientSource? AmbientLightSource { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AmbientLightSkyContribution")] public string _Surrogate_Attribute_AmbientLightSkyContribution {
            get => AmbientLightSkyContribution != null ? ((System.Single)AmbientLightSkyContribution).ToString() : "";
            set { if (value != "") { AmbientLightSkyContribution = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AmbientLightSkyContribution")] public string _Surrogate_Element_AmbientLightSkyContribution {
            get => AmbientLightSkyContribution != null ? ((System.Single)AmbientLightSkyContribution).ToString() : "";
            set { if (value != "") { AmbientLightSkyContribution = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AmbientLightSkyContribution { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AmbientLightEnergy")] public string _Surrogate_Attribute_AmbientLightEnergy {
            get => AmbientLightEnergy != null ? ((System.Single)AmbientLightEnergy).ToString() : "";
            set { if (value != "") { AmbientLightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AmbientLightEnergy")] public string _Surrogate_Element_AmbientLightEnergy {
            get => AmbientLightEnergy != null ? ((System.Single)AmbientLightEnergy).ToString() : "";
            set { if (value != "") { AmbientLightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AmbientLightEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ReflectedLightSource")] public string _Surrogate_Attribute_ReflectedLightSource {
            get => ReflectedLightSource != null ? ((Godot.Environment.ReflectionSource)ReflectedLightSource).ToString() : "";
            set { if (value != "") { ReflectedLightSource = System.Enum.Parse<Godot.Environment.ReflectionSource>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.ReflectedLightSource")] public string _Surrogate_Element_ReflectedLightSource {
            get => ReflectedLightSource != null ? ((Godot.Environment.ReflectionSource)ReflectedLightSource).ToString() : "";
            set { if (value != "") { ReflectedLightSource = System.Enum.Parse<Godot.Environment.ReflectionSource>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.ReflectionSource? ReflectedLightSource { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TonemapMode")] public string _Surrogate_Attribute_TonemapMode {
            get => TonemapMode != null ? ((Godot.Environment.ToneMapper)TonemapMode).ToString() : "";
            set { if (value != "") { TonemapMode = System.Enum.Parse<Godot.Environment.ToneMapper>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.TonemapMode")] public string _Surrogate_Element_TonemapMode {
            get => TonemapMode != null ? ((Godot.Environment.ToneMapper)TonemapMode).ToString() : "";
            set { if (value != "") { TonemapMode = System.Enum.Parse<Godot.Environment.ToneMapper>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.ToneMapper? TonemapMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TonemapExposure")] public string _Surrogate_Attribute_TonemapExposure {
            get => TonemapExposure != null ? ((System.Single)TonemapExposure).ToString() : "";
            set { if (value != "") { TonemapExposure = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.TonemapExposure")] public string _Surrogate_Element_TonemapExposure {
            get => TonemapExposure != null ? ((System.Single)TonemapExposure).ToString() : "";
            set { if (value != "") { TonemapExposure = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TonemapExposure { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "TonemapWhite")] public string _Surrogate_Attribute_TonemapWhite {
            get => TonemapWhite != null ? ((System.Single)TonemapWhite).ToString() : "";
            set { if (value != "") { TonemapWhite = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.TonemapWhite")] public string _Surrogate_Element_TonemapWhite {
            get => TonemapWhite != null ? ((System.Single)TonemapWhite).ToString() : "";
            set { if (value != "") { TonemapWhite = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? TonemapWhite { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsrEnabled")] public string _Surrogate_Attribute_SsrEnabled {
            get => SsrEnabled != null ? ((System.Boolean)SsrEnabled).ToString() : "";
            set { if (value != "") { SsrEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsrEnabled")] public string _Surrogate_Element_SsrEnabled {
            get => SsrEnabled != null ? ((System.Boolean)SsrEnabled).ToString() : "";
            set { if (value != "") { SsrEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SsrEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsrMaxSteps")] public string _Surrogate_Attribute_SsrMaxSteps {
            get => SsrMaxSteps != null ? ((System.Int32)SsrMaxSteps).ToString() : "";
            set { if (value != "") { SsrMaxSteps = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsrMaxSteps")] public string _Surrogate_Element_SsrMaxSteps {
            get => SsrMaxSteps != null ? ((System.Int32)SsrMaxSteps).ToString() : "";
            set { if (value != "") { SsrMaxSteps = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SsrMaxSteps { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsrFadeIn")] public string _Surrogate_Attribute_SsrFadeIn {
            get => SsrFadeIn != null ? ((System.Single)SsrFadeIn).ToString() : "";
            set { if (value != "") { SsrFadeIn = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsrFadeIn")] public string _Surrogate_Element_SsrFadeIn {
            get => SsrFadeIn != null ? ((System.Single)SsrFadeIn).ToString() : "";
            set { if (value != "") { SsrFadeIn = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsrFadeIn { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsrFadeOut")] public string _Surrogate_Attribute_SsrFadeOut {
            get => SsrFadeOut != null ? ((System.Single)SsrFadeOut).ToString() : "";
            set { if (value != "") { SsrFadeOut = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsrFadeOut")] public string _Surrogate_Element_SsrFadeOut {
            get => SsrFadeOut != null ? ((System.Single)SsrFadeOut).ToString() : "";
            set { if (value != "") { SsrFadeOut = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsrFadeOut { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsrDepthTolerance")] public string _Surrogate_Attribute_SsrDepthTolerance {
            get => SsrDepthTolerance != null ? ((System.Single)SsrDepthTolerance).ToString() : "";
            set { if (value != "") { SsrDepthTolerance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsrDepthTolerance")] public string _Surrogate_Element_SsrDepthTolerance {
            get => SsrDepthTolerance != null ? ((System.Single)SsrDepthTolerance).ToString() : "";
            set { if (value != "") { SsrDepthTolerance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsrDepthTolerance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoEnabled")] public string _Surrogate_Attribute_SsaoEnabled {
            get => SsaoEnabled != null ? ((System.Boolean)SsaoEnabled).ToString() : "";
            set { if (value != "") { SsaoEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoEnabled")] public string _Surrogate_Element_SsaoEnabled {
            get => SsaoEnabled != null ? ((System.Boolean)SsaoEnabled).ToString() : "";
            set { if (value != "") { SsaoEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SsaoEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoRadius")] public string _Surrogate_Attribute_SsaoRadius {
            get => SsaoRadius != null ? ((System.Single)SsaoRadius).ToString() : "";
            set { if (value != "") { SsaoRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoRadius")] public string _Surrogate_Element_SsaoRadius {
            get => SsaoRadius != null ? ((System.Single)SsaoRadius).ToString() : "";
            set { if (value != "") { SsaoRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoIntensity")] public string _Surrogate_Attribute_SsaoIntensity {
            get => SsaoIntensity != null ? ((System.Single)SsaoIntensity).ToString() : "";
            set { if (value != "") { SsaoIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoIntensity")] public string _Surrogate_Element_SsaoIntensity {
            get => SsaoIntensity != null ? ((System.Single)SsaoIntensity).ToString() : "";
            set { if (value != "") { SsaoIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoIntensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoPower")] public string _Surrogate_Attribute_SsaoPower {
            get => SsaoPower != null ? ((System.Single)SsaoPower).ToString() : "";
            set { if (value != "") { SsaoPower = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoPower")] public string _Surrogate_Element_SsaoPower {
            get => SsaoPower != null ? ((System.Single)SsaoPower).ToString() : "";
            set { if (value != "") { SsaoPower = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoPower { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoDetail")] public string _Surrogate_Attribute_SsaoDetail {
            get => SsaoDetail != null ? ((System.Single)SsaoDetail).ToString() : "";
            set { if (value != "") { SsaoDetail = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoDetail")] public string _Surrogate_Element_SsaoDetail {
            get => SsaoDetail != null ? ((System.Single)SsaoDetail).ToString() : "";
            set { if (value != "") { SsaoDetail = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoDetail { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoHorizon")] public string _Surrogate_Attribute_SsaoHorizon {
            get => SsaoHorizon != null ? ((System.Single)SsaoHorizon).ToString() : "";
            set { if (value != "") { SsaoHorizon = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoHorizon")] public string _Surrogate_Element_SsaoHorizon {
            get => SsaoHorizon != null ? ((System.Single)SsaoHorizon).ToString() : "";
            set { if (value != "") { SsaoHorizon = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoHorizon { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoSharpness")] public string _Surrogate_Attribute_SsaoSharpness {
            get => SsaoSharpness != null ? ((System.Single)SsaoSharpness).ToString() : "";
            set { if (value != "") { SsaoSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoSharpness")] public string _Surrogate_Element_SsaoSharpness {
            get => SsaoSharpness != null ? ((System.Single)SsaoSharpness).ToString() : "";
            set { if (value != "") { SsaoSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoSharpness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoLightAffect")] public string _Surrogate_Attribute_SsaoLightAffect {
            get => SsaoLightAffect != null ? ((System.Single)SsaoLightAffect).ToString() : "";
            set { if (value != "") { SsaoLightAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoLightAffect")] public string _Surrogate_Element_SsaoLightAffect {
            get => SsaoLightAffect != null ? ((System.Single)SsaoLightAffect).ToString() : "";
            set { if (value != "") { SsaoLightAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoLightAffect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsaoAOChannelAffect")] public string _Surrogate_Attribute_SsaoAOChannelAffect {
            get => SsaoAOChannelAffect != null ? ((System.Single)SsaoAOChannelAffect).ToString() : "";
            set { if (value != "") { SsaoAOChannelAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsaoAOChannelAffect")] public string _Surrogate_Element_SsaoAOChannelAffect {
            get => SsaoAOChannelAffect != null ? ((System.Single)SsaoAOChannelAffect).ToString() : "";
            set { if (value != "") { SsaoAOChannelAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsaoAOChannelAffect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsilEnabled")] public string _Surrogate_Attribute_SsilEnabled {
            get => SsilEnabled != null ? ((System.Boolean)SsilEnabled).ToString() : "";
            set { if (value != "") { SsilEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsilEnabled")] public string _Surrogate_Element_SsilEnabled {
            get => SsilEnabled != null ? ((System.Boolean)SsilEnabled).ToString() : "";
            set { if (value != "") { SsilEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SsilEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsilRadius")] public string _Surrogate_Attribute_SsilRadius {
            get => SsilRadius != null ? ((System.Single)SsilRadius).ToString() : "";
            set { if (value != "") { SsilRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsilRadius")] public string _Surrogate_Element_SsilRadius {
            get => SsilRadius != null ? ((System.Single)SsilRadius).ToString() : "";
            set { if (value != "") { SsilRadius = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsilRadius { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsilIntensity")] public string _Surrogate_Attribute_SsilIntensity {
            get => SsilIntensity != null ? ((System.Single)SsilIntensity).ToString() : "";
            set { if (value != "") { SsilIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsilIntensity")] public string _Surrogate_Element_SsilIntensity {
            get => SsilIntensity != null ? ((System.Single)SsilIntensity).ToString() : "";
            set { if (value != "") { SsilIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsilIntensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsilSharpness")] public string _Surrogate_Attribute_SsilSharpness {
            get => SsilSharpness != null ? ((System.Single)SsilSharpness).ToString() : "";
            set { if (value != "") { SsilSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsilSharpness")] public string _Surrogate_Element_SsilSharpness {
            get => SsilSharpness != null ? ((System.Single)SsilSharpness).ToString() : "";
            set { if (value != "") { SsilSharpness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsilSharpness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SsilNormalRejection")] public string _Surrogate_Attribute_SsilNormalRejection {
            get => SsilNormalRejection != null ? ((System.Single)SsilNormalRejection).ToString() : "";
            set { if (value != "") { SsilNormalRejection = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SsilNormalRejection")] public string _Surrogate_Element_SsilNormalRejection {
            get => SsilNormalRejection != null ? ((System.Single)SsilNormalRejection).ToString() : "";
            set { if (value != "") { SsilNormalRejection = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SsilNormalRejection { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiEnabled")] public string _Surrogate_Attribute_SdfgiEnabled {
            get => SdfgiEnabled != null ? ((System.Boolean)SdfgiEnabled).ToString() : "";
            set { if (value != "") { SdfgiEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiEnabled")] public string _Surrogate_Element_SdfgiEnabled {
            get => SdfgiEnabled != null ? ((System.Boolean)SdfgiEnabled).ToString() : "";
            set { if (value != "") { SdfgiEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SdfgiEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiUseOcclusion")] public string _Surrogate_Attribute_SdfgiUseOcclusion {
            get => SdfgiUseOcclusion != null ? ((System.Boolean)SdfgiUseOcclusion).ToString() : "";
            set { if (value != "") { SdfgiUseOcclusion = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiUseOcclusion")] public string _Surrogate_Element_SdfgiUseOcclusion {
            get => SdfgiUseOcclusion != null ? ((System.Boolean)SdfgiUseOcclusion).ToString() : "";
            set { if (value != "") { SdfgiUseOcclusion = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SdfgiUseOcclusion { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiReadSkyLight")] public string _Surrogate_Attribute_SdfgiReadSkyLight {
            get => SdfgiReadSkyLight != null ? ((System.Boolean)SdfgiReadSkyLight).ToString() : "";
            set { if (value != "") { SdfgiReadSkyLight = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiReadSkyLight")] public string _Surrogate_Element_SdfgiReadSkyLight {
            get => SdfgiReadSkyLight != null ? ((System.Boolean)SdfgiReadSkyLight).ToString() : "";
            set { if (value != "") { SdfgiReadSkyLight = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? SdfgiReadSkyLight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiBounceFeedback")] public string _Surrogate_Attribute_SdfgiBounceFeedback {
            get => SdfgiBounceFeedback != null ? ((System.Single)SdfgiBounceFeedback).ToString() : "";
            set { if (value != "") { SdfgiBounceFeedback = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiBounceFeedback")] public string _Surrogate_Element_SdfgiBounceFeedback {
            get => SdfgiBounceFeedback != null ? ((System.Single)SdfgiBounceFeedback).ToString() : "";
            set { if (value != "") { SdfgiBounceFeedback = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiBounceFeedback { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiCascades")] public string _Surrogate_Attribute_SdfgiCascades {
            get => SdfgiCascades != null ? ((System.Int32)SdfgiCascades).ToString() : "";
            set { if (value != "") { SdfgiCascades = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiCascades")] public string _Surrogate_Element_SdfgiCascades {
            get => SdfgiCascades != null ? ((System.Int32)SdfgiCascades).ToString() : "";
            set { if (value != "") { SdfgiCascades = System.Int32.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Int32? SdfgiCascades { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiMinCellSize")] public string _Surrogate_Attribute_SdfgiMinCellSize {
            get => SdfgiMinCellSize != null ? ((System.Single)SdfgiMinCellSize).ToString() : "";
            set { if (value != "") { SdfgiMinCellSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiMinCellSize")] public string _Surrogate_Element_SdfgiMinCellSize {
            get => SdfgiMinCellSize != null ? ((System.Single)SdfgiMinCellSize).ToString() : "";
            set { if (value != "") { SdfgiMinCellSize = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiMinCellSize { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiCascade0Distance")] public string _Surrogate_Attribute_SdfgiCascade0Distance {
            get => SdfgiCascade0Distance != null ? ((System.Single)SdfgiCascade0Distance).ToString() : "";
            set { if (value != "") { SdfgiCascade0Distance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiCascade0Distance")] public string _Surrogate_Element_SdfgiCascade0Distance {
            get => SdfgiCascade0Distance != null ? ((System.Single)SdfgiCascade0Distance).ToString() : "";
            set { if (value != "") { SdfgiCascade0Distance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiCascade0Distance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiMaxDistance")] public string _Surrogate_Attribute_SdfgiMaxDistance {
            get => SdfgiMaxDistance != null ? ((System.Single)SdfgiMaxDistance).ToString() : "";
            set { if (value != "") { SdfgiMaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiMaxDistance")] public string _Surrogate_Element_SdfgiMaxDistance {
            get => SdfgiMaxDistance != null ? ((System.Single)SdfgiMaxDistance).ToString() : "";
            set { if (value != "") { SdfgiMaxDistance = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiMaxDistance { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiYScale")] public string _Surrogate_Attribute_SdfgiYScale {
            get => SdfgiYScale != null ? ((Godot.Environment.SdfgiyScale)SdfgiYScale).ToString() : "";
            set { if (value != "") { SdfgiYScale = System.Enum.Parse<Godot.Environment.SdfgiyScale>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiYScale")] public string _Surrogate_Element_SdfgiYScale {
            get => SdfgiYScale != null ? ((Godot.Environment.SdfgiyScale)SdfgiYScale).ToString() : "";
            set { if (value != "") { SdfgiYScale = System.Enum.Parse<Godot.Environment.SdfgiyScale>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.SdfgiyScale? SdfgiYScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiEnergy")] public string _Surrogate_Attribute_SdfgiEnergy {
            get => SdfgiEnergy != null ? ((System.Single)SdfgiEnergy).ToString() : "";
            set { if (value != "") { SdfgiEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiEnergy")] public string _Surrogate_Element_SdfgiEnergy {
            get => SdfgiEnergy != null ? ((System.Single)SdfgiEnergy).ToString() : "";
            set { if (value != "") { SdfgiEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiNormalBias")] public string _Surrogate_Attribute_SdfgiNormalBias {
            get => SdfgiNormalBias != null ? ((System.Single)SdfgiNormalBias).ToString() : "";
            set { if (value != "") { SdfgiNormalBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiNormalBias")] public string _Surrogate_Element_SdfgiNormalBias {
            get => SdfgiNormalBias != null ? ((System.Single)SdfgiNormalBias).ToString() : "";
            set { if (value != "") { SdfgiNormalBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiNormalBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SdfgiProbeBias")] public string _Surrogate_Attribute_SdfgiProbeBias {
            get => SdfgiProbeBias != null ? ((System.Single)SdfgiProbeBias).ToString() : "";
            set { if (value != "") { SdfgiProbeBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.SdfgiProbeBias")] public string _Surrogate_Element_SdfgiProbeBias {
            get => SdfgiProbeBias != null ? ((System.Single)SdfgiProbeBias).ToString() : "";
            set { if (value != "") { SdfgiProbeBias = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? SdfgiProbeBias { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowEnabled")] public string _Surrogate_Attribute_GlowEnabled {
            get => GlowEnabled != null ? ((System.Boolean)GlowEnabled).ToString() : "";
            set { if (value != "") { GlowEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowEnabled")] public string _Surrogate_Element_GlowEnabled {
            get => GlowEnabled != null ? ((System.Boolean)GlowEnabled).ToString() : "";
            set { if (value != "") { GlowEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GlowEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowNormalized")] public string _Surrogate_Attribute_GlowNormalized {
            get => GlowNormalized != null ? ((System.Boolean)GlowNormalized).ToString() : "";
            set { if (value != "") { GlowNormalized = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowNormalized")] public string _Surrogate_Element_GlowNormalized {
            get => GlowNormalized != null ? ((System.Boolean)GlowNormalized).ToString() : "";
            set { if (value != "") { GlowNormalized = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? GlowNormalized { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowIntensity")] public string _Surrogate_Attribute_GlowIntensity {
            get => GlowIntensity != null ? ((System.Single)GlowIntensity).ToString() : "";
            set { if (value != "") { GlowIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowIntensity")] public string _Surrogate_Element_GlowIntensity {
            get => GlowIntensity != null ? ((System.Single)GlowIntensity).ToString() : "";
            set { if (value != "") { GlowIntensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowIntensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowStrength")] public string _Surrogate_Attribute_GlowStrength {
            get => GlowStrength != null ? ((System.Single)GlowStrength).ToString() : "";
            set { if (value != "") { GlowStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowStrength")] public string _Surrogate_Element_GlowStrength {
            get => GlowStrength != null ? ((System.Single)GlowStrength).ToString() : "";
            set { if (value != "") { GlowStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowMix")] public string _Surrogate_Attribute_GlowMix {
            get => GlowMix != null ? ((System.Single)GlowMix).ToString() : "";
            set { if (value != "") { GlowMix = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowMix")] public string _Surrogate_Element_GlowMix {
            get => GlowMix != null ? ((System.Single)GlowMix).ToString() : "";
            set { if (value != "") { GlowMix = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowMix { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowBloom")] public string _Surrogate_Attribute_GlowBloom {
            get => GlowBloom != null ? ((System.Single)GlowBloom).ToString() : "";
            set { if (value != "") { GlowBloom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowBloom")] public string _Surrogate_Element_GlowBloom {
            get => GlowBloom != null ? ((System.Single)GlowBloom).ToString() : "";
            set { if (value != "") { GlowBloom = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowBloom { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowBlendMode")] public string _Surrogate_Attribute_GlowBlendMode {
            get => GlowBlendMode != null ? ((Godot.Environment.GlowBlendModeEnum)GlowBlendMode).ToString() : "";
            set { if (value != "") { GlowBlendMode = System.Enum.Parse<Godot.Environment.GlowBlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowBlendMode")] public string _Surrogate_Element_GlowBlendMode {
            get => GlowBlendMode != null ? ((Godot.Environment.GlowBlendModeEnum)GlowBlendMode).ToString() : "";
            set { if (value != "") { GlowBlendMode = System.Enum.Parse<Godot.Environment.GlowBlendModeEnum>(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public Godot.Environment.GlowBlendModeEnum? GlowBlendMode { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowHdrThreshold")] public string _Surrogate_Attribute_GlowHdrThreshold {
            get => GlowHdrThreshold != null ? ((System.Single)GlowHdrThreshold).ToString() : "";
            set { if (value != "") { GlowHdrThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowHdrThreshold")] public string _Surrogate_Element_GlowHdrThreshold {
            get => GlowHdrThreshold != null ? ((System.Single)GlowHdrThreshold).ToString() : "";
            set { if (value != "") { GlowHdrThreshold = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowHdrThreshold { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowHdrScale")] public string _Surrogate_Attribute_GlowHdrScale {
            get => GlowHdrScale != null ? ((System.Single)GlowHdrScale).ToString() : "";
            set { if (value != "") { GlowHdrScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowHdrScale")] public string _Surrogate_Element_GlowHdrScale {
            get => GlowHdrScale != null ? ((System.Single)GlowHdrScale).ToString() : "";
            set { if (value != "") { GlowHdrScale = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowHdrScale { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowHdrLuminanceCap")] public string _Surrogate_Attribute_GlowHdrLuminanceCap {
            get => GlowHdrLuminanceCap != null ? ((System.Single)GlowHdrLuminanceCap).ToString() : "";
            set { if (value != "") { GlowHdrLuminanceCap = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowHdrLuminanceCap")] public string _Surrogate_Element_GlowHdrLuminanceCap {
            get => GlowHdrLuminanceCap != null ? ((System.Single)GlowHdrLuminanceCap).ToString() : "";
            set { if (value != "") { GlowHdrLuminanceCap = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowHdrLuminanceCap { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "GlowMapStrength")] public string _Surrogate_Attribute_GlowMapStrength {
            get => GlowMapStrength != null ? ((System.Single)GlowMapStrength).ToString() : "";
            set { if (value != "") { GlowMapStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.GlowMapStrength")] public string _Surrogate_Element_GlowMapStrength {
            get => GlowMapStrength != null ? ((System.Single)GlowMapStrength).ToString() : "";
            set { if (value != "") { GlowMapStrength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? GlowMapStrength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogEnabled")] public string _Surrogate_Attribute_FogEnabled {
            get => FogEnabled != null ? ((System.Boolean)FogEnabled).ToString() : "";
            set { if (value != "") { FogEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogEnabled")] public string _Surrogate_Element_FogEnabled {
            get => FogEnabled != null ? ((System.Boolean)FogEnabled).ToString() : "";
            set { if (value != "") { FogEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? FogEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogLightEnergy")] public string _Surrogate_Attribute_FogLightEnergy {
            get => FogLightEnergy != null ? ((System.Single)FogLightEnergy).ToString() : "";
            set { if (value != "") { FogLightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogLightEnergy")] public string _Surrogate_Element_FogLightEnergy {
            get => FogLightEnergy != null ? ((System.Single)FogLightEnergy).ToString() : "";
            set { if (value != "") { FogLightEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogLightEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogSunScatter")] public string _Surrogate_Attribute_FogSunScatter {
            get => FogSunScatter != null ? ((System.Single)FogSunScatter).ToString() : "";
            set { if (value != "") { FogSunScatter = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogSunScatter")] public string _Surrogate_Element_FogSunScatter {
            get => FogSunScatter != null ? ((System.Single)FogSunScatter).ToString() : "";
            set { if (value != "") { FogSunScatter = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogSunScatter { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogDensity")] public string _Surrogate_Attribute_FogDensity {
            get => FogDensity != null ? ((System.Single)FogDensity).ToString() : "";
            set { if (value != "") { FogDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogDensity")] public string _Surrogate_Element_FogDensity {
            get => FogDensity != null ? ((System.Single)FogDensity).ToString() : "";
            set { if (value != "") { FogDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogDensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogAerialPerspective")] public string _Surrogate_Attribute_FogAerialPerspective {
            get => FogAerialPerspective != null ? ((System.Single)FogAerialPerspective).ToString() : "";
            set { if (value != "") { FogAerialPerspective = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogAerialPerspective")] public string _Surrogate_Element_FogAerialPerspective {
            get => FogAerialPerspective != null ? ((System.Single)FogAerialPerspective).ToString() : "";
            set { if (value != "") { FogAerialPerspective = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogAerialPerspective { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogSkyAffect")] public string _Surrogate_Attribute_FogSkyAffect {
            get => FogSkyAffect != null ? ((System.Single)FogSkyAffect).ToString() : "";
            set { if (value != "") { FogSkyAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogSkyAffect")] public string _Surrogate_Element_FogSkyAffect {
            get => FogSkyAffect != null ? ((System.Single)FogSkyAffect).ToString() : "";
            set { if (value != "") { FogSkyAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogSkyAffect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogHeight")] public string _Surrogate_Attribute_FogHeight {
            get => FogHeight != null ? ((System.Single)FogHeight).ToString() : "";
            set { if (value != "") { FogHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogHeight")] public string _Surrogate_Element_FogHeight {
            get => FogHeight != null ? ((System.Single)FogHeight).ToString() : "";
            set { if (value != "") { FogHeight = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogHeight { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogHeightDensity")] public string _Surrogate_Attribute_FogHeightDensity {
            get => FogHeightDensity != null ? ((System.Single)FogHeightDensity).ToString() : "";
            set { if (value != "") { FogHeightDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.FogHeightDensity")] public string _Surrogate_Element_FogHeightDensity {
            get => FogHeightDensity != null ? ((System.Single)FogHeightDensity).ToString() : "";
            set { if (value != "") { FogHeightDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? FogHeightDensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogEnabled")] public string _Surrogate_Attribute_VolumetricFogEnabled {
            get => VolumetricFogEnabled != null ? ((System.Boolean)VolumetricFogEnabled).ToString() : "";
            set { if (value != "") { VolumetricFogEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogEnabled")] public string _Surrogate_Element_VolumetricFogEnabled {
            get => VolumetricFogEnabled != null ? ((System.Boolean)VolumetricFogEnabled).ToString() : "";
            set { if (value != "") { VolumetricFogEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? VolumetricFogEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogDensity")] public string _Surrogate_Attribute_VolumetricFogDensity {
            get => VolumetricFogDensity != null ? ((System.Single)VolumetricFogDensity).ToString() : "";
            set { if (value != "") { VolumetricFogDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogDensity")] public string _Surrogate_Element_VolumetricFogDensity {
            get => VolumetricFogDensity != null ? ((System.Single)VolumetricFogDensity).ToString() : "";
            set { if (value != "") { VolumetricFogDensity = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogDensity { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogEmissionEnergy")] public string _Surrogate_Attribute_VolumetricFogEmissionEnergy {
            get => VolumetricFogEmissionEnergy != null ? ((System.Single)VolumetricFogEmissionEnergy).ToString() : "";
            set { if (value != "") { VolumetricFogEmissionEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogEmissionEnergy")] public string _Surrogate_Element_VolumetricFogEmissionEnergy {
            get => VolumetricFogEmissionEnergy != null ? ((System.Single)VolumetricFogEmissionEnergy).ToString() : "";
            set { if (value != "") { VolumetricFogEmissionEnergy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogEmissionEnergy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogGIInject")] public string _Surrogate_Attribute_VolumetricFogGIInject {
            get => VolumetricFogGIInject != null ? ((System.Single)VolumetricFogGIInject).ToString() : "";
            set { if (value != "") { VolumetricFogGIInject = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogGIInject")] public string _Surrogate_Element_VolumetricFogGIInject {
            get => VolumetricFogGIInject != null ? ((System.Single)VolumetricFogGIInject).ToString() : "";
            set { if (value != "") { VolumetricFogGIInject = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogGIInject { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogAnisotropy")] public string _Surrogate_Attribute_VolumetricFogAnisotropy {
            get => VolumetricFogAnisotropy != null ? ((System.Single)VolumetricFogAnisotropy).ToString() : "";
            set { if (value != "") { VolumetricFogAnisotropy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogAnisotropy")] public string _Surrogate_Element_VolumetricFogAnisotropy {
            get => VolumetricFogAnisotropy != null ? ((System.Single)VolumetricFogAnisotropy).ToString() : "";
            set { if (value != "") { VolumetricFogAnisotropy = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogAnisotropy { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogLength")] public string _Surrogate_Attribute_VolumetricFogLength {
            get => VolumetricFogLength != null ? ((System.Single)VolumetricFogLength).ToString() : "";
            set { if (value != "") { VolumetricFogLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogLength")] public string _Surrogate_Element_VolumetricFogLength {
            get => VolumetricFogLength != null ? ((System.Single)VolumetricFogLength).ToString() : "";
            set { if (value != "") { VolumetricFogLength = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogLength { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogDetailSpread")] public string _Surrogate_Attribute_VolumetricFogDetailSpread {
            get => VolumetricFogDetailSpread != null ? ((System.Single)VolumetricFogDetailSpread).ToString() : "";
            set { if (value != "") { VolumetricFogDetailSpread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogDetailSpread")] public string _Surrogate_Element_VolumetricFogDetailSpread {
            get => VolumetricFogDetailSpread != null ? ((System.Single)VolumetricFogDetailSpread).ToString() : "";
            set { if (value != "") { VolumetricFogDetailSpread = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogDetailSpread { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogAmbientInject")] public string _Surrogate_Attribute_VolumetricFogAmbientInject {
            get => VolumetricFogAmbientInject != null ? ((System.Single)VolumetricFogAmbientInject).ToString() : "";
            set { if (value != "") { VolumetricFogAmbientInject = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogAmbientInject")] public string _Surrogate_Element_VolumetricFogAmbientInject {
            get => VolumetricFogAmbientInject != null ? ((System.Single)VolumetricFogAmbientInject).ToString() : "";
            set { if (value != "") { VolumetricFogAmbientInject = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogAmbientInject { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogSkyAffect")] public string _Surrogate_Attribute_VolumetricFogSkyAffect {
            get => VolumetricFogSkyAffect != null ? ((System.Single)VolumetricFogSkyAffect).ToString() : "";
            set { if (value != "") { VolumetricFogSkyAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogSkyAffect")] public string _Surrogate_Element_VolumetricFogSkyAffect {
            get => VolumetricFogSkyAffect != null ? ((System.Single)VolumetricFogSkyAffect).ToString() : "";
            set { if (value != "") { VolumetricFogSkyAffect = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogSkyAffect { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogTemporalReprojectionEnabled")] public string _Surrogate_Attribute_VolumetricFogTemporalReprojectionEnabled {
            get => VolumetricFogTemporalReprojectionEnabled != null ? ((System.Boolean)VolumetricFogTemporalReprojectionEnabled).ToString() : "";
            set { if (value != "") { VolumetricFogTemporalReprojectionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogTemporalReprojectionEnabled")] public string _Surrogate_Element_VolumetricFogTemporalReprojectionEnabled {
            get => VolumetricFogTemporalReprojectionEnabled != null ? ((System.Boolean)VolumetricFogTemporalReprojectionEnabled).ToString() : "";
            set { if (value != "") { VolumetricFogTemporalReprojectionEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? VolumetricFogTemporalReprojectionEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogTemporalReprojectionAmount")] public string _Surrogate_Attribute_VolumetricFogTemporalReprojectionAmount {
            get => VolumetricFogTemporalReprojectionAmount != null ? ((System.Single)VolumetricFogTemporalReprojectionAmount).ToString() : "";
            set { if (value != "") { VolumetricFogTemporalReprojectionAmount = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.VolumetricFogTemporalReprojectionAmount")] public string _Surrogate_Element_VolumetricFogTemporalReprojectionAmount {
            get => VolumetricFogTemporalReprojectionAmount != null ? ((System.Single)VolumetricFogTemporalReprojectionAmount).ToString() : "";
            set { if (value != "") { VolumetricFogTemporalReprojectionAmount = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? VolumetricFogTemporalReprojectionAmount { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AdjustmentEnabled")] public string _Surrogate_Attribute_AdjustmentEnabled {
            get => AdjustmentEnabled != null ? ((System.Boolean)AdjustmentEnabled).ToString() : "";
            set { if (value != "") { AdjustmentEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AdjustmentEnabled")] public string _Surrogate_Element_AdjustmentEnabled {
            get => AdjustmentEnabled != null ? ((System.Boolean)AdjustmentEnabled).ToString() : "";
            set { if (value != "") { AdjustmentEnabled = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? AdjustmentEnabled { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AdjustmentBrightness")] public string _Surrogate_Attribute_AdjustmentBrightness {
            get => AdjustmentBrightness != null ? ((System.Single)AdjustmentBrightness).ToString() : "";
            set { if (value != "") { AdjustmentBrightness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AdjustmentBrightness")] public string _Surrogate_Element_AdjustmentBrightness {
            get => AdjustmentBrightness != null ? ((System.Single)AdjustmentBrightness).ToString() : "";
            set { if (value != "") { AdjustmentBrightness = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AdjustmentBrightness { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AdjustmentContrast")] public string _Surrogate_Attribute_AdjustmentContrast {
            get => AdjustmentContrast != null ? ((System.Single)AdjustmentContrast).ToString() : "";
            set { if (value != "") { AdjustmentContrast = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AdjustmentContrast")] public string _Surrogate_Element_AdjustmentContrast {
            get => AdjustmentContrast != null ? ((System.Single)AdjustmentContrast).ToString() : "";
            set { if (value != "") { AdjustmentContrast = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AdjustmentContrast { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AdjustmentSaturation")] public string _Surrogate_Attribute_AdjustmentSaturation {
            get => AdjustmentSaturation != null ? ((System.Single)AdjustmentSaturation).ToString() : "";
            set { if (value != "") { AdjustmentSaturation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.AdjustmentSaturation")] public string _Surrogate_Element_AdjustmentSaturation {
            get => AdjustmentSaturation != null ? ((System.Single)AdjustmentSaturation).ToString() : "";
            set { if (value != "") { AdjustmentSaturation = System.Single.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Single? AdjustmentSaturation { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceLocalToScene")] public string _Surrogate_Attribute_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.ResourceLocalToScene")] public string _Surrogate_Element_ResourceLocalToScene {
            get => ResourceLocalToScene != null ? ((System.Boolean)ResourceLocalToScene).ToString() : "";
            set { if (value != "") { ResourceLocalToScene = System.Boolean.Parse(value); } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.Boolean? ResourceLocalToScene { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourcePath")] public string _Surrogate_Attribute_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.ResourcePath")] public string _Surrogate_Element_ResourcePath {
            get => ResourcePath != null ? ((System.String)ResourcePath).ToString() : "";
            set { if (value != "") { ResourcePath = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourcePath { get; set; }
        [System.Xml.Serialization.XmlAttribute(AttributeName = "ResourceName")] public string _Surrogate_Attribute_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlElement(ElementName = "Environment.ResourceName")] public string _Surrogate_Element_ResourceName {
            get => ResourceName != null ? ((System.String)ResourceName).ToString() : "";
            set { if (value != "") { ResourceName = value; } }
        }
        [System.Xml.Serialization.XmlIgnore] public System.String? ResourceName { get; set; }
#nullable disable

        // Overloaded Attributes
        [System.Xml.Serialization.XmlAttribute(AttributeName = "BackgroundColor")] public string _Surrogate_BackgroundColor {
            get => BackgroundColor != null ? ((Archwyvern.Nxml.Translators.Color)BackgroundColor).ToString() : "";
            set => BackgroundColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? BackgroundColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "SkyRotation")] public string _Surrogate_SkyRotation {
            get => SkyRotation != null ? ((Archwyvern.Nxml.Translators.Vector3)SkyRotation).ToString() : "";
            set => SkyRotation = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Vector3? SkyRotation;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "AmbientLightColor")] public string _Surrogate_AmbientLightColor {
            get => AmbientLightColor != null ? ((Archwyvern.Nxml.Translators.Color)AmbientLightColor).ToString() : "";
            set => AmbientLightColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? AmbientLightColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "FogLightColor")] public string _Surrogate_FogLightColor {
            get => FogLightColor != null ? ((Archwyvern.Nxml.Translators.Color)FogLightColor).ToString() : "";
            set => FogLightColor = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? FogLightColor;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogAlbedo")] public string _Surrogate_VolumetricFogAlbedo {
            get => VolumetricFogAlbedo != null ? ((Archwyvern.Nxml.Translators.Color)VolumetricFogAlbedo).ToString() : "";
            set => VolumetricFogAlbedo = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? VolumetricFogAlbedo;
        [System.Xml.Serialization.XmlAttribute(AttributeName = "VolumetricFogEmission")] public string _Surrogate_VolumetricFogEmission {
            get => VolumetricFogEmission != null ? ((Archwyvern.Nxml.Translators.Color)VolumetricFogEmission).ToString() : "";
            set => VolumetricFogEmission = value != "" ? value : null;
        }
        [System.Xml.Serialization.XmlIgnore] public Archwyvern.Nxml.Translators.Color? VolumetricFogEmission;

        internal override Godot.GodotObject CreateObject(Godot.GodotObject alt = null)
        {
            if (alt != null && alt is not Godot.Environment) return alt;
            var obj = (Godot.Environment)alt ?? new Godot.Environment();

            // Attributes
            if (BackgroundMode != null) obj.BackgroundMode = (Godot.Environment.BGMode)BackgroundMode;
            if (BackgroundEnergyMultiplier != null) obj.BackgroundEnergyMultiplier = (System.Single)BackgroundEnergyMultiplier;
            if (BackgroundIntensity != null) obj.BackgroundIntensity = (System.Single)BackgroundIntensity;
            if (BackgroundCanvasMaxLayer != null) obj.BackgroundCanvasMaxLayer = (System.Int32)BackgroundCanvasMaxLayer;
            if (BackgroundCameraFeedId != null) obj.BackgroundCameraFeedId = (System.Int32)BackgroundCameraFeedId;
            if (SkyCustomFov != null) obj.SkyCustomFov = (System.Single)SkyCustomFov;
            if (AmbientLightSource != null) obj.AmbientLightSource = (Godot.Environment.AmbientSource)AmbientLightSource;
            if (AmbientLightSkyContribution != null) obj.AmbientLightSkyContribution = (System.Single)AmbientLightSkyContribution;
            if (AmbientLightEnergy != null) obj.AmbientLightEnergy = (System.Single)AmbientLightEnergy;
            if (ReflectedLightSource != null) obj.ReflectedLightSource = (Godot.Environment.ReflectionSource)ReflectedLightSource;
            if (TonemapMode != null) obj.TonemapMode = (Godot.Environment.ToneMapper)TonemapMode;
            if (TonemapExposure != null) obj.TonemapExposure = (System.Single)TonemapExposure;
            if (TonemapWhite != null) obj.TonemapWhite = (System.Single)TonemapWhite;
            if (SsrEnabled != null) obj.SsrEnabled = (System.Boolean)SsrEnabled;
            if (SsrMaxSteps != null) obj.SsrMaxSteps = (System.Int32)SsrMaxSteps;
            if (SsrFadeIn != null) obj.SsrFadeIn = (System.Single)SsrFadeIn;
            if (SsrFadeOut != null) obj.SsrFadeOut = (System.Single)SsrFadeOut;
            if (SsrDepthTolerance != null) obj.SsrDepthTolerance = (System.Single)SsrDepthTolerance;
            if (SsaoEnabled != null) obj.SsaoEnabled = (System.Boolean)SsaoEnabled;
            if (SsaoRadius != null) obj.SsaoRadius = (System.Single)SsaoRadius;
            if (SsaoIntensity != null) obj.SsaoIntensity = (System.Single)SsaoIntensity;
            if (SsaoPower != null) obj.SsaoPower = (System.Single)SsaoPower;
            if (SsaoDetail != null) obj.SsaoDetail = (System.Single)SsaoDetail;
            if (SsaoHorizon != null) obj.SsaoHorizon = (System.Single)SsaoHorizon;
            if (SsaoSharpness != null) obj.SsaoSharpness = (System.Single)SsaoSharpness;
            if (SsaoLightAffect != null) obj.SsaoLightAffect = (System.Single)SsaoLightAffect;
            if (SsaoAOChannelAffect != null) obj.SsaoAOChannelAffect = (System.Single)SsaoAOChannelAffect;
            if (SsilEnabled != null) obj.SsilEnabled = (System.Boolean)SsilEnabled;
            if (SsilRadius != null) obj.SsilRadius = (System.Single)SsilRadius;
            if (SsilIntensity != null) obj.SsilIntensity = (System.Single)SsilIntensity;
            if (SsilSharpness != null) obj.SsilSharpness = (System.Single)SsilSharpness;
            if (SsilNormalRejection != null) obj.SsilNormalRejection = (System.Single)SsilNormalRejection;
            if (SdfgiEnabled != null) obj.SdfgiEnabled = (System.Boolean)SdfgiEnabled;
            if (SdfgiUseOcclusion != null) obj.SdfgiUseOcclusion = (System.Boolean)SdfgiUseOcclusion;
            if (SdfgiReadSkyLight != null) obj.SdfgiReadSkyLight = (System.Boolean)SdfgiReadSkyLight;
            if (SdfgiBounceFeedback != null) obj.SdfgiBounceFeedback = (System.Single)SdfgiBounceFeedback;
            if (SdfgiCascades != null) obj.SdfgiCascades = (System.Int32)SdfgiCascades;
            if (SdfgiMinCellSize != null) obj.SdfgiMinCellSize = (System.Single)SdfgiMinCellSize;
            if (SdfgiCascade0Distance != null) obj.SdfgiCascade0Distance = (System.Single)SdfgiCascade0Distance;
            if (SdfgiMaxDistance != null) obj.SdfgiMaxDistance = (System.Single)SdfgiMaxDistance;
            if (SdfgiYScale != null) obj.SdfgiYScale = (Godot.Environment.SdfgiyScale)SdfgiYScale;
            if (SdfgiEnergy != null) obj.SdfgiEnergy = (System.Single)SdfgiEnergy;
            if (SdfgiNormalBias != null) obj.SdfgiNormalBias = (System.Single)SdfgiNormalBias;
            if (SdfgiProbeBias != null) obj.SdfgiProbeBias = (System.Single)SdfgiProbeBias;
            if (GlowEnabled != null) obj.GlowEnabled = (System.Boolean)GlowEnabled;
            if (GlowNormalized != null) obj.GlowNormalized = (System.Boolean)GlowNormalized;
            if (GlowIntensity != null) obj.GlowIntensity = (System.Single)GlowIntensity;
            if (GlowStrength != null) obj.GlowStrength = (System.Single)GlowStrength;
            if (GlowMix != null) obj.GlowMix = (System.Single)GlowMix;
            if (GlowBloom != null) obj.GlowBloom = (System.Single)GlowBloom;
            if (GlowBlendMode != null) obj.GlowBlendMode = (Godot.Environment.GlowBlendModeEnum)GlowBlendMode;
            if (GlowHdrThreshold != null) obj.GlowHdrThreshold = (System.Single)GlowHdrThreshold;
            if (GlowHdrScale != null) obj.GlowHdrScale = (System.Single)GlowHdrScale;
            if (GlowHdrLuminanceCap != null) obj.GlowHdrLuminanceCap = (System.Single)GlowHdrLuminanceCap;
            if (GlowMapStrength != null) obj.GlowMapStrength = (System.Single)GlowMapStrength;
            if (FogEnabled != null) obj.FogEnabled = (System.Boolean)FogEnabled;
            if (FogLightEnergy != null) obj.FogLightEnergy = (System.Single)FogLightEnergy;
            if (FogSunScatter != null) obj.FogSunScatter = (System.Single)FogSunScatter;
            if (FogDensity != null) obj.FogDensity = (System.Single)FogDensity;
            if (FogAerialPerspective != null) obj.FogAerialPerspective = (System.Single)FogAerialPerspective;
            if (FogSkyAffect != null) obj.FogSkyAffect = (System.Single)FogSkyAffect;
            if (FogHeight != null) obj.FogHeight = (System.Single)FogHeight;
            if (FogHeightDensity != null) obj.FogHeightDensity = (System.Single)FogHeightDensity;
            if (VolumetricFogEnabled != null) obj.VolumetricFogEnabled = (System.Boolean)VolumetricFogEnabled;
            if (VolumetricFogDensity != null) obj.VolumetricFogDensity = (System.Single)VolumetricFogDensity;
            if (VolumetricFogEmissionEnergy != null) obj.VolumetricFogEmissionEnergy = (System.Single)VolumetricFogEmissionEnergy;
            if (VolumetricFogGIInject != null) obj.VolumetricFogGIInject = (System.Single)VolumetricFogGIInject;
            if (VolumetricFogAnisotropy != null) obj.VolumetricFogAnisotropy = (System.Single)VolumetricFogAnisotropy;
            if (VolumetricFogLength != null) obj.VolumetricFogLength = (System.Single)VolumetricFogLength;
            if (VolumetricFogDetailSpread != null) obj.VolumetricFogDetailSpread = (System.Single)VolumetricFogDetailSpread;
            if (VolumetricFogAmbientInject != null) obj.VolumetricFogAmbientInject = (System.Single)VolumetricFogAmbientInject;
            if (VolumetricFogSkyAffect != null) obj.VolumetricFogSkyAffect = (System.Single)VolumetricFogSkyAffect;
            if (VolumetricFogTemporalReprojectionEnabled != null) obj.VolumetricFogTemporalReprojectionEnabled = (System.Boolean)VolumetricFogTemporalReprojectionEnabled;
            if (VolumetricFogTemporalReprojectionAmount != null) obj.VolumetricFogTemporalReprojectionAmount = (System.Single)VolumetricFogTemporalReprojectionAmount;
            if (AdjustmentEnabled != null) obj.AdjustmentEnabled = (System.Boolean)AdjustmentEnabled;
            if (AdjustmentBrightness != null) obj.AdjustmentBrightness = (System.Single)AdjustmentBrightness;
            if (AdjustmentContrast != null) obj.AdjustmentContrast = (System.Single)AdjustmentContrast;
            if (AdjustmentSaturation != null) obj.AdjustmentSaturation = (System.Single)AdjustmentSaturation;
            if (ResourceLocalToScene != null) obj.ResourceLocalToScene = (System.Boolean)ResourceLocalToScene;
            if (ResourcePath != null) obj.ResourcePath = (System.String)ResourcePath;
            if (ResourceName != null) obj.ResourceName = (System.String)ResourceName;
            // Overloaded Attributes
            if (BackgroundColor != null) obj.BackgroundColor = (Archwyvern.Nxml.Translators.Color)BackgroundColor;
            if (SkyRotation != null) obj.SkyRotation = (Archwyvern.Nxml.Translators.Vector3)SkyRotation;
            if (AmbientLightColor != null) obj.AmbientLightColor = (Archwyvern.Nxml.Translators.Color)AmbientLightColor;
            if (FogLightColor != null) obj.FogLightColor = (Archwyvern.Nxml.Translators.Color)FogLightColor;
            if (VolumetricFogAlbedo != null) obj.VolumetricFogAlbedo = (Archwyvern.Nxml.Translators.Color)VolumetricFogAlbedo;
            if (VolumetricFogEmission != null) obj.VolumetricFogEmission = (Archwyvern.Nxml.Translators.Color)VolumetricFogEmission;
            // Elements
            if (Sky != null) {
                if (((IResourceTag)Sky).ResourcePath != null) {
                    obj.Sky = (Godot.Sky)Sky.Generate(Godot.GD.Load<Godot.Sky>(((IResourceTag)Sky).ResourcePath));
                } else {
                    obj.Sky = (Godot.Sky)Sky.Generate();
                }
            }
            if (GlowMap != null) {
                if (((IResourceTag)GlowMap).ResourcePath != null) {
                    obj.GlowMap = (Godot.Texture)GlowMap.Generate(Godot.GD.Load<Godot.Texture>(((IResourceTag)GlowMap).ResourcePath));
                } else {
                    obj.GlowMap = (Godot.Texture)GlowMap.Generate();
                }
            }
            if (AdjustmentColorCorrection != null) {
                if (((IResourceTag)AdjustmentColorCorrection).ResourcePath != null) {
                    obj.AdjustmentColorCorrection = (Godot.Texture)AdjustmentColorCorrection.Generate(Godot.GD.Load<Godot.Texture>(((IResourceTag)AdjustmentColorCorrection).ResourcePath));
                } else {
                    obj.AdjustmentColorCorrection = (Godot.Texture)AdjustmentColorCorrection.Generate();
                }
            }

            return obj;
        }
    }
}
